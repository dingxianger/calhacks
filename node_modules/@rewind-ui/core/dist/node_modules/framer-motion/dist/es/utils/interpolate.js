import{invariant as r}from"./errors.js";import{color as t}from"../value/types/color/index.js";import{clamp as o}from"./clamp.js";import{mix as e}from"./mix.js";import{mixColor as s}from"./mix-color.js";import{mixComplex as m,mixArray as n,mixObject as i}from"./mix-complex.js";import{pipe as p}from"./pipe.js";import{progress as f}from"./progress.js";import{noop as c}from"./noop.js";const l=(r,t)=>o=>e(r,t,o);function u(r,o,e){const f=[],u=e||("number"==typeof(a=r[0])?l:"string"==typeof a?t.test(a)?s:m:Array.isArray(a)?n:"object"==typeof a?i:l);var a;const j=r.length-1;for(let t=0;t<j;t++){let e=u(r[t],r[t+1]);if(o){const r=Array.isArray(o)?o[t]||c:o;e=p(r,e)}f.push(e)}return f}function a(t,e,{clamp:s=!0,ease:m,mixer:n}={}){const i=t.length;if(r(i===e.length,"Both input and output ranges must be the same length"),1===i)return()=>e[0];t[0]>t[i-1]&&(t=[...t].reverse(),e=[...e].reverse());const p=u(e,m,n),c=p.length,l=r=>{let o=0;if(c>1)for(;o<t.length-2&&!(r<t[o+1]);o++);const e=f(t[o],t[o+1],r);return p[o](e)};return s?r=>l(o(t[0],t[i-1],r)):l}export{a as interpolate};
