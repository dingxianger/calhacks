import {
  require_jsx_runtime
} from "./chunk-3JXUIMPU.js";
import {
  require_react_dom
} from "./chunk-VPTIPXRI.js";
import {
  require_react
} from "./chunk-4UQS7KPA.js";
import {
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize(fn) {
  var cache = {};
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex, index3, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index3 = memoize_browser_esm_default(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default = index3;
  }
});

// node_modules/tslib/tslib.es6.mjs
function __rest(s59, e114) {
  var t123 = {};
  for (var p31 in s59)
    if (Object.prototype.hasOwnProperty.call(s59, p31) && e114.indexOf(p31) < 0)
      t123[p31] = s59[p31];
  if (s59 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i49 = 0, p31 = Object.getOwnPropertySymbols(s59); i49 < p31.length; i49++) {
      if (e114.indexOf(p31[i49]) < 0 && Object.prototype.propertyIsEnumerable.call(s59, p31[i49]))
        t123[p31[i49]] = s59[p31[i49]];
    }
  return t123;
}

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-element-context.hook.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
function t(t123) {
  const o103 = (0, import_react.createContext)(null);
  return [({ children: e114, value: n83 }) => (0, import_jsx_runtime.jsx)(o103.Provider, Object.assign({ value: n83 }, { children: e114 })), () => {
    const r107 = (0, import_react.useContext)(o103);
    if (null === r107)
      throw new Error(t123);
    return r107;
  }];
}

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.context.js
var [e2, n2] = t("Accordion compound components cannot be rendered outside the Accordion component");

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionItem/AccordionItem.context.js
var [e3, n3] = t("Accordion Item compound components cannot be rendered outside the Accordion Item component");

// node_modules/@rewind-ui/core/dist/components/Collapse/Collapse.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var r2 = (r107) => {
  const i49 = (0, import_react2.useRef)(null), { duration: o103 = 250, isOpen: s59 = false, children: l40 } = r107, a60 = (0, import_react2.useRef)(true);
  return (0, import_react2.useEffect)(() => {
    const e114 = i49.current;
    if (!e114)
      return;
    if (a60.current)
      return e114.style.height = s59 ? "auto" : "0", e114.style.overflow = "hidden", void (a60.current = false);
    const t123 = e114.getAnimations(), n83 = getComputedStyle(e114).height, r108 = s59 ? `${e114.scrollHeight}px` : "0";
    t123.length > 0 && t123.forEach((e115) => {
      e115.cancel();
    }), e114.style.overflow = "hidden";
    const l41 = s59 ? "ease-in" : "ease-out", c55 = { height: [n83, r108] };
    e114.animate(c55, { duration: o103, easing: l41 }).onfinish = () => {
      e114.style.overflow = r108, e114.style.height = s59 ? "auto" : "0px";
    };
  }, [o103, s59]), (0, import_jsx_runtime2.jsx)("div", Object.assign({ ref: i49 }, { children: l40 }));
};
r2.displayName = "Collapse";

// node_modules/@rewind-ui/core/node_modules/class-variance-authority/dist/index.esm.js
var falsyToString = (value) => typeof value === "boolean" ? "".concat(value) : value === 0 ? "0" : value;
var cx = function() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }
  return classes.flat(Infinity).filter(Boolean).join(" ");
};
var cva = (base, config) => {
  return (props) => {
    var ref;
    if ((config === null || config === void 0 ? void 0 : config.variants) == null)
      return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    const { variants, defaultVariants } = config;
    const getVariantClassNames = Object.keys(variants).map((variant) => {
      const variantProp = props === null || props === void 0 ? void 0 : props[variant];
      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
      if (variantProp === null)
        return null;
      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
      return variants[variant][variantKey];
    });
    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === void 0) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
    const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {
      let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param1;
      return Object.entries(compoundVariantOptions).every((param) => {
        let [key, value] = param;
        return Array.isArray(value) ? value.includes({
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key]) : {
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key] === value;
      }) ? [
        ...acc,
        cvClass,
        cvClassName
      ] : acc;
    }, []);
    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  };
};

// node_modules/@rewind-ui/core/dist/theme/styles/Accordion.styles.js
var t3 = { base: cva([], { variants: { color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [""], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], slate: ["shadow-slate-600/50 hover:shadow-slate-600/60"], zinc: ["shadow-zinc-600/50 hover:shadow-zinc-600/60"] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"], xl: ["text-xl"] }, tone: { solid: [], light: [], transparent: [] }, bordered: { true: ["border", "border-gray-100"] } } }), body: cva([], { variants: { size: { sm: ["text-sm", "px-4", "py-2"], md: ["text-base", "px-4", "py-3"], lg: ["text-base", "px-4", "py-4"], xl: ["text-lg", "px-4", "py-5"] }, bordered: { true: [], false: [] } } }), header: cva(["cursor-pointer", "flex", "flex-row", "justify-between", "items-center", "transition", "duration-250", "ease-in-out", "w-full", "focus:outline-none"], { variants: { activeColor: { white: ["focus:ring-gray-100"], blue: ["focus:ring-blue-100"], red: ["focus:ring-red-100"], green: ["focus:ring-green-100"], yellow: ["focus:ring-yellow-100"], purple: ["focus:ring-purple-100"], gray: ["focus:ring-gray-100"], dark: ["focus:ring-gray-200"], black: ["focus:ring-gray-300"] }, size: { sm: ["px-4", "py-2"], md: ["px-4", "py-3"], lg: ["px-4", "py-4"], xl: ["px-4", "py-5"] }, state: { active: [], inactive: [] }, tone: { solid: [], light: [] }, radius: { none: ["first:rounded-t-none"], sm: ["first:rounded-t-sm"], base: ["first:rounded-t"], md: ["first:rounded-t-md"], lg: ["first:rounded-t-lg"] }, bordered: { true: ["border-t", "first:border-t-0", "border-gray-100"], false: [] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, compoundVariants: [{ state: "active", bordered: false, className: ["scale-[1.01]"] }, { state: "active", tone: "solid", className: ["antialiased"] }, { bordered: false, radius: "sm", className: "rounded-sm" }, { bordered: false, radius: "base", className: "rounded" }, { bordered: false, radius: "md", className: "rounded-md" }, { bordered: false, radius: "lg", className: "rounded-lg" }, { activeColor: "white", state: "active", tone: "solid", className: ["bg-white", "text-gray-800"] }, { activeColor: "blue", state: "active", tone: "solid", className: ["bg-blue-500", "text-white"] }, { activeColor: "red", state: "active", tone: "solid", className: ["bg-red-500", "text-white"] }, { activeColor: "green", state: "active", tone: "solid", className: ["bg-green-500", "text-white"] }, { activeColor: "yellow", state: "active", tone: "solid", className: ["bg-yellow-500", "text-white"] }, { activeColor: "purple", state: "active", tone: "solid", className: ["bg-purple-500", "text-white"] }, { activeColor: "gray", state: "active", tone: "solid", className: ["bg-gray-200", "text-gray-800"] }, { activeColor: "dark", state: "active", tone: "solid", className: ["bg-gray-700", "text-white"] }, { activeColor: "black", state: "active", tone: "solid", className: ["bg-black", "text-white"] }, { activeColor: "white", state: "active", tone: "light", className: ["bg-white", "text-gray-800"] }, { activeColor: "blue", state: "active", tone: "light", className: ["bg-blue-50", "text-blue-900"] }, { activeColor: "red", state: "active", tone: "light", className: ["bg-red-50", "text-red-800"] }, { activeColor: "green", state: "active", tone: "light", className: ["bg-green-50", "text-green-800"] }, { activeColor: "yellow", state: "active", tone: "light", className: ["bg-yellow-50", "text-yellow-800"] }, { activeColor: "purple", state: "active", tone: "light", className: ["bg-purple-50", "text-purple-800"] }, { activeColor: "gray", state: "active", tone: "light", className: ["bg-gray-50", "text-gray-600"] }, { activeColor: "dark", state: "active", tone: "light", className: ["bg-gray-200", "text-gray-800"] }, { activeColor: "black", state: "active", tone: "light", className: ["bg-gray-400", "text-gray-800"] }] }), icon: cva(["transition", "transform", "duration-250", "ease-in-out"], { variants: { state: { active: "rotate-180", inactive: "" }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-5", "h-5"], xl: ["w-6", "h-6"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Alert.styles.js
var o = cva(["flex", "gap-x-3", "w-full"], { variants: { tone: { solid: ["border", "border-transparent", "antialiased"], light: ["border"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "px-2.5", "py-2"], sm: ["text-sm", "px-3", "py-2.5"], md: ["text-base", "px-4", "py-3"], lg: ["text-lg", "px-5", "py-4"] }, accent: { none: [], top: ["border-t-2"], right: ["border-r-2"], bottom: ["border-b-2"], left: ["border-l-2"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: ["shadow-gray-200/50 hover:shadow-gray-200/60"], blue: ["shadow-blue-500/50", "hover:shadow-blue-500/60"], red: ["shadow-red-500/50 hover:shadow-red-500/60"], green: ["shadow-green-500/50 hover:shadow-green-500/60"], yellow: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"], purple: ["shadow-purple-500/50 hover:shadow-purple-500/60"], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], dark: ["shadow-gray-600/50 hover:shadow-gray-600/60"], black: ["shadow-gray-800/50 hover:shadow-gray-800/60"] } }, compoundVariants: [{ accent: ["top", "right", "bottom", "left"], color: "white", tone: "solid", className: ["border-gray-200"] }, { accent: ["top", "right", "bottom", "left"], color: "blue", tone: "solid", className: ["border-blue-200"] }, { accent: ["top", "right", "bottom", "left"], color: "red", tone: "solid", className: ["border-red-200"] }, { accent: ["top", "right", "bottom", "left"], color: "green", tone: "solid", className: ["border-green-200"] }, { accent: ["top", "right", "bottom", "left"], color: "yellow", tone: "solid", className: ["border-yellow-200"] }, { accent: ["top", "right", "bottom", "left"], color: "purple", tone: "solid", className: ["border-purple-200"] }, { accent: ["top", "right", "bottom", "left"], color: "gray", tone: "solid", className: ["border-gray-100"] }, { accent: ["top", "right", "bottom", "left"], color: "dark", tone: "solid", className: ["border-gray-300"] }, { accent: ["top", "right", "bottom", "left"], color: "black", tone: "solid", className: ["border-gray-400"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "light", color: "blue", className: ["text-blue-700", "bg-blue-100/95", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-700", "bg-red-100/95", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-700", "bg-green-100/95", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-700", "bg-yellow-100/95", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-700", "bg-purple-100/95", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-700", "bg-gray-100/95", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-800", "bg-gray-300/95", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/95", "border-gray-800"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "border-blue-500"] }, { tone: "outline", color: "red", className: ["text-red-500", "border-red-500"] }, { tone: "outline", color: "green", className: ["text-green-500", "border-green-500"] }, { tone: "outline", color: "yellow", className: ["text-yellow-400", "border-yellow-400"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "border-purple-500"] }, { tone: "outline", color: "gray", className: ["text-gray-600", "border-gray-500"] }, { tone: "outline", color: "dark", className: ["text-gray-600", "border-gray-700"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-800"] }] });
var r3 = cva(["flex", "flex-col", "w-full"], { variants: { size: { xs: ["gap-y-1"], sm: ["gap-y-1.5"], md: ["gap-y-1.5"], lg: ["gap-y-2"] } } });
var l = cva(["font-medium", "leading-none"], { variants: { size: { xs: ["text-sm"], sm: ["text-base"], md: ["text-lg"], lg: ["text-xl"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, tone: { solid: [], light: [], outline: [] } }, compoundVariants: [{ tone: "light", color: "blue", className: ["text-blue-800"] }, { tone: "light", color: "red", className: ["text-red-800"] }, { tone: "light", color: "green", className: ["text-green-800"] }, { tone: "light", color: "yellow", className: ["text-yellow-800"] }, { tone: "light", color: "purple", className: ["text-purple-800"] }, { tone: "light", color: "gray", className: ["text-gray-800"] }, { tone: "light", color: "dark", className: ["text-gray-900"] }] });
var t4 = cva([]);
var a = { base: o, infoWrapper: r3, iconWrapper: cva(["self-start"]), dismissIcon: cva(["hover:opacity-75"], { variants: { size: { xs: ["w-4", "h-4"], sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-5", "h-5"] } } }), title: l, text: t4 };

// node_modules/@rewind-ui/core/dist/theme/styles/Avatar.styles.js
var o2 = { base: cva(["inline-flex", "items-center", "justify-center", "relative", "hover:z-20", "z-10"], { variants: { tone: { solid: ["antialiased"], light: [], glossy: ["bg-gradient-to-r"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "w-7", "h-7"], sm: ["text-xs", "w-8", "h-8"], md: ["text-sm", "w-10", "h-10"], lg: ["text-base", "w-12", "h-12"], xl: ["text-lg", "w-16", "h-16"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, outlined: { true: ["outline"], false: [] } }, compoundVariants: [{ outlined: true, size: ["xs"], className: ["outline-0.5"] }, { outlined: true, size: ["sm"], className: ["outline-1"] }, { outlined: true, size: ["md", "lg", "xl"], className: ["outline-2"] }, { outlined: true, color: "white", className: ["outline-white"] }, { outlined: true, color: "blue", className: ["outline-blue-200"] }, { outlined: true, color: "red", className: ["outline-red-200"] }, { outlined: true, color: "green", className: ["outline-green-200"] }, { outlined: true, color: "yellow", className: ["outline-yellow-200"] }, { outlined: true, color: "purple", className: ["outline-purple-200"] }, { outlined: true, color: "gray", className: ["outline-gray-200"] }, { outlined: true, color: "dark", className: ["outline-gray-200"] }, { outlined: true, color: "black", className: ["outline-gray-300"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100/50"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100/50"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100/50"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100/50"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100/50"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100/50"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300/50"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/50"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "border-blue-500"] }, { tone: "outline", color: "red", className: ["text-red-500", "border-red-500"] }, { tone: "outline", color: "green", className: ["text-green-500", "border-green-500"] }, { tone: "outline", color: "yellow", className: ["text-yellow-400", "border-yellow-400"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "border-purple-500"] }, { tone: "outline", color: "gray", className: ["text-gray-600", "border-gray-500"] }, { tone: "outline", color: "dark", className: ["text-gray-600", "border-gray-700"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-800"] }] }), status: cva(["absolute", "rounded-full", "outline"], { variants: { position: { "top-right": [], "top-left": [], "bottom-right": [], "bottom-left": [] }, size: { xs: ["w-1.5", "h-1.5"], sm: ["w-1.5", "h-1.5"], md: ["w-2", "h-2"], lg: ["w-2.5", "h-2.5"], xl: ["w-3", "h-3", "outline-2"] }, radius: { none: [], sm: [], base: [], md: [], lg: [], full: [] }, status: { online: ["bg-green-400", "outline-green-100"], offline: ["bg-gray-200", "outline-gray-100"], busy: ["bg-red-400", "outline-red-100"], away: ["bg-yellow-300", "outline-yellow-100"] } }, compoundVariants: [{ radius: ["none", "sm", "base", "md", "lg"], position: "top-right", className: ["top-0", "right-0", "translate-x-1/2", "-translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "top-left", className: ["top-0", "left-0", "-translate-x-1/2", "-translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "bottom-right", className: ["bottom-0", "right-0", "translate-x-1/2", "translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "bottom-left", className: ["bottom-0", "left-0", "-translate-x-1/2", "translate-y-1/2"] }, { radius: "full", position: "top-right", size: ["xs", "sm"], className: ["top-[0.03rem]", "right-[0.03rem]"] }, { radius: "full", position: "top-left", size: ["xs", "sm"], className: ["top-[0.03rem]", "left-[0.03rem]"] }, { radius: "full", position: "bottom-right", size: ["xs", "sm"], className: ["bottom-[0.03rem]", "right-[0.03rem]"] }, { radius: "full", position: "bottom-left", size: ["xs", "sm"], className: ["bottom-[0.03rem]", "left-[0.03rem]"] }, { radius: "full", position: "top-right", size: ["md", "lg"], className: ["top-[0.05rem]", "right-[0.05rem]"] }, { radius: "full", position: "top-left", size: ["md", "lg"], className: ["top-[0.05rem]", "left-[0.05rem]"] }, { radius: "full", position: "bottom-right", size: ["md", "lg"], className: ["bottom-[0.05rem]", "right-[0.05rem]"] }, { radius: "full", position: "bottom-left", size: ["md", "lg"], className: ["bottom-[0.05rem]", "left-[0.05rem]"] }, { radius: "full", position: "top-right", size: "xl", className: ["top-[0.1rem]", "right-[0.1rem]"] }, { radius: "full", position: "top-left", size: "xl", className: ["top-[0.1rem]", "left-[0.1rem]"] }, { radius: "full", position: "bottom-right", size: "xl", className: ["bottom-[0.1rem]", "right-[0.1rem]"] }, { radius: "full", position: "bottom-left", size: "xl", className: ["bottom-[0.1rem]", "left-[0.1rem]"] }] }), image: cva(["object-cover", "w-full", "h-full"], { variants: { radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] } } }), group: cva(["flex", "isolate", "-space-x-3"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Badge.styles.js
var e5 = { base: cva(["inline-flex", "items-center", "text-center"], { variants: { tone: { solid: ["border", "border-transparent", "antialiased"], light: [], glossy: ["bg-gradient-to-r"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "px-1", "h-5"], sm: ["text-sm", "px-1.5", "h-6"], md: ["text-base", "px-1.5", "h-7"], lg: ["text-lg", "px-2", "h-8"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: ["solid", "glossy", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100/50", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100/50", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100/50", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100/50", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100/50", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100/50", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300/50", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/50", "border-gray-800"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "border-blue-500"] }, { tone: "outline", color: "red", className: ["text-red-500", "border-red-500"] }, { tone: "outline", color: "green", className: ["text-green-500", "border-green-500"] }, { tone: "outline", color: "yellow", className: ["text-yellow-400", "border-yellow-400"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "border-purple-500"] }, { tone: "outline", color: "gray", className: ["text-gray-600", "border-gray-500"] }, { tone: "outline", color: "dark", className: ["text-gray-600", "border-gray-700"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-800"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Button.styles.js
var r4 = { base: cva(["inline-flex", "items-center", "justify-center", "enabled:cursor-pointer", "focus:outline-none", "transition", "duration-150", "ease-in-out", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "data-[has-left-element=true]:h-auto", "data-[has-right-element=true]:h-auto", "focus:z-20"], { variants: { tone: { solid: ["border", "antialiased"], light: ["border", "border-transparent"], transparent: ["border", "border-transparent", "bg-transparent"], outline: ["border", "disabled:hover:bg-transparent"] }, color: { white: ["focus:ring-gray-100"], blue: ["focus:ring-blue-100"], red: ["focus:ring-red-100"], green: ["focus:ring-green-100"], yellow: ["focus:ring-yellow-100"], purple: ["focus:ring-purple-100"], gray: ["focus:ring-gray-100"], dark: ["focus:ring-gray-200"], black: ["focus:ring-gray-300"] }, size: { xs: ["text-xs"], sm: ["text-sm", "h-8"], md: ["text-sm", "h-10"], lg: ["text-base", "h-12"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, animation: { none: [], pulse: ["animate-pulse"], bounce: ["animate-bounce"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, icon: { true: [], false: [] }, loading: { true: ["cursor-progress"], false: [] }, disabled: { true: ["cursor-not-allowed"], false: [] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" }, compoundVariants: [{ tone: ["solid", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { icon: false, size: "xs", className: ["px-2", "h-6"] }, { icon: false, size: "sm", className: ["px-2.5", "h-8"] }, { icon: false, size: "md", className: ["px-4", "h-10"] }, { icon: false, size: "lg", className: ["px-5", "h-12"] }, { icon: true, size: "xs", className: ["w-6", "h-6"] }, { icon: true, size: "sm", className: ["w-8", "h-8"] }, { icon: true, size: "md", className: ["w-10", "h-10"] }, { icon: true, size: "lg", className: ["w-12", "h-12"] }, { tone: "solid", color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["border-transparent"] }, { tone: "solid", color: "white", className: ["text-gray-800", "border-gray-100", "bg-white", "focus:bg-gray-50", "hover:bg-gray-50", "active:bg-gray-100", "disabled:bg-gray-50/50", "disabled:hover:bg-gray-50"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500", "focus:bg-blue-600", "hover:bg-blue-600", "active:bg-blue-600/90", "disabled:bg-blue-300", "disabled:hover:bg-blue-300"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500", "focus:bg-red-600", "hover:bg-red-600", "active:bg-red-600/90", "disabled:bg-red-300", "disabled:hover:bg-red-300"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500", "focus:bg-green-600", "hover:bg-green-600", "active:bg-green-600/90", "disabled:bg-green-300", "disabled:hover:bg-green-300"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400", "focus:bg-yellow-500", "hover:bg-yellow-500", "active:bg-yellow-500/90", "disabled:bg-yellow-200", "disabled:hover:bg-yellow-200"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500", "focus:bg-purple-600", "hover:bg-purple-600", "active:bg-purple-600/90", "disabled:bg-purple-300", "disabled:hover:bg-purple-300"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200", "focus:bg-gray-300", "hover:bg-gray-300", "active:bg-gray-300/90", "disabled:bg-gray-100", "disabled:hover:bg-gray-100", "disabled:text-gray-400"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700", "focus:bg-gray-800", "hover:bg-gray-800", "active:bg-gray-800/90", "disabled:bg-gray-500", "disabled:hover:bg-gray-500"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black", "active:bg-black/90", "disabled:bg-gray-800"] }, { tone: "light", color: "white", className: ["text-gray-800", "hover:text-gray-900", "border-gray-100", "bg-white", "disabled:bg-gray-50/50", "disabled:hover:bg-gray-50"] }, { tone: "light", color: "blue", className: ["text-blue-500", "disabled:text-blue-400", "disabled:hover:text-blue-400", "bg-blue-100", "hover:bg-blue-200", "active:bg-blue-100", "active:text-blue-600", "hover:text-blue-800", "focus:text-blue-700", "disabled:bg-blue-50", "disabled:hover:bg-blue-50"] }, { tone: "light", color: "red", className: ["text-red-500", "disabled:text-red-400", "disabled:hover:text-red-400", "bg-red-100", "hover:bg-red-200", "active:bg-red-100", "active:text-red-600", "hover:text-red-800", "focus:text-red-700", "disabled:bg-red-50", "disabled:hover:bg-red-50"] }, { tone: "light", color: "green", className: ["text-green-500", "disabled:text-green-400", "disabled:hover:text-green-400", "bg-green-100", "hover:bg-green-200", "active:bg-green-100", "hover:text-green-600", "active:text-green-800", "focus:text-green-700", "disabled:bg-green-50", "disabled:hover:bg-green-50"] }, { tone: "light", color: "yellow", className: ["text-yellow-500", "disabled:text-yellow-400", "disabled:hover:text-yellow-400", "bg-yellow-100", "hover:bg-yellow-200", "active:bg-yellow-100", "active:text-yellow-600", "hover:text-yellow-800", "focus:text-yellow-700", "disabled:bg-yellow-50", "disabled:hover:bg-yellow-50"] }, { tone: "light", color: "purple", className: ["text-purple-500", "disabled:text-purple-400", "disabled:hover:text-purple-400", "bg-purple-100", "hover:bg-purple-200", "active:bg-purple-100", "active:text-purple-600", "hover:text-purple-800", "focus:text-purple-700", "disabled:bg-purple-50", "disabled:hover:bg-purple-50"] }, { tone: "light", color: "gray", className: ["text-gray-500", "disabled:text-gray-400", "disabled:hover:text-gray-400", "bg-gray-100", "hover:bg-gray-200", "active:bg-gray-100", "active:text-gray-600", "hover:text-gray-800", "focus:text-gray-700", "disabled:bg-gray-50", "disabled:hover:bg-gray-50"] }, { tone: "light", color: "dark", className: ["text-gray-600", "disabled:text-gray-500", "disabled:hover:text-gray-500", "bg-gray-200", "hover:bg-gray-300", "active:bg-gray-200", "active:text-gray-700", "hover:text-gray-900", "focus:text-gray-800", "disabled:bg-gray-100", "disabled:hover:bg-gray-100"] }, { tone: "light", color: "black", className: ["text-gray-700", "disabled:text-gray-600", "disabled:hover:text-gray-600", "bg-gray-300", "hover:bg-gray-400", "active:bg-gray-300", "active:text-gray-800", "hover:text-black", "focus:text-gray-900", "disabled:bg-gray-200", "disabled:hover:bg-gray-200"] }, { tone: "transparent", color: "blue", className: ["text-blue-500", "disabled:text-blue-200", "hover:text-blue-600", "active:text-blue-700"] }, { tone: "transparent", color: "red", className: ["text-red-500", "disabled:text-red-200", "hover:text-red-600", "active:text-red-700"] }, { tone: "transparent", color: "green", className: ["text-green-500", "disabled:text-green-200", "hover:text-green-600", "active:text-green-700"] }, { tone: "transparent", color: "yellow", className: ["text-yellow-400", "disabled:text-yellow-100", "hover:text-yellow-500", "active:text-yellow-600"] }, { tone: "transparent", color: "purple", className: ["text-purple-500", "disabled:text-purple-200", "hover:text-purple-600", "active:text-purple-700"] }, { tone: "transparent", color: "gray", className: ["text-gray-500", "disabled:text-gray-200", "hover:text-gray-600", "active:text-gray-700"] }, { tone: "transparent", color: "dark", className: ["text-gray-700", "disabled:text-gray-500", "hover:text-gray-800", "active:text-gray-900"] }, { tone: "transparent", color: "black", className: ["text-black", "disabled:text-gray-700"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "disabled:text-blue-300", "disabled:hover:text-blue-300", "hover:text-blue-600", "active:text-blue-700", "active:border-blue-700", "border-blue-500", "disabled:border-blue-300"] }, { tone: "outline", color: "red", className: ["text-red-500", "disabled:text-red-300", "disabled:hover:text-red-300", "hover:text-red-600", "active:text-red-700", "active:border-red-700", "border-red-500", "disabled:border-red-300"] }, { tone: "outline", color: "green", className: ["text-green-500", "disabled:text-green-300", "disabled:hover:text-green-300", "hover:text-green-600", "active:text-green-700", "active:border-green-700", "border-green-500", "disabled:border-green-300"] }, { tone: "outline", color: "yellow", className: ["text-yellow-500", "disabled:text-yellow-300", "disabled:hover:text-yellow-300", "hover:text-yellow-500", "active:text-yellow-600", "active:border-yellow-600", "border-yellow-500", "disabled:border-yellow-300"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "disabled:text-purple-300", "disabled:hover:text-purple-300", "hover:text-purple-600", "active:text-purple-700", "active:border-purple-700", "border-purple-500", "disabled:border-purple-300"] }, { tone: "outline", color: "gray", className: ["text-gray-500", "hover:text-gray-500", "focus:text-gray-500", "disabled:text-gray-300", "disabled:hover:text-gray-300", "hover:text-gray-600", "active:text-gray-700", "active:border-gray-400", "border-gray-200", "disabled:border-gray-300"] }, { tone: "outline", color: "dark", className: ["text-gray-700", "disabled:text-gray-300", "disabled:hover:text-gray-300", "hover:text-gray-800", "active:text-gray-900", "active:border-black", "border-gray-700", "disabled:border-gray-300"] }, { tone: "outline", color: "black", className: ["text-black", "disabled:text-gray-500", "disabled:hover:text-gray-500", "active:border-black", "border-black", "disabled:border-gray-500"] }] }), chevron: cva([], { variants: { open: { true: [], false: [] }, chevronRotation: { true: [], false: [] }, size: { xs: ["w-3", "h-3", "ml-1"], sm: ["w-4", "h-4", "ml-2"], md: ["w-4", "h-4", "ml-2", "-mr-1"], lg: ["w-5", "h-5", "ml-2", "-mr-1.5"] } }, compoundVariants: [{ chevronRotation: true, className: ["transition", "transform", "duration-300", "ease-in-out"] }, { open: true, chevronRotation: true, className: ["-rotate-180"] }] }), spinner: cva(["-ml-1", "animate-spin"], { variants: { size: { xs: ["w-3", "h-3", "mr-1.5"], sm: ["w-5", "h-5", "mr-1.5"], md: ["w-6", "h-6", "mr-2"], lg: ["w-8", "h-8", "mr-2"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Card.styles.js
var d = cva(["flex", "flex-col"], { variants: { bordered: { true: ["border"], false: [] }, color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, withDivider: { true: ["divide-y"], false: [] } }, compoundVariants: [{ color: "white", withDivider: true, className: ["divide-gray-100"] }, { color: "gray", withDivider: true, className: ["divide-gray-200"] }, { color: "slate", withDivider: true, className: ["divide-slate-200"] }, { color: "zinc", withDivider: true, className: ["divide-zinc-200"] }, { color: "white", bordered: true, className: ["border-gray-100"] }, { color: "gray", bordered: true, className: ["border-gray-200"] }, { color: "slate", bordered: true, className: ["border-slate-200"] }, { color: "zinc", bordered: true, className: ["border-zinc-200"] }] });
var s = cva([], { variants: { size: { sm: ["px-4", "text-sm"], base: ["px-5", "text-base"], md: ["px-6", "text-md"], lg: ["px-7", "text-lg"] }, withDivider: { true: [], false: [] } }, compoundVariants: [{ size: "sm", withDivider: true, className: ["py-3"] }, { size: "base", withDivider: true, className: ["py-4"] }, { size: "md", withDivider: true, className: ["py-5"] }, { size: "lg", withDivider: true, className: ["py-6"] }, { size: "sm", withDivider: false, className: ["py-1"] }, { size: "base", withDivider: false, className: ["py-2"] }, { size: "md", withDivider: false, className: ["py-3"] }, { size: "lg", withDivider: false, className: ["py-4"] }] });
var r5 = cva(["flex", "flex-row", "justify-between", "items-center"], { variants: { size: { sm: ["p-4", "text-sm"], base: ["p-5", "text-base"], md: ["p-6", "text-md"], lg: ["p-7", "text-lg"] }, radius: { none: ["rounded-t-none"], sm: ["rounded-t-sm"], base: ["rounded-t"], md: ["rounded-t-md"], lg: ["rounded-t-lg"] } } });
var a2 = { base: d, body: s, footer: cva(["flex", "items-center"], { variants: { size: { sm: ["p-4", "text-sm"], base: ["p-5", "text-base"], md: ["p-6", "text-md"], lg: ["p-7", "text-lg"] }, radius: { none: ["rounded-b-none"], sm: ["rounded-b-sm"], base: ["rounded-b"], md: ["rounded-b-md"], lg: ["rounded-b-lg"] } } }), header: r5, image: cva(["flex", "flex-row", "items-center", "justify-center"], { variants: { radius: { none: ["rounded-t-none"], sm: ["rounded-t-sm"], base: ["rounded-t"], md: ["rounded-t-md"], lg: ["rounded-t-lg"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Checkbox.styles.js
var t5 = cva(["cursor-pointer", "form-checkbox"], { variants: { color: { blue: ["text-blue-500", "hover:text-blue-600", "focus:text-blue-600", "focus:ring-blue-100", "active:text-blue-700", "disabled:text-blue-300", "disabled:hover:text-blue-300"], red: ["text-red-500", "hover:text-red-600", "focus:text-red-600", "focus:ring-red-100", "active:text-red-700", "disabled:text-red-300", "disabled:hover:text-red-300"], green: ["text-green-500", "hover:text-green-600", "focus:text-green-600", "focus:ring-green-100", "active:text-green-700", "disabled:text-green-300", "disabled:hover:text-green-300"], yellow: ["text-yellow-400", "hover:text-yellow-500", "focus:text-yellow-500", "focus:ring-yellow-100", "active:text-yellow-600", "disabled:text-yellow-200", "disabled:hover:text-yellow-200"], purple: ["text-purple-500", "hover:text-purple-600", "focus:text-purple-600", "focus:ring-purple-100", "active:text-purple-700", "disabled:text-purple-300", "disabled:hover:text-purple-300"], gray: ["text-gray-200", "hover:text-gray-300", "focus:text-gray-300", "focus:ring-gray-100", "active:text-gray-400", "disabled:text-gray-100", "disabled:hover:text-gray-100"], dark: ["text-gray-700", "hover:text-gray-800", "focus:text-gray-800", "focus:ring-gray-300", "active:text-gray-900", "disabled:text-gray-500", "disabled:hover:text-gray-500"], black: ["text-gray-800", "hover:text-gray-900", "focus:text-gray-900", "focus:ring-gray-400", "active:text-black", "disabled:text-gray-600", "disabled:hover:text-gray-600"] }, tone: { solid: ["bg-white", "hover:bg-gray-50", "active:bg-gray-100", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"], light: ["bg-gray-100", "hover:bg-gray-200", "active:bg-gray-300", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"] }, validation: { valid: ["outline-0", "border-gray-300"], invalid: ["outline-0", "border-red-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-6", "h-6"], xl: ["w-7", "h-7"] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" } });
var r6 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5"], md: ["text-base", "pl-1.5"], lg: ["text-lg", "pl-2"], xl: ["text-xl", "pl-2"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var l2 = { base: t5, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), label: r6 };

// node_modules/@rewind-ui/core/dist/theme/styles/Combobox.styles.js
var a3 = cva(["w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "h-6"], sm: ["text-sm", "h-8"], md: ["text-base", "h-10"], lg: ["text-lg", "h-12"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"] }, hasLeftIcon: { true: [], false: [] }, hasRightIcon: { true: [], false: [] }, hasLeftElement: { true: ["rounded-l-none"], false: [] }, hasRightElement: { true: ["rounded-r-none"], false: [] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: ["read-only:cursor-default"] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }, { hasLeftIcon: false, size: "xs", className: ["px-2"] }, { hasLeftIcon: false, size: "sm", className: ["px-3"] }, { hasLeftIcon: false, size: "md", className: ["px-3"] }, { hasLeftIcon: false, size: "lg", className: ["px-4"] }, { hasLeftIcon: true, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, hasRightIcon: false, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "lg", className: ["pl-12", "pr-4"] }, { hasLeftIcon: false, hasRightIcon: true, size: "xs", className: ["pr-7", "pl-2"] }, { hasLeftIcon: false, hasRightIcon: true, size: "sm", className: ["pr-8", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "md", className: ["pr-11", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "lg", className: ["pr-12", "pl-4"] }, { hasLeftIcon: true, hasRightIcon: true, size: "xs", className: ["px-7"] }, { hasLeftIcon: true, hasRightIcon: true, size: "sm", className: ["px-8"] }, { hasLeftIcon: true, hasRightIcon: true, size: "md", className: ["px-11"] }, { hasLeftIcon: true, hasRightIcon: true, size: "lg", className: ["px-12"] }] });
var s2 = cva(["relative", "w-full", "flex", "items-center"], { variants: { disabled: { true: ["cursor-not-allowed"], false: [] } } });
var o3 = cva(["w-full", "flex", "items-center"], { variants: { size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-base", "px-2", "py-2"], lg: ["text-lg", "px-2", "py-2"] } } });
var l3 = cva(["flex", "flex-col", "border", "border-gray-200", "snap-y", "isolation-auto", "z-40", "bg-white", "overflow-x-clip"], { variants: { overflown: { true: ["overflow-y-scroll"], false: ["overflow-y-hidden"] }, open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "hidden"] }, size: { xs: [], sm: [], md: [], lg: [] }, mode: { tight: ["p-0"], spacey: ["space-y-1"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"] } }, compoundVariants: [{ mode: "spacey", overflown: false, size: ["xs", "sm"], className: ["p-1"] }, { mode: "spacey", overflown: false, size: ["md", "lg"], className: ["p-1.5"] }, { mode: "spacey", overflown: true, size: ["xs", "sm"], className: ["py-1", "px-1"] }, { mode: "spacey", overflown: true, size: ["md", "lg"], className: ["py-1.5", "px-1.5"] }] });
var t6 = cva([], { variants: { tone: { light: ["text-gray-600"], solid: ["text-gray-600"], transparent: ["text-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } });
var r7 = cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } });
var n5 = cva(["absolute", "right-0", "z-20", "pointer-events-auto", "h-full", "flex", "items-center", "enabled:cursor-pointer", "disabled:cursor-not-allowed"], { variants: { size: { xs: ["pr-2"], sm: ["pr-2.5"], md: ["pr-3"], lg: ["pr-3"] } } });
var i = cva(["antialiased", "snap-always", "snap-mandatory", "snap-start", "[scroll-margin-top:6px]", "border-dashed", "border-b", "border-b-gray-200", "mb-1", "text-gray-400"], { variants: { hidden: { true: ["hidden"], false: [] }, mode: { spacey: [], tight: [] }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" }, size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-base", "px-2", "py-2"], lg: ["text-lg", "px-2", "py-2"] } } });
var d2 = cva(["antialiased", "cursor-pointer", "disabled:cursor-not-allowed", "snap-always", "snap-mandatory", "snap-start", "[scroll-margin-top:6px]", "w-full", "flex", "items-center", "justify-between", "disabled:text-gray-300", "focus-visible:outline-none", "hover:ring-0", "focus-visible:ring-0"], { variants: { hidden: { true: ["hidden"], false: [] }, optionColor: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, mode: { spacey: [], tight: [] }, radius: { none: [], sm: [], base: [], md: [], lg: [] }, size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-sm", "px-2", "py-1.5"], lg: ["text-lg", "px-2", "py-2"] }, selected: { true: [], false: ["focus-within:bg-gray-100", "focus:bg-gray-100", "focus-visible:bg-gray-100", "hover:bg-gray-100"] } }, compoundVariants: [{ mode: "spacey", radius: "none", className: ["rounded-none"] }, { mode: "spacey", radius: "sm", className: ["rounded-sm"] }, { mode: "spacey", radius: "base", className: ["rounded"] }, { mode: "spacey", radius: "md", className: ["rounded-md"] }, { mode: "spacey", radius: "lg", className: ["rounded-lg"] }, { selected: true, optionColor: "blue", className: ["bg-blue-500", "text-white"] }, { selected: true, optionColor: "red", className: ["bg-red-500", "text-white"] }, { selected: true, optionColor: "green", className: ["bg-green-500", "text-white"] }, { selected: true, optionColor: "yellow", className: ["bg-yellow-400", "text-white"] }, { selected: true, optionColor: "purple", className: ["bg-purple-500", "text-white"] }, { selected: true, optionColor: "gray", className: ["bg-gray-200", "text-gray-700"] }, { selected: true, optionColor: "dark", className: ["bg-gray-500", "text-white"] }, { selected: true, optionColor: "black", className: ["bg-black", "text-white"] }] });
var c = cva([], { variants: { size: { xs: ["w-4", "h-4"], sm: ["w-4", "h-4"], md: ["w-6", "h-6"], lg: ["w-6", "h-6"] } } });
var g = cva(["grid", "grid-flow-col", "justify-items-start", "gap-x-2", "mr-5"]);
var m = cva(["flex", "flex-col", "text-left"]);
var p = cva([], { variants: { disabled: { true: [], false: [] }, selected: { true: [], false: [] } }, compoundVariants: [{ disabled: false, selected: false, className: ["text-gray-700"] }] });
var h = { base: a3, group: i, icon: t6, leftIconWrapper: r7, list: l3, noResults: o3, rightIconWrapper: n5, wrapper: s2 };
var u = { button: d2, description: cva(["whitespace-normal"], { variants: { disabled: { true: [], false: [] }, selected: { true: [], false: [] } }, compoundVariants: [{ disabled: false, selected: false, className: ["text-gray-500"] }] }), icon: t6, infoWrapper: m, label: p, optionIcon: c, optionWrapper: g };

// node_modules/@rewind-ui/core/dist/theme/styles/Drawer.styles.js
var t7 = { base: cva(["fixed", "flex", "overflow-auto", "justify-center", "z-[60]", "bg-white"], { variants: { shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, position: { top: ["w-full", "top-0"], bottom: ["w-full", "bottom-0"], left: ["h-full", "left-0", "top-0"], right: ["h-full", "right-0", "top-0"] } }, compoundVariants: [] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Dropdown.styles.js
var r8 = cva(["relative", "flex", "flex-col", "gap-y-1", "max-w-prose", "transition", "duration-50", "ease-in-out", "border", "z-40"], { variants: { open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "invisible"] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, mode: { tight: ["p-0"], spacey: [] }, size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, color: { white: ["bg-white", "text-gray-800", "border-gray-200"], gray: ["bg-gray-50", "text-gray-800", "border-gray-300"], slate: ["bg-slate-50", "text-slate-800", "border-slate-300"], zinc: ["bg-zinc-50", "text-zinc-800", "border-zinc-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ mode: "spacey", size: ["xs", "sm"], className: ["p-1"] }, { mode: "spacey", size: ["md", "lg"], className: ["p-1.5"] }, { open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-2"] }, { open: false, arrowSide: "right", className: ["translate-x-2"] }, { open: false, arrowSide: "top", className: ["-translate-y-2"] }, { open: false, arrowSide: "bottom", className: ["translate-y-2"] }] });
var t8 = { arrow: cva(["absolute", "w-2", "h-2", "bg-inherit", "rotate-45", "border", "box-border", "z-0"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-300"], slate: ["border-slate-300"], zinc: ["border-zinc-300"] }, arrowSide: { left: ["border-r-0", "border-t-0"], right: ["border-l-0", "border-b-0"], top: ["border-r-0", "border-b-0"], bottom: ["border-l-0", "border-t-0"] } } }), base: r8, content: cva(["flex", "flex-col"], { variants: { size: { xs: ["space-y-0.5"], sm: ["space-y-0.5"], md: ["space-y-1"], lg: ["space-y-1"] } } }), divider: cva([], { variants: { color: { gray: "border-gray-200", slate: "border-slate-200", dark: "border-gray-400" } } }), item: cva(["z-10", "flex", "items-center", "justify-start", "text-gray-900", "disabled:text-gray-300", "hover:disabled:text-gray-300", "hover:disabled:bg-gray-50", "disabled:cursor-not-allowed", "focus-visible:outline-none", "hover:ring-0", "focus-visible:ring-2", "focus-visible:ring-offset-0"], { variants: { tone: { solid: [], light: [] }, mode: { spacey: ["rounded"], tight: [] }, color: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "py-1", "px-1"], sm: ["text-sm", "py-1.5", "px-2"], md: ["text-base", "py-1.5", "px-2"], lg: ["text-lg", "py-1.5", "px-2"] }, radius: { none: [], sm: [], base: [], md: [], lg: [] } }, compoundVariants: [{ mode: "tight", radius: "sm", className: ["last:rounded-b-sm"] }, { mode: "tight", radius: "base", className: ["last:rounded-b"] }, { mode: "tight", radius: "md", className: ["last:rounded-b-md"] }, { mode: "tight", radius: "lg", className: ["last:rounded-b-lg"] }, { tone: "solid", color: "blue", className: ["focus-visible:ring-blue-500", "hover:bg-blue-500", "active:bg-blue-600", "hover:text-white"] }, { tone: "light", color: "blue", className: ["focus-visible:ring-blue-100", "hover:bg-blue-100", "active:bg-blue-200", "hover:text-blue-800"] }, { tone: "solid", color: "red", className: ["focus-visible:ring-red-500", "hover:bg-red-500", "active:bg-red-600", "hover:text-white"] }, { tone: "light", color: "red", className: ["focus-visible:ring-red-100", "hover:bg-red-100", "active:bg-red-200", "hover:text-red-800"] }, { tone: "solid", color: "green", className: ["focus-visible:ring-green-500", "hover:bg-green-500", "active:bg-green-600", "hover:text-white"] }, { tone: "light", color: "green", className: ["focus-visible:ring-green-100", "hover:bg-green-100", "active:bg-green-200", "hover:text-green-800"] }, { tone: "solid", color: "yellow", className: ["focus-visible:ring-yellow-400", "hover:bg-yellow-400", "active:bg-yellow-500", "hover:text-white"] }, { tone: "light", color: "yellow", className: ["focus-visible:ring-yellow-100", "hover:bg-yellow-100", "active:bg-yellow-200", "hover:text-yellow-800"] }, { tone: "solid", color: "purple", className: ["focus-visible:ring-purple-500", "hover:bg-purple-500", "active:bg-purple-600", "hover:text-white"] }, { tone: "light", color: "purple", className: ["focus-visible:ring-purple-100", "hover:bg-purple-100", "active:bg-purple-200", "hover:text-purple-800"] }, { tone: "solid", color: "gray", className: ["focus-visible:ring-gray-200", "hover:bg-gray-200", "active:bg-gray-300", "hover:text-gray-700"] }, { tone: "light", color: "gray", className: ["focus-visible:ring-gray-100", "hover:bg-gray-100", "active:bg-gray-200", "hover:text-gray-800"] }, { tone: "solid", color: "dark", className: ["focus-visible:ring-gray-500", "hover:bg-gray-500", "active:bg-gray-600", "hover:text-white"] }, { tone: "light", color: "dark", className: ["focus-visible:ring-gray-300", "hover:bg-gray-300", "active:bg-gray-400", "hover:text-gray-800"] }, { tone: "solid", color: "black", className: ["focus-visible:ring-gray-900", "hover:bg-gray-900", "active:bg-black", "hover:text-white"] }, { tone: "light", color: "black", className: ["focus-visible:ring-gray-700", "hover:bg-gray-700", "active:bg-gray-800", "hover:text-white"] }] }), label: cva([], { variants: { mode: { spacey: [], tight: [] }, color: { blue: "text-blue-500", red: "text-red-500", green: "text-green-500", yellow: "text-yellow-400", purple: "text-purple-500", gray: "text-gray-400", dark: "text-gray-800", black: "text-black" }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" }, size: { xs: ["text-xs"], sm: ["text-sm", "py-1"], md: ["text-base", "py-1"], lg: ["text-lg", "py-1"] } }, compoundVariants: [{ mode: "tight", size: "xs", className: ["px-1.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "xs", className: ["px-1", "py-0.5"] }, { mode: "tight", size: "sm", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "sm", className: ["px-2.5", "py-1"] }, { mode: "tight", size: "md", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "md", className: ["px-2.5", "py-1"] }, { mode: "tight", size: "lg", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "lg", className: ["px-2.5", "py-1"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/FormControl.styles.js
var e6 = { base: cva(["flex", "flex-col", "space-y-1"]), label: cva(["text-gray-800"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, required: { true: ["after:content-['*']", "after:ml-0.5", "after:text-red-500"], false: [] } } }), text: cva([], { variants: { size: { xs: ["text-xs"], sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, validation: { none: ["text-gray-500"], invalid: ["text-red-500"], valid: ["text-green-500"], warning: ["text-yellow-400"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Image.styles.js
var o4 = { base: cva([], { variants: { fit: { contain: "object-contain", cover: "object-cover", fill: "object-fill", none: "object-none", "scale-down": "object-scale-down" }, radius: { none: "", sm: "rounded-sm", base: "rounded", md: "rounded-md", lg: "rounded-lg", xl: "rounded-xl", "2xl": "rounded-2xl", "3xl": "rounded-3xl", full: "rounded-full" } } }), caption: cva(["w-full", "text-base", "text-center", "p-2", "absolute", "bottom-0", "backdrop-blur-sm"], { variants: { mode: { light: ["bg-gray-200/75", "text-gray-900"], dark: ["bg-gray-800/50", "text-gray-50"] } } }), wrapper: cva(["relative"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Input.styles.js
var a4 = { base: cva(["w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "h-6"], sm: ["text-sm", "h-8"], md: ["text-base", "h-10"], lg: ["text-lg", "h-12"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, hasLeftIcon: { true: [], false: [] }, hasRightIcon: { true: [], false: [] }, type: { "datetime-local": [], color: [], date: [], email: [], file: ["pl-0", "hover:cursor-pointer", "file:hover:cursor-pointer", "file:font-medium", "file:mr-4", "file:px-4", "file:border-0"], number: [], password: [], range: [], search: [], text: [], time: [] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, loading: { true: [], false: [] }, disabled: { true: [], false: [] } }, compoundVariants: [{ disabled: true, loading: true, className: ["cursor-progress"] }, { disabled: true, loading: false, className: ["cursor-not-allowed"] }, { validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { type: "file", tone: ["light", "solid"], className: ["file:bg-gray-100", "file:hover:bg-gray-200", "file:active:bg-gray-300", "file:text-gray-800"] }, { type: "file", tone: "transparent", className: ["file:bg-gray-50", "file:hover:bg-gray-100", "file:active:bg-gray-200", "file:text-gray-800"] }, { type: "file", size: "xs", className: ["file:text-xs"] }, { type: "file", size: "sm", className: ["file:text-sm"] }, { type: "file", size: "md", className: ["file:text-base"] }, { type: "file", size: "lg", className: ["file:text-lg"] }, { type: "file", size: "xs", className: ["file:h-6", "file:text-xs"] }, { type: "file", size: "sm", className: ["file:h-8"] }, { type: "file", size: "md", className: ["file:h-10"] }, { type: "file", size: "lg", className: ["file:h-12"] }, { type: "color", size: "xs", className: ["py-1"] }, { type: "color", size: "sm", className: ["py-2"] }, { type: "color", size: "md", className: ["py-3"] }, { type: "color", size: "lg", className: ["py-4"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }, { hasLeftIcon: false, hasRightIcon: false, size: "xs", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["px-2"] }, { hasLeftIcon: false, hasRightIcon: false, size: "sm", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["px-3"] }, { hasLeftIcon: false, hasRightIcon: false, size: "md", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["px-3"] }, { hasLeftIcon: false, hasRightIcon: false, size: "lg", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["px-4"] }, { hasLeftIcon: true, hasRightIcon: false, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, hasRightIcon: false, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "lg", className: ["pl-12", "pr-4"] }, { hasLeftIcon: false, hasRightIcon: true, size: "xs", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["pr-7", "pl-2"] }, { hasLeftIcon: false, hasRightIcon: true, size: "sm", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["pr-8", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "md", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["pr-11", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "lg", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color"], className: ["pr-12", "pl-4"] }, { hasLeftIcon: true, hasRightIcon: true, size: "xs", className: ["px-7"] }, { hasLeftIcon: true, hasRightIcon: true, size: "sm", className: ["px-8"] }, { hasLeftIcon: true, hasRightIcon: true, size: "md", className: ["px-11"] }, { hasLeftIcon: true, hasRightIcon: true, size: "lg", className: ["px-12"] }] }), wrapper: cva(["relative", "flex", "items-center", "w-full"]), icon: cva([], { variants: { tone: { light: ["text-gray-600"], solid: ["text-gray-600"], transparent: ["text-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } }), leftIconWrapper: cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } }), rightIconWrapper: cva(["absolute", "right-0", "z-20"], { variants: { size: { xs: ["pr-2"], sm: ["pr-2.5"], md: ["pr-3"], lg: ["pr-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/InputGroup.styles.js
var r9 = { base: cva(["flex", "items-stretch", "group"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } } }), text: cva(["flex", "items-center", "justify-center", "data-[has-left-element=true]:border-l-0", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:border-r-0", "data-[has-right-element=true]:rounded-r-none"], { variants: { size: { xs: ["text-xs", "px-2"], sm: ["text-sm", "px-3"], md: ["text-base", "px-3"], lg: ["text-lg", "px-4"] }, tone: { light: ["border", "border-gray-300", "bg-gray-50", "text-gray-800"], solid: ["border", "border-gray-200", "bg-gray-100", "text-gray-800"], transparent: ["border", "border-transparent", "text-gray-800"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Modal.styles.js
var o5 = { base: cva(["fixed", "flex", "overflow-auto", "justify-center", "z-[60]"], { variants: { mode: { fullscreen: ["inset-0", "mt-0"], dialog: ["mx-2", "max-h-[calc(100%-6rem)]"] }, color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, size: { auto: [], sm: [], md: [], lg: [], xl: [], screen: [] }, position: { top: [], bottom: [], center: [] } }, compoundVariants: [{ position: "top", mode: "dialog", className: ["mt-12", "top-0"] }, { position: "bottom", mode: "dialog", className: ["mb-12", "top-auto", "bottom-0"] }, { position: "center", mode: "dialog", className: ["top-1/2"] }, { size: "auto", mode: "dialog", className: ["w-auto"] }, { size: "sm", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]"] }, { size: "md", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]"] }, { size: "lg", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]", "lg:w-[50rem]"] }, { size: "xl", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]", "lg:w-[50rem]", "xl:w-[71.25rem]"] }, { size: "screen", mode: "dialog", className: ["w-[calc(100vw-6rem)]"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Overlay.styles.js
var o6 = { base: cva(["fixed", "inset-0", "overflow-hidden", "z-[55]", "transition-opacity", "duration-50", "ease-in-out"], { variants: { opacity: { 25: [], 50: [], 75: [] }, open: { true: ["opacity-100", "visible"], false: ["opacity-0", "invisible"] }, color: { white: [], gray: [], dark: [] }, blur: { none: ["backdrop-blur-none"], sm: ["backdrop-blur-sm"], base: ["backdrop-blur"], md: ["backdrop-blur-md"], lg: ["backdrop-blur-lg"], xl: ["backdrop-blur-xl"] } }, compoundVariants: [{ color: "white", opacity: "25", className: ["bg-white/25"] }, { color: "white", opacity: "50", className: ["bg-white/50"] }, { color: "white", opacity: "75", className: ["bg-white/75"] }, { color: "gray", opacity: "25", className: ["bg-gray-500/25"] }, { color: "gray", opacity: "50", className: ["bg-gray-500/50"] }, { color: "gray", opacity: "75", className: ["bg-gray-500/75"] }, { color: "dark", opacity: "25", className: ["bg-gray-900/25"] }, { color: "dark", opacity: "50", className: ["bg-gray-900/50"] }, { color: "dark", opacity: "75", className: ["bg-gray-900/75"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Popover.styles.js
var e7 = cva(["relative", "max-w-prose", "text-center", "transition", "duration-50", "ease-in-out", "border", "z-50"], { variants: { open: { true: ["opacity-100"], false: ["opacity-0"] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, size: { tight: ["p-0"], xs: ["text-xs", "py-1", "px-2"], sm: ["text-sm", "py-1", "px-2"], md: ["text-sm", "py-2", "px-3"], lg: ["text-base", "py-2", "px-3"] }, color: { white: ["bg-white", "text-gray-800", "border-gray-200"], gray: ["bg-gray-50", "text-gray-800", "border-gray-300"], slate: ["bg-slate-50", "text-slate-800", "border-slate-300"], zinc: ["bg-zinc-50", "text-zinc-800", "border-zinc-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-1"] }, { open: false, arrowSide: "right", className: ["translate-x-1"] }, { open: false, arrowSide: "top", className: ["-translate-y-1"] }, { open: false, arrowSide: "bottom", className: ["translate-y-1"] }] });
var t9 = { arrow: cva(["absolute", "w-2", "h-2", "bg-inherit", "rotate-45", "border", "box-border"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-300"], slate: ["border-slate-300"], zinc: ["border-zinc-300"] }, arrowSide: { left: ["border-r-0", "border-t-0"], right: ["border-l-0", "border-b-0"], top: ["border-r-0", "border-b-0"], bottom: ["border-l-0", "border-t-0"] } } }), base: e7 };

// node_modules/@rewind-ui/core/dist/theme/styles/Progress.styles.js
var t10 = cva(["flex", "flex-col", "w-full"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] } } });
var s3 = cva(["bg-gray-100", "overflow-hidden", "flex", "items-center", "shadow-gray-200"], { variants: { size: { xs: ["h-1", "text-xs"], sm: ["h-2", "text-xs"], md: ["h-4", "text-sm"], lg: ["h-5", "text-base"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] } } });
var r10 = cva(["relative", "flex", "items-center", "h-full", "justify-center", "transition-[width]", "duration-300"], { variants: { color: { white: ["bg-white", "text-gray-800"], blue: ["bg-blue-500"], red: ["bg-red-500"], green: ["bg-green-500"], yellow: ["bg-yellow-500"], purple: ["bg-purple-500"], gray: ["bg-gray-500"], dark: ["bg-gray-800"], black: ["bg-black"] } }, compoundVariants: [{ color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["text-white"] }] });
var a5 = cva(["flex", "justify-between", "text-gray-800"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-sm"], lg: ["text-base"] } } });
var l4 = { base: s3, bar: r10, description: cva(["text-gray-600"], { variants: { size: { xs: ["text-xs"], sm: ["text-xs"], md: ["text-sm"], lg: ["text-sm"] } } }), label: a5, wrapper: t10, stripe: cva([], { variants: { size: { xs: ["0.5rem 0.5rem"], sm: ["1rem 1rem"], md: ["2rem 2rem"], lg: ["2.5rem 2.5rem"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Radio.styles.js
var t11 = cva(["cursor-pointer", "form-radio"], { variants: { color: { blue: ["text-blue-500", "hover:text-blue-600", "focus:text-blue-600", "focus:ring-blue-100", "active:text-blue-700", "disabled:text-blue-300", "disabled:hover:text-blue-300"], red: ["text-red-500", "hover:text-red-600", "focus:text-red-600", "focus:ring-red-100", "active:text-red-700", "disabled:text-red-300", "disabled:hover:text-red-300"], green: ["text-green-500", "hover:text-green-600", "focus:text-green-600", "focus:ring-green-100", "active:text-green-700", "disabled:text-green-300", "disabled:hover:text-green-300"], yellow: ["text-yellow-400", "hover:text-yellow-500", "focus:text-yellow-500", "focus:ring-yellow-100", "active:text-yellow-600", "disabled:text-yellow-200", "disabled:hover:text-yellow-200"], purple: ["text-purple-500", "hover:text-purple-600", "focus:text-purple-600", "focus:ring-purple-100", "active:text-purple-700", "disabled:text-purple-300", "disabled:hover:text-purple-300"], gray: ["text-gray-200", "hover:text-gray-300", "focus:text-gray-300", "focus:ring-gray-100", "active:text-gray-400", "disabled:text-gray-100", "disabled:hover:text-gray-100"], dark: ["text-gray-700", "hover:text-gray-800", "focus:text-gray-800", "focus:ring-gray-200", "active:text-gray-900", "disabled:text-gray-500", "disabled:hover:text-gray-500"], black: ["text-gray-800", "hover:text-gray-900", "focus:text-gray-900", "focus:ring-gray-400", "active:text-black", "disabled:text-gray-600", "disabled:hover:text-gray-600"] }, tone: { solid: ["bg-white", "hover:bg-gray-50", "active:bg-gray-100", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"], light: ["bg-gray-100", "hover:bg-gray-200", "active:bg-gray-300", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"] }, validation: { valid: ["outline-0", "border-gray-300"], invalid: ["outline-0", "border-red-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-6", "h-6"], xl: ["w-7", "h-7"] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" } });
var r11 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5"], md: ["text-base", "pl-1.5"], lg: ["text-lg", "pl-2"], xl: ["text-xl", "pl-2"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var l5 = { base: t11, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), label: r11, group: cva(["flex"], { variants: { orientation: { vertical: ["flex-col", "space-y-1.5"], horizontal: ["flex-row", "space-x-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Ribbon.styles.js
var e8 = { base: cva(["flex", "items-center", "text-center", "absolute"], { variants: { clipped: { true: ["overflow-hidden"], false: [] }, tone: { solid: [], light: [], glossy: ["bg-gradient-to-r"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, position: { left: ["left-0", "top-auto", "transform", "-translate-x-1"], right: ["right-0", "top-auto", "transform", "translate-x-1"], "top-left": ["top-0", "left-0", "transform", "translate-x-4", "-translate-y-1"], "top-right": ["top-0", "right-0", "transform", "-translate-x-4", "-translate-y-1"] }, size: { sm: ["text-sm", "px-1.5", "h-7"], md: ["text-sm", "px-2", "h-8"], lg: ["text-base", "px-2.5", "h-9"] }, radius: { none: ["rounded-none"], sm: [], base: [], md: [], lg: [] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: ["shadow-neutral-300"], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: ["solid", "glossy"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { position: ["top-left", "top-right"], radius: "sm", className: ["rounded-b-sm"] }, { position: ["top-left", "top-right"], radius: "base", className: ["rounded-b"] }, { position: ["top-left", "top-right"], radius: "md", className: ["rounded-b-md"] }, { position: ["top-left", "top-right"], radius: "lg", className: ["rounded-b-lg"] }, { position: "right", radius: "sm", className: ["rounded-l-sm"] }, { position: "right", radius: "base", className: ["rounded-l"] }, { position: "right", radius: "md", className: ["rounded-l-md"] }, { position: "right", radius: "lg", className: ["rounded-l-lg"] }, { position: "left", radius: "sm", className: ["rounded-r-sm"] }, { position: "left", radius: "base", className: ["rounded-r"] }, { position: "left", radius: "md", className: ["rounded-r-md"] }, { position: "left", radius: "lg", className: ["rounded-r-lg"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400", "border-gray-800"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Select.styles.js
var a6 = { base: cva(["appearance-none", "w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "h-6"], sm: ["text-sm", "h-8"], md: ["text-base", "h-10"], lg: ["text-lg", "h-12"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, hasLeftIcon: { true: [], false: [] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: [] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }, { hasLeftIcon: false, size: "xs", className: ["px-2"] }, { hasLeftIcon: false, size: "sm", className: ["px-3"] }, { hasLeftIcon: false, size: "md", className: ["px-3"] }, { hasLeftIcon: false, size: "lg", className: ["px-4"] }, { hasLeftIcon: true, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, size: "lg", className: ["pl-12", "pr-4"] }] }), wrapper: cva(["relative", "flex", "items-center", "w-full"]), icon: cva([], { variants: { tone: { light: ["text-gray-600"], solid: ["text-gray-600"], transparent: ["text-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } }), leftIconWrapper: cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } }), rightIconWrapper: cva(["absolute", "right-0", "z-20"], { variants: { size: { xs: ["pr-2"], sm: ["pr-2.5"], md: ["pr-3"], lg: ["pr-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Selector.styles.js
var o7 = cva(["absolute", "shadow-sm", "z-30"], { variants: { color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: [], sm: [], md: [], lg: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, tone: { solid: [], light: [] }, initialRun: { true: ["transition-none"], false: [] }, withAnimation: { true: [], false: [] } }, compoundVariants: [{ initialRun: false, withAnimation: false, className: ["transition-none"] }, { initialRun: false, withAnimation: true, className: ["transition-all", "duration-150"] }, { color: "white", tone: "solid", className: ["bg-white"] }, { color: "blue", tone: "solid", className: ["bg-blue-500"] }, { color: "red", tone: "solid", className: ["bg-red-500"] }, { color: "green", tone: "solid", className: ["bg-green-500"] }, { color: "yellow", tone: "solid", className: ["bg-yellow-400"] }, { color: "purple", tone: "solid", className: ["bg-purple-500"] }, { color: "gray", tone: "solid", className: ["bg-gray-500"] }, { color: "dark", tone: "solid", className: ["bg-gray-700"] }, { color: "black", tone: "solid", className: ["bg-black"] }, { color: "white", tone: "light", className: ["bg-white"] }, { color: "blue", tone: "light", className: ["bg-blue-100"] }, { color: "red", tone: "light", className: ["bg-red-100"] }, { color: "green", tone: "light", className: ["bg-green-100"] }, { color: "yellow", tone: "light", className: ["bg-yellow-100"] }, { color: "purple", tone: "light", className: ["bg-purple-100"] }, { color: "gray", tone: "light", className: ["bg-gray-100"] }, { color: "dark", tone: "light", className: ["bg-gray-200"] }, { color: "black", tone: "light", className: ["bg-gray-300"] }], defaultVariants: { color: "white" } });
var l6 = cva(["flex", "relative", "bg-gray-50", "items-center"], { variants: { radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, size: { xs: ["p-0.5"], sm: ["p-0.5"], md: ["p-[3px]"], lg: ["p-[3px]"] }, orientation: { horizontal: ["flex-inline"], vertical: ["flex-col", "gap-y-1", "h-auto"] }, fullWidth: { true: ["w-full", "gap-x-0.5"], false: ["w-fit"] } }, compoundVariants: [{ orientation: "horizontal", size: "xs", className: ["h-6"] }, { orientation: "horizontal", size: "sm", className: ["h-8"] }, { orientation: "horizontal", size: "md", className: ["h-10"] }, { orientation: "horizontal", size: "lg", className: ["h-12"] }] });
var a7 = cva(["enabled:hover:shadow-sm", "enabled:hover:bg-white", "cursor-pointer", "flex", "flex-inline", "items-center", "justify-center", "box-border", "focus-visible:bg-white", "focus-visible:ring-2", "focus-visible:ring-offset-0", "focus:outline-none"], { variants: { size: { xs: ["text-xs", "px-1.5"], sm: ["text-sm", "px-2.5"], md: ["text-base", "px-3"], lg: ["text-lg", "px-4"] }, color: { white: ["focus-visible:ring-gray-100"], blue: ["focus-visible:ring-blue-100"], red: ["focus-visible:ring-red-100"], green: ["focus-visible:ring-green-100"], yellow: ["focus-visible:ring-yellow-100"], purple: ["focus-visible:ring-purple-100"], gray: ["focus-visible:ring-gray-100"], dark: ["focus-visible:ring-gray-200"], black: ["focus-visible:ring-gray-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, tone: { solid: [], light: [] }, active: { true: [], false: ["text-gray-800", "disabled:text-gray-400", "hover:disabled:cursor-not-allowed"] }, orientation: { horizontal: ["flex-1", "h-full"], vertical: ["w-full"] } }, compoundVariants: [{ size: "xs", orientation: "vertical", className: ["h-6"] }, { size: "sm", orientation: "vertical", className: ["h-8"] }, { size: "md", orientation: "vertical", className: ["h-10"] }, { size: "lg", orientation: "vertical", className: ["h-12"] }, { active: true, color: ["white"], tone: "solid", className: ["text-gray-800"] }, { active: true, tone: "solid", color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["text-white"] }, { active: true, color: ["white"], tone: "light", className: ["text-gray-800"] }, { active: true, tone: "light", color: "dark", className: ["text-gray-600"] }, { active: true, tone: "light", color: "black", className: ["text-gray-700"] }, { active: true, tone: "light", color: "blue", className: ["text-blue-500"] }, { active: true, tone: "light", color: "red", className: ["text-red-500"] }, { active: true, tone: "light", color: "green", className: ["text-green-500"] }, { active: true, tone: "light", color: "yellow", className: ["text-yellow-400"] }, { active: true, tone: "light", color: "purple", className: ["text-purple-500"] }, { active: true, tone: "light", color: "gray", className: ["text-gray-600"] }] });
var s4 = { base: o7, separator: cva(["last-of-type:hidden", "text-gray-300", "mx-0.5", "self-center"], { variants: { orientation: { horizontal: ["bg-gray-300"], vertical: ["bg-gray-300"] }, size: { xs: [], sm: [], md: [], lg: [] } }, compoundVariants: [{ orientation: "horizontal", size: "xs", className: ["w-px h-3"] }, { orientation: "horizontal", size: "sm", className: ["w-px h-4"] }, { orientation: "horizontal", size: "md", className: ["w-px h-5"] }, { orientation: "horizontal", size: "lg", className: ["w-px h-6"] }, { orientation: "vertical", size: "xs", className: ["w-3 h-px"] }, { orientation: "vertical", size: "sm", className: ["w-4 h-px"] }, { orientation: "vertical", size: "md", className: ["w-5 h-px"] }, { orientation: "vertical", size: "lg", className: ["w-6 h-px"] }] }), tab: a7, wrapper: l6 };

// node_modules/@rewind-ui/core/dist/theme/styles/Spinner.styles.js
var s5 = { base: cva(["animate-spin"], { variants: { size: { xs: ["w-3", "h-3"], sm: ["w-5", "h-5"], md: ["w-6", "h-6"], lg: ["w-8", "h-8"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Switch.styles.js
var a8 = cva(["relative", "border-0", "grid", "items-center", "transition", "duration-50", "ease-in-out", "cursor-pointer"], { variants: { size: { sm: ["min-w-[36px]", "p-[2px]"], md: ["min-w-[42px]", "p-[3px]"], lg: ["min-w-[46px]", "p-[3px]"], xl: ["min-w-[52px]", "p-[3px]"] }, color: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, state: { active: [], inactive: [] }, withRing: { true: [], false: ["focus:ring-0"] } }, compoundVariants: [{ state: "active", withRing: true, className: ["focus:ring", "focus:ring-offset-1"] }, { state: "active", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { state: "active", color: "red", withRing: true, className: ["focus:ring-red-100"] }, { state: "active", color: "green", withRing: true, className: ["focus:ring-green-100"] }, { state: "active", color: "yellow", withRing: true, className: ["focus:ring-yellow-100"] }, { state: "active", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { state: "active", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { state: "active", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { state: "active", color: "black", withRing: true, className: ["focus:ring-gray-400"] }, { state: "inactive", className: ["bg-gray-200", "border-gray-200"] }, { state: "active", size: "md", className: [] }, { state: "inactive", size: "md", className: [] }, { state: "active", color: "blue", className: ["bg-blue-500", "focus:bg-blue-600", "hover:bg-blue-600", "active:bg-blue-600/90", "disabled:bg-blue-300", "disabled:hover:bg-blue-300"] }, { state: "active", color: "red", className: ["bg-red-500", "focus:bg-red-600", "hover:bg-red-600", "active:bg-red-600/90", "disabled:bg-red-300", "disabled:hover:bg-red-300"] }, { state: "active", color: "green", className: ["bg-green-500", "focus:bg-green-600", "hover:bg-green-600", "active:bg-green-600/90", "disabled:bg-green-300", "disabled:hover:bg-green-300"] }, { state: "active", color: "yellow", className: ["bg-yellow-400", "focus:bg-yellow-500", "hover:bg-yellow-500", "active:bg-yellow-500/90", "disabled:bg-yellow-200", "disabled:hover:bg-yellow-200"] }, { state: "active", color: "purple", className: ["bg-purple-500", "focus:bg-purple-600", "hover:bg-purple-600", "active:bg-purple-600/90", "disabled:bg-purple-300", "disabled:hover:bg-purple-300"] }, { state: "active", color: "gray", className: ["bg-gray-200", "focus:bg-gray-300", "hover:bg-gray-300", "active:bg-gray-300/90", "disabled:bg-gray-100", "disabled:hover:bg-gray-100", "disabled:text-gray-400"] }, { state: "active", color: "dark", className: ["bg-gray-700", "focus:bg-gray-800", "hover:bg-gray-800", "active:bg-gray-800/90", "disabled:bg-gray-500", "disabled:hover:bg-gray-500"] }, { state: "active", color: "black", className: ["bg-black", "active:bg-black/90", "disabled:bg-gray-800"] }] });
var r12 = cva(["inline-block", "bg-white", "shadow"], { variants: { size: { sm: ["w-[17px]", "h-[17px]"], md: ["w-[18px]", "h-[18px]"], lg: ["w-[19px]", "h-[19px]"], xl: ["w-[20px]", "h-[20px]"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, state: { active: [], inactive: [] } }, compoundVariants: [] });
var t12 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5"], md: ["text-base", "pl-1.5"], lg: ["text-lg", "pl-2"], xl: ["text-xl", "pl-2"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var s6 = { base: a8, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), inner: r12, label: t12 };

// node_modules/@rewind-ui/core/dist/theme/styles/Tab.styles.js
var l7 = cva(["flex", "flex-inline", "justify-center", "items-center", "focus-visible:outline-0"], { variants: { tone: { line: [], pill: ["antialiased"] }, color: { blue: ["focus-visible:bg-blue-100/50"], red: ["focus-visible:bg-red-100/50"], green: ["focus-visible:bg-green-100/50"], yellow: ["focus-visible:bg-yellow-100/50"], purple: ["focus-visible:bg-purple-100/50"], gray: ["focus-visible:bg-gray-100/50"], dark: ["focus-visible:bg-gray-200/50"], black: ["focus-visible:bg-gray-300/50"] }, state: { active: [], inactive: [] }, radius: { none: ["rounded-none"], sm: [], base: [], md: [], lg: [], full: [] }, size: { sm: ["text-sm", "px-2", "py-1"], md: ["text-base", "px-2.5", "py-1.5"], lg: ["text-lg", "px-3", "py-2"] }, fullWidth: { true: ["flex-1"], false: [] } }, defaultVariants: { tone: "line", color: "blue", size: "md" }, compoundVariants: [{ tone: "pill", radius: "sm", className: ["rounded-sm"] }, { tone: "pill", radius: "base", className: ["rounded"] }, { tone: "pill", radius: "md", className: ["rounded-md"] }, { tone: "pill", radius: "lg", className: ["rounded-lg"] }, { tone: "pill", radius: "full", className: ["rounded-full"] }, { tone: "line", state: "active", className: ["text-gray-900", "border-b-2"] }, { tone: "line", state: "inactive", className: ["text-gray-500", "border-b-2"] }, { tone: "line", color: "blue", state: "active", className: ["border-b-blue-400"] }, { tone: "line", color: "blue", state: "inactive", className: ["border-b-gray-100", "hover:border-b-blue-200"] }, { tone: "line", color: "red", state: "active", className: ["border-b-red-400"] }, { tone: "line", color: "red", state: "inactive", className: ["border-b-gray-100", "hover:border-b-red-200"] }, { tone: "line", color: "green", state: "active", className: ["border-b-green-400"] }, { tone: "line", color: "green", state: "inactive", className: ["border-b-gray-100", "hover:border-b-green-200"] }, { tone: "line", color: "yellow", state: "active", className: ["border-b-yellow-300"] }, { tone: "line", color: "yellow", state: "inactive", className: ["border-b-gray-100", "hover:border-b-yellow-100"] }, { tone: "line", color: "purple", state: "active", className: ["border-b-purple-400"] }, { tone: "line", color: "purple", state: "inactive", className: ["border-b-gray-100", "hover:border-b-purple-200"] }, { tone: "line", color: "gray", state: "active", className: ["border-b-gray-400"] }, { tone: "line", color: "gray", state: "inactive", className: ["border-b-gray-100", "hover:border-b-gray-200"] }, { tone: "line", color: "dark", state: "active", className: ["border-b-gray-700"] }, { tone: "line", color: "dark", state: "inactive", className: ["border-b-gray-100", "hover:border-b-gray-200"] }, { tone: "line", color: "black", state: "active", className: ["border-b-black"] }, { tone: "line", color: "black", state: "inactive", className: ["border-b-gray-200", "hover:border-b-gray-300"] }, { tone: "pill", state: "inactive", className: ["text-gray-500", "bg-transparent"] }, { tone: "pill", color: "blue", state: "active", className: ["bg-blue-500", "text-white"] }, { tone: "pill", color: "blue", state: "inactive", className: ["hover:bg-blue-50"] }, { tone: "pill", color: "red", state: "active", className: ["bg-red-500", "text-white"] }, { tone: "pill", color: "red", state: "inactive", className: ["hover:bg-red-50"] }, { tone: "pill", color: "green", state: "active", className: ["bg-green-500", "text-white"] }, { tone: "pill", color: "green", state: "inactive", className: ["hover:bg-green-50"] }, { tone: "pill", color: "yellow", state: "active", className: ["bg-yellow-400", "text-white"] }, { tone: "pill", color: "yellow", state: "inactive", className: ["hover:bg-yellow-50"] }, { tone: "pill", color: "purple", state: "active", className: ["bg-purple-500", "text-white"] }, { tone: "pill", color: "purple", state: "inactive", className: ["hover:bg-purple-50"] }, { tone: "pill", color: "gray", state: "active", className: ["bg-gray-500", "text-white"] }, { tone: "pill", color: "gray", state: "inactive", className: ["hover:bg-gray-50"] }, { tone: "pill", color: "dark", state: "active", className: ["bg-gray-800", "text-white"] }, { tone: "pill", color: "dark", state: "inactive", className: ["hover:bg-gray-50"] }, { tone: "pill", color: "black", state: "active", className: ["bg-black", "text-white"] }, { tone: "pill", color: "black", state: "inactive", className: ["hover:bg-gray-100"] }] });
var a9 = { wrapper: cva(["overflow-auto"], { variants: { fullWidth: { true: ["w-full"], false: [] } } }), tab: l7, list: cva(["flex", "flex-inline", "space-x-2", "px-1", "mb-2", "py-2", "overflow-auto"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Table.styles.js
var r13 = cva(["w-full", "overflow-auto", "border-collapse"], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, outerBorders: { true: ["border", "border-gray-200"], false: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] } } });
var t13 = cva(["table-auto", "w-full", "overflow-hidden", "bg-white"], { variants: { radius: { none: [], sm: [], base: [], md: [], lg: [] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] } } });
var o8 = cva([], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, size: { sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, headerBorders: { true: ["border-b", "border-gray-300/75"], false: [] }, headerColor: { white: ["text-gray-700", "bg-white"], gray: ["text-gray-700", "bg-gray-100/75"], dark: ["text-white", "bg-gray-800"], black: ["text-white", "bg-black"] } } });
var a10 = { wrapper: r13, table: t13, tbody: cva(["font-normal", "text-gray-600"], { variants: { borderStyle: { dashed: ["divide-dashed"], solid: ["divide-solid"] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, horizontalBorders: { true: ["divide-y", "divide-gray-200"] } } }), tfoot: cva(["text-gray-700"], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, size: { sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, footerBorders: { true: ["border-t", "border-gray-300/75"], false: [] } } }), thead: o8, tr: cva([], { variants: { borderStyle: { dashed: ["divide-dashed"], solid: ["divide-solid"] }, verticalBorders: { true: ["divide-x", "divide-gray-200"], false: [] }, hoverable: { true: [], false: [] }, striped: { true: [], false: [] }, stripePosition: { even: [], odd: [] }, color: { none: [], white: ["bg-white"], blue: ["bg-blue-50", "text-blue-800"], red: ["bg-red-50", "text-red-800"], green: ["bg-green-50", "text-green-800"], yellow: ["bg-yellow-50", "text-yellow-800"], purple: ["bg-purple-50", "text-purple-800"], gray: ["bg-gray-50", "text-gray-800"], dark: ["bg-gray-600", "text-white"], black: ["bg-gray-900", "text-white"] } }, compoundVariants: [{ color: "none", stripePosition: "even", striped: true, className: ["even:bg-gray-50"] }, { color: "none", stripePosition: "odd", striped: true, className: ["odd:bg-gray-50"] }, { color: ["none", "white"], hoverable: true, className: ["hover:bg-gray-100"] }, { color: "blue", hoverable: true, className: ["hover:bg-blue-100"] }, { color: "red", hoverable: true, className: ["hover:bg-red-100"] }, { color: "green", hoverable: true, className: ["hover:bg-green-100"] }, { color: "yellow", hoverable: true, className: ["hover:bg-yellow-100"] }, { color: "purple", hoverable: true, className: ["hover:bg-purple-100"] }, { color: "gray", hoverable: true, className: ["hover:bg-gray-100"] }, { color: "dark", hoverable: true, className: ["hover:bg-gray-700"] }, { color: "black", hoverable: true, className: ["hover:bg-black"] }] }), td: cva(["[&[align=center]]:text-center", "[&[align=right]]:text-right"], { variants: { size: { sm: ["p-1"], md: ["p-2"], lg: ["p-2.5"] } } }), th: cva(["font-medium", "[&[align=center]]:text-center", "[&[align=right]]:text-right"], { variants: { size: { sm: ["p-1"], md: ["p-2"], lg: ["p-2.5"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Text.styles.js
var e9 = { base: cva([], { variants: { color: { white: "text-white", blue: "text-blue-500", red: "text-red-500", green: "text-green-500", yellow: "text-yellow-400", purple: "text-purple-500", gray: "text-gray-600", dark: "text-gray-900", black: "text-black" }, leading: { 3: "leading-3", 4: "leading-4", 5: "leading-5", 6: "leading-6", 7: "leading-7", 8: "leading-8", 9: "leading-9", 10: "leading-10", none: "leading-none", tight: "leading-tight", snug: "leading-snug", normal: "leading-normal", relaxed: "leading-relaxed", loose: "leading-loose" }, size: { xs: "text-xs", sm: "text-sm", base: "text-base", lg: "text-lg", xl: "text-xl", "2xl": "text-2xl", "3xl": "text-3xl", "4xl": "text-4xl", "5xl": "text-5xl", "6xl": "text-6xl", "7xl": "text-7xl", "8xl": "text-8xl", "9xl": "text-9xl" }, tracking: { tighter: "tracking-tighter", tight: "tracking-tight", normal: "tracking-normal", wide: "tracking-wide", wider: "tracking-wider", widest: "tracking-widest" }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Textarea.styles.js
var e10 = { base: cva(["w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["px-2", "text-xs", "py-2"], sm: ["px-3", "text-sm", "py-3"], md: ["px-3", "text-base", "py-3"], lg: ["px-4", "text-lg", "py-4"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], xl: ["rounded-xl"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: [] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Toast.styles.js
var o9 = { container: cva(["fixed", "flex", "flex-col", "gap-y-2", "z-[60]"], { variants: { position: { "top-left": ["top-2", "left-2"], "top-right": ["top-2", "right-2"], "bottom-left": ["bottom-2", "left-2"], "bottom-right": ["bottom-2", "right-2"] } } }), toast: cva(["flex", "flex-col", "w-72", "overflow-hidden", "transition-colors"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: ["shadow-gray-200/50 hover:shadow-gray-200/60"], blue: ["shadow-blue-500/50", "hover:shadow-blue-500/60"], red: ["shadow-red-500/50 hover:shadow-red-500/60"], green: ["shadow-green-500/50 hover:shadow-green-500/60"], yellow: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"], purple: ["shadow-purple-500/50 hover:shadow-purple-500/60"], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], dark: ["shadow-gray-600/50 hover:shadow-gray-600/60"], black: ["shadow-gray-800/50 hover:shadow-gray-800/60"] } }, compoundVariants: [{ color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "minimal", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-yellow-900", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "light", color: "blue", className: ["text-blue-700", "bg-blue-100/95"] }, { tone: "light", color: "red", className: ["text-red-700", "bg-red-100/95"] }, { tone: "light", color: "green", className: ["text-green-700", "bg-green-100/95"] }, { tone: "light", color: "yellow", className: ["text-yellow-700", "bg-yellow-100/95"] }, { tone: "light", color: "purple", className: ["text-purple-700", "bg-purple-100/95"] }, { tone: "light", color: "gray", className: ["text-gray-700", "bg-gray-100/95"] }, { tone: "light", color: "dark", className: ["text-gray-800", "bg-gray-300/95"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/95"] }] }), progress: cva(["w-full", "h-2"], { variants: { tone: { solid: [], light: [], minimal: ["rounded", "overflow-hidden"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["bg-gray-300"] }, { tone: ["solid", "minimal"], color: "blue", className: ["bg-blue-700"] }, { tone: "solid", color: "red", className: ["bg-red-700"] }, { tone: "solid", color: "green", className: ["bg-green-700"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-700"] }, { tone: "solid", color: "purple", className: ["bg-purple-700"] }, { tone: "solid", color: "gray", className: ["bg-gray-300"] }, { tone: "solid", color: "dark", className: ["bg-gray-800"] }, { tone: "solid", color: "black", className: ["bg-gray-900"] }, { tone: "light", color: "blue", className: ["bg-blue-500"] }, { tone: "light", color: "red", className: ["bg-red-500"] }, { tone: "light", color: "green", className: ["bg-green-500"] }, { tone: "light", color: "yellow", className: ["bg-yellow-500"] }, { tone: "light", color: "purple", className: ["bg-purple-500"] }, { tone: "light", color: "gray", className: ["bg-gray-300"] }, { tone: "light", color: "dark", className: ["bg-gray-600"] }, { tone: "light", color: "black", className: ["bg-gray-700"] }] }), progressInner: cva(["transition-[width]", "h-full"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["bg-gray-200"] }, { tone: ["solid", "minimal"], color: "blue", className: ["bg-blue-400"] }, { tone: "solid", color: "red", className: ["bg-red-400"] }, { tone: "solid", color: "green", className: ["bg-green-400"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-300"] }, { tone: "solid", color: "purple", className: ["bg-purple-400"] }, { tone: "solid", color: "gray", className: ["bg-gray-100"] }, { tone: "solid", color: "dark", className: ["bg-gray-600"] }, { tone: "solid", color: "black", className: ["bg-gray-700"] }, { tone: "light", color: "blue", className: ["bg-blue-300"] }, { tone: "light", color: "red", className: ["bg-red-300"] }, { tone: "light", color: "green", className: ["bg-green-300"] }, { tone: "light", color: "yellow", className: ["bg-yellow-200"] }, { tone: "light", color: "purple", className: ["bg-purple-300"] }, { tone: "light", color: "gray", className: ["bg-gray-200"] }, { tone: "light", color: "dark", className: ["bg-gray-500"] }, { tone: "light", color: "black", className: ["bg-gray-600"] }] }), contentWrapper: cva(["flex", "gap-x-3", "p-3", "items-center"], { variants: { closeOnClick: { true: ["cursor-pointer"], false: [] } } }), content: cva(["flex", "flex-col", "gap-y-1.5"]), title: cva(["text-xl", "font-medium", "leading-none"]), description: cva([], { variants: { hasTitle: { true: ["text-sm"], false: ["text-base"] } } }), actionsWrapper: cva(["flex", "items-center", "w-full", "divide-x", "border-t"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["border-gray-200", "divide-gray-200"] }, { color: "blue", tone: "solid", className: ["border-blue-600", "divide-blue-600"] }, { color: "red", tone: "solid", className: ["border-red-600", "divide-red-600"] }, { color: "green", tone: "solid", className: ["border-green-600", "divide-green-600"] }, { color: "yellow", tone: "solid", className: ["border-yellow-500", "divide-yellow-500"] }, { color: "purple", tone: "solid", className: ["border-purple-600", "divide-purple-600"] }, { color: "gray", tone: "solid", className: ["border-gray-300", "divide-gray-300"] }, { color: "dark", tone: "solid", className: ["border-gray-600", "divide-gray-600"] }, { color: "black", tone: "solid", className: ["border-gray-800", "divide-gray-800"] }, { color: "blue", tone: "light", className: ["border-blue-200", "divide-blue-200"] }, { color: "red", tone: "light", className: ["border-red-200", "divide-red-200"] }, { color: "green", tone: "light", className: ["border-green-200", "divide-green-200"] }, { color: "yellow", tone: "light", className: ["border-yellow-200", "divide-yellow-200"] }, { color: "purple", tone: "light", className: ["border-purple-200", "divide-purple-200"] }, { color: "gray", tone: "light", className: ["border-gray-200", "divide-gray-200"] }, { color: "dark", tone: "light", className: ["border-gray-400", "divide-gray-400"] }, { color: "black", tone: "light", className: ["border-gray-500", "divide-gray-500"] }] }), action: cva(["w-full", "py-2.5", "text-sm"], { variants: { primary: { true: ["font-bold"], false: [] }, tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: "solid", className: ["hover:bg-gray-200", "active:bg-gray-300"] }, { color: "blue", tone: "solid", className: ["hover:bg-blue-600", "active:bg-blue-700"] }, { color: "red", tone: "solid", className: ["hover:bg-red-600", "active:bg-red-700"] }, { color: "green", tone: "solid", className: ["hover:bg-green-600", "active:bg-green-700"] }, { color: "yellow", tone: "solid", className: ["hover:bg-yellow-500", "active:bg-yellow-600"] }, { color: "purple", tone: "solid", className: ["hover:bg-purple-600", "active:bg-purple-700"] }, { color: "gray", tone: "solid", className: ["hover:bg-gray-300", "active:bg-gray-400"] }, { color: "dark", tone: "solid", className: ["hover:bg-gray-800", "active:bg-gray-900"] }, { color: "black", tone: "solid", className: ["hover:bg-gray-950", "active:bg-black"] }, { color: "white", tone: "light", className: ["hover:bg-gray-100", "active:bg-gray-200"] }, { color: "blue", tone: "light", className: ["hover:bg-blue-100/50", "active:bg-blue-200/50"] }, { color: "red", tone: "light", className: ["hover:bg-red-100/50", "active:bg-red-200/50"] }, { color: "green", tone: "light", className: ["hover:bg-green-100/50", "active:bg-green-200/50"] }, { color: "yellow", tone: "light", className: ["hover:bg-yellow-100/50", "active:bg-yellow-200/50"] }, { color: "purple", tone: "light", className: ["hover:bg-purple-100/50", "active:bg-purple-200/50"] }, { color: "gray", tone: "light", className: ["hover:bg-gray-200/50", "active:bg-gray-300/50"] }, { color: "dark", tone: "light", className: ["hover:bg-gray-300/50", "active:bg-gray-400/50"] }, { color: "black", tone: "light", className: ["hover:bg-gray-400/50", "active:bg-gray-500/50"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Tooltip.styles.js
var l8 = cva(["relative", "text-center", "max-w-xs", "transition", "duration-50", "ease-in-out", "z-50"], { variants: { open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "invisible"] }, tone: { solid: [], light: [] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, size: { xs: ["text-xs", "py-1", "px-2"], sm: ["text-sm", "py-1", "px-2"], md: ["text-base", "py-2", "px-3"], lg: ["text-lg", "py-2", "px-3"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-1"] }, { open: false, arrowSide: "right", className: ["translate-x-1"] }, { open: false, arrowSide: "top", className: ["-translate-y-1"] }, { open: false, arrowSide: "bottom", className: ["translate-y-1"] }, { tone: "solid", color: "white", className: ["bg-white", "text-gray-800"] }, { tone: "solid", color: "blue", className: ["bg-blue-500", "text-white"] }, { tone: "solid", color: "red", className: ["bg-red-500", "text-white"] }, { tone: "solid", color: "green", className: ["bg-green-500", "text-white"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-400", "text-white"] }, { tone: "solid", color: "purple", className: ["bg-purple-500", "text-white"] }, { tone: "solid", color: "gray", className: ["bg-gray-200", "text-gray-800"] }, { tone: "solid", color: "dark", className: ["bg-gray-700", "text-white"] }, { tone: "solid", color: "black", className: ["bg-black", "text-white"] }, { tone: "light", color: "white", className: ["bg-white", "text-gray-800"] }, { tone: "light", color: "blue", className: ["bg-blue-100", "text-blue-500"] }, { tone: "light", color: "red", className: ["bg-red-100", "text-red-500"] }, { tone: "light", color: "green", className: ["bg-green-100", "text-green-500"] }, { tone: "light", color: "yellow", className: ["bg-yellow-100", "text-yellow-500"] }, { tone: "light", color: "purple", className: ["bg-purple-100", "text-purple-500"] }, { tone: "light", color: "gray", className: ["bg-gray-100", "text-gray-500"] }, { tone: "light", color: "dark", className: ["bg-gray-200", "text-gray-600"] }, { tone: "light", color: "black", className: ["bg-gray-300", "text-gray-700"] }] });
var o10 = { arrow: cva([], { variants: { tone: { solid: [], light: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: "solid", color: "white", className: ["fill-white"] }, { tone: "solid", color: "blue", className: ["fill-blue-500"] }, { tone: "solid", color: "red", className: ["fill-red-500"] }, { tone: "solid", color: "green", className: ["fill-green-500"] }, { tone: "solid", color: "yellow", className: ["fill-yellow-400"] }, { tone: "solid", color: "purple", className: ["fill-purple-500"] }, { tone: "solid", color: "gray", className: ["fill-gray-200"] }, { tone: "solid", color: "dark", className: ["fill-gray-700"] }, { tone: "solid", color: "black", className: ["fill-black"] }, { tone: "light", color: "white", className: ["fill-white"] }, { tone: "light", color: "blue", className: ["fill-blue-100"] }, { tone: "light", color: "red", className: ["fill-red-100"] }, { tone: "light", color: "green", className: ["fill-green-100"] }, { tone: "light", color: "yellow", className: ["fill-yellow-100"] }, { tone: "light", color: "purple", className: ["fill-purple-100"] }, { tone: "light", color: "gray", className: ["fill-gray-100"] }, { tone: "light", color: "dark", className: ["fill-gray-200"] }, { tone: "light", color: "black", className: ["fill-gray-300"] }] }), base: l8 };

// node_modules/@rewind-ui/core/dist/theme/theme.context.js
var import_react3 = __toESM(require_react());
var k = { components: { Accordion: t3, Alert: a, Avatar: o2, Badge: e5.base, Button: r4, Card: a2, Checkbox: l2, Combobox: h, ComboboxOption: u, Drawer: t7.base, Dropdown: t8, Image: o4, FormControl: e6, Input: a4, InputGroup: r9, Modal: o5.base, Overlay: o6.base, Popover: t9, Progress: l4, Radio: l5, Ribbon: e8.base, Select: a6, Selector: s4, Spinner: s5.base, Switch: s6, Table: a10, Tabs: a9, Text: e9.base, Textarea: e10.base, Toast: o9, Tooltip: o10 } };
var F = (0, import_react3.createContext)({ theme: k });
var G = F.Provider;
function M() {
  var s59;
  return (null === (s59 = (0, import_react3.useContext)(F)) || void 0 === s59 ? void 0 : s59.theme) || k;
}
function q(s59) {
  return M().components[s59];
}

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var import_react4 = __toESM(require_react());

// node_modules/tailwind-merge/dist/lib/tw-join.mjs
function twJoin() {
  var index4 = 0;
  var argument;
  var resolvedValue;
  var string = "";
  while (index4 < arguments.length) {
    if (argument = arguments[index4++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  var resolvedValue;
  var string = "";
  for (var k4 = 0; k4 < mix.length; k4++) {
    if (mix[k4]) {
      if (resolvedValue = toValue(mix[k4])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}

// node_modules/tailwind-merge/dist/lib/class-utils.mjs
var CLASS_PART_SEPARATOR = "-";
function createClassUtils(config) {
  var classMap = createClassMap(config);
  var conflictingClassGroups = config.conflictingClassGroups, _config$conflictingCl = config.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    var conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  var currentClassPart = classParts[0];
  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  var classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a = classPartObject.validators.find(function(_ref) {
    var validator = _ref.validator;
    return validator(classRest);
  })) == null ? void 0 : _a.classGroupId;
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config) {
  var theme = config.theme, prefix = config.prefix;
  var classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(function(_ref2) {
    var classGroupId = _ref2[0], classGroup = _ref2[1];
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(function(classDefinition) {
    if (typeof classDefinition === "string") {
      var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(function(_ref3) {
      var key = _ref3[0], classGroup2 = _ref3[1];
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(function(pathPart) {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(function(_ref4) {
    var classGroupId = _ref4[0], classGroup = _ref4[1];
    var prefixedClassGroup = classGroup.map(function(classDefinition) {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
          var key = _ref5[0], value = _ref5[1];
          return [prefix + key, value];
        }));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}

// node_modules/tailwind-merge/dist/lib/lru-cache.mjs
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: function get() {
        return void 0;
      },
      set: function set() {
      }
    };
  }
  var cacheSize = 0;
  var cache = /* @__PURE__ */ new Map();
  var previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  }
  return {
    get: function get(key) {
      var value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set: function set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}

// node_modules/tailwind-merge/dist/lib/modifier-utils.mjs
var IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config) {
  var separator = config.separator || ":";
  var isSeparatorSingleCharacter = separator.length === 1;
  var firstSeparatorCharacter = separator[0];
  var separatorLength = separator.length;
  return function splitModifiers(className) {
    var modifiers = [];
    var bracketDepth = 0;
    var modifierStart = 0;
    var postfixModifierPosition;
    for (var index4 = 0; index4 < className.length; index4++) {
      var currentCharacter = className[index4];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index4, index4 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index4));
          modifierStart = index4 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index4;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  var sortedModifiers = [];
  var unsortedModifiers = [];
  modifiers.forEach(function(modifier) {
    var isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
  return sortedModifiers;
}

// node_modules/tailwind-merge/dist/lib/config-utils.mjs
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}

// node_modules/tailwind-merge/dist/lib/merge-classlist.mjs
var SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  var classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function(originalClassName) {
    var _splitModifiers = splitModifiers(originalClassName), modifiers = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    var variantModifier = sortModifiers(modifiers).join(":");
    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter(function(parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }
    var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
    var classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function(group) {
      return classGroupsInConflict.add(modifierId + group);
    });
    return true;
  }).reverse().map(function(parsed) {
    return parsed.originalClassName;
  }).join(" ");
}

// node_modules/tailwind-merge/dist/lib/create-tailwind-merge.mjs
function createTailwindMerge() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    createConfig[_key] = arguments[_key];
  }
  var configUtils;
  var cacheGet;
  var cacheSet;
  var functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
    var config = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    var result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}

// node_modules/tailwind-merge/dist/lib/from-theme.mjs
function fromTheme(key) {
  var themeGetter = function themeGetter2(theme) {
    return theme[key] || [];
  };
  themeGetter.isThemeGetter = true;
  return themeGetter;
}

// node_modules/tailwind-merge/dist/lib/validators.mjs
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, "size", isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
function isArbitraryUrl(value) {
  return getIsArbitraryValue(value, "url", isUrl);
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber);
}
function isNumber(value) {
  return !Number.isNaN(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber(value.slice(0, -1));
}
function isInteger(value) {
  return isIntegerOnly(value) || getIsArbitraryValue(value, "number", isIntegerOnly);
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isAny() {
  return true;
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function getIsArbitraryValue(value, label, testValue) {
  var result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return result[1] === label;
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value);
}
function isNever() {
  return false;
}
function isUrl(value) {
  return value.startsWith("url(");
}
function isIntegerOnly(value) {
  return Number.isInteger(Number(value));
}
function isShadow(value) {
  return shadowRegex.test(value);
}

// node_modules/tailwind-merge/dist/lib/default-config.mjs
function getDefaultConfig() {
  var colors = fromTheme("colors");
  var spacing = fromTheme("spacing");
  var blur = fromTheme("blur");
  var brightness = fromTheme("brightness");
  var borderColor = fromTheme("borderColor");
  var borderRadius = fromTheme("borderRadius");
  var borderSpacing = fromTheme("borderSpacing");
  var borderWidth = fromTheme("borderWidth");
  var contrast = fromTheme("contrast");
  var grayscale = fromTheme("grayscale");
  var hueRotate = fromTheme("hueRotate");
  var invert = fromTheme("invert");
  var gap = fromTheme("gap");
  var gradientColorStops = fromTheme("gradientColorStops");
  var gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  var inset = fromTheme("inset");
  var margin = fromTheme("margin");
  var opacity = fromTheme("opacity");
  var padding = fromTheme("padding");
  var saturate = fromTheme("saturate");
  var scale = fromTheme("scale");
  var sepia = fromTheme("sepia");
  var skew = fromTheme("skew");
  var space = fromTheme("space");
  var translate = fromTheme("translate");
  var getOverscroll = function getOverscroll2() {
    return ["auto", "contain", "none"];
  };
  var getOverflow = function getOverflow2() {
    return ["auto", "hidden", "clip", "visible", "scroll"];
  };
  var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary2() {
    return ["auto", isArbitraryValue, spacing];
  };
  var getSpacingWithArbitrary = function getSpacingWithArbitrary2() {
    return [isArbitraryValue, spacing];
  };
  var getLengthWithEmpty = function getLengthWithEmpty2() {
    return ["", isLength];
  };
  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary2() {
    return ["auto", isNumber, isArbitraryValue];
  };
  var getPositions = function getPositions2() {
    return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  };
  var getLineStyles = function getLineStyles2() {
    return ["solid", "dashed", "dotted", "double", "none"];
  };
  var getBlendModes = function getBlendModes2() {
    return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
  };
  var getAlign = function getAlign2() {
    return ["start", "end", "center", "between", "around", "evenly", "stretch"];
  };
  var getZeroAndEmpty = function getZeroAndEmpty2() {
    return ["", "0", isArbitraryValue];
  };
  var getBreaks = function getBreaks2() {
    return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  };
  var getNumber = function getNumber2() {
    return [isNumber, isArbitraryNumber];
  };
  var getNumberAndArbitrary = function getNumberAndArbitrary2() {
    return [isNumber, isArbitraryValue];
  };
  return {
    cacheSize: 500,
    theme: {
      colors: [isAny],
      spacing: [isLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmpty(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      "float": [{
        "float": ["right", "left", "none"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [].concat(getPositions(), [isArbitraryValue])
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal"].concat(getAlign())
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal"].concat(getAlign(), ["baseline"])
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [].concat(getAlign(), ["baseline"])
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": ["min", "max", "fit", isArbitraryValue, isLength]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize, isArbitraryValue]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["min", "max", "fit", isArbitraryValue, isLength]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isArbitraryValue, isLength]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [].concat(getLineStyles(), ["wavy"])
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isArbitraryValue, isLength]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      "break": [{
        "break": ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [].concat(getPositions(), [isArbitraryPosition])
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryUrl]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [].concat(getLineStyles(), ["hidden"])
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [""].concat(getLineStyles())
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isArbitraryValue, isLength]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmpty()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: ["appearance-none"],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "pinch-zoom", "manipulation", {
          pan: ["x", "left", "right", "y", "up", "down"]
        }]
      }],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}

// node_modules/tailwind-merge/dist/lib/tw-merge.mjs
var twMerge = createTailwindMerge(getDefaultConfig);

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var d3 = (0, import_react4.forwardRef)((m56, d33) => {
  const n83 = q("Accordion"), l40 = Object.assign({}, m56), { children: p31, className: b9 = "" } = l40, f19 = __rest(l40, ["children", "className"]), { activeItemAnchor: h16, bordered: j9, size: A2 } = n2(), { anchor: g17, bodyId: x12, headerId: y6 } = n3(), I = (0, import_react4.useMemo)(() => twMerge(n83.body({ bordered: j9, className: b9, size: A2 })), [j9, b9, A2, n83]);
  return (0, import_jsx_runtime3.jsx)(r2, Object.assign({ isOpen: g17 === h16 }, { children: (0, import_jsx_runtime3.jsx)("div", Object.assign({ id: x12, ref: d33, role: "region", "aria-labelledby": y6, className: I }, f19, { children: p31 })) }));
});
d3.displayName = "AccordionBody";

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionHeader/AccordionHeader.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/icons/ChevronDown.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var n6 = ({ className: n83 }) => (0, import_jsx_runtime4.jsxs)("svg", Object.assign({ className: n83, xmlns: "http://www.w3.org/2000/svg", width: "88", height: "88", viewBox: "0 0 24 24", strokeWidth: "1.5", stroke: "currentColor", fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, { children: [(0, import_jsx_runtime4.jsx)("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), (0, import_jsx_runtime4.jsx)("polyline", { points: "6 9 12 15 18 9" })] }));

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionHeader/AccordionHeader.js
var import_react5 = __toESM(require_react());
var d4 = (0, import_react5.forwardRef)((n83, d33) => {
  const l40 = q("Accordion"), h16 = Object.assign({}, n83), { children: p31, className: f19 = "" } = h16, b9 = __rest(h16, ["children", "className"]), { activeColor: A2, activeItemAnchor: j9, bordered: v7, radius: u29, setActiveItemAnchor: x12, size: I, tone: N2, withRing: g17 } = n2(), { anchor: w9, headerId: C3, bodyId: y6 } = n3(), z3 = w9 === j9, O6 = z3 ? "active" : "inactive", R2 = (0, import_react5.useMemo)(() => twMerge(l40.header({ bordered: v7, className: f19, size: I, activeColor: A2, radius: u29, state: O6, tone: N2, withRing: g17 })), [v7, f19, u29, A2, I, O6, l40, N2, g17]), k4 = l40.icon({ size: I, state: O6 });
  return (0, import_jsx_runtime5.jsxs)("button", Object.assign({ id: C3, ref: d33, type: "button", onClick: () => {
    x12(z3 ? "" : w9);
  }, className: R2, "aria-expanded": z3, "aria-controls": y6 }, b9, { children: [p31, (0, import_jsx_runtime5.jsx)(n6, { className: k4 })] }));
});
d4.displayName = "AccordionHeader";

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionItem/AccordionItem.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var o14 = (o103) => {
  const { anchor: c55, children: t123 } = Object.assign({}, o103), n83 = { anchor: c55, bodyId: `${c55}-body`, headerId: `${c55}-header` };
  return (0, import_jsx_runtime6.jsx)(e3, Object.assign({ value: n83 }, { children: t123 }));
};
o14.displayName = "AccordionItem";

// node_modules/@rewind-ui/core/dist/theme/variants/Accordion.variants.js
var r14 = { primary: {} };

// node_modules/@rewind-ui/core/dist/theme/variants/Alert.variants.js
var e13 = { primary: { color: "purple", tone: "light", iconType: "info", className: "border-dashed" }, secondary: { color: "gray", tone: "light", iconType: "info", className: "border-dashed" }, tertiary: { color: "gray", tone: "outline", iconType: "info", className: "border-dashed" }, danger: { color: "red", tone: "light", iconType: "error", className: "border-dashed" }, success: { color: "green", tone: "light", iconType: "success", className: "border-dashed" }, warning: { color: "yellow", tone: "light", iconType: "warning", className: "border-dashed" }, info: { color: "blue", tone: "light", iconType: "info", className: "border-dashed" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Button.variants.js
var o15 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, tertiary: { color: "gray", tone: "transparent" }, link: { color: "purple", tone: "transparent" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Toast.variants.js
var o16 = { primary: { color: "purple", tone: "solid", iconType: "info" }, secondary: { color: "dark", tone: "solid", iconType: "info" }, danger: { color: "red", tone: "solid", iconType: "error" }, success: { color: "green", tone: "solid", iconType: "success" }, warning: { color: "yellow", tone: "solid", iconType: "warning" }, info: { color: "blue", tone: "solid", iconType: "info" } };

// node_modules/@rewind-ui/core/dist/theme/variant.context.js
var import_react6 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/theme/variants/Badge.variants.js
var o17 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Ribbon.variants.js
var o18 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Text.variants.js
var i2 = { d1: { size: "9xl", weight: "light", leading: "tight", tracking: "normal", as: "h1" }, d2: { size: "8xl", weight: "light", leading: "tight", tracking: "normal", as: "h2" }, d3: { size: "7xl", weight: "light", leading: "tight", tracking: "normal", as: "h3" }, d4: { size: "6xl", weight: "light", leading: "tight", tracking: "normal", as: "h4" }, h1: { size: "5xl", weight: "medium", leading: "tight", tracking: "normal", as: "h1" }, h2: { size: "4xl", weight: "medium", leading: "tight", tracking: "normal", as: "h2" }, h3: { size: "3xl", weight: "medium", leading: "tight", tracking: "normal", as: "h3" }, h4: { size: "2xl", weight: "medium", leading: "tight", tracking: "normal", as: "h4" }, h5: { size: "xl", weight: "medium", leading: "tight", tracking: "normal", as: "h5" }, h6: { size: "lg", weight: "medium", leading: "tight", tracking: "normal", as: "h6" }, p: { size: "base", weight: "normal", leading: "tight", tracking: "normal", as: "p" } };

// node_modules/@rewind-ui/core/dist/theme/variant.context.js
var e14 = { components: { Accordion: r14, Alert: e13, Badge: o17, Button: o15, Text: i2, Toast: o16, Ribbon: o18 } };
var c2 = (0, import_react6.createContext)({ variant: e14 });
var p2 = c2.Provider;
function f() {
  var r107;
  return (null === (r107 = (0, import_react6.useContext)(c2)) || void 0 === r107 ? void 0 : r107.variant) || e14;
}
function d5(r107, t123) {
  const a60 = f();
  return t123 ? a60.components[r107][t123] : {};
}

// node_modules/@rewind-ui/core/dist/utils/usePropId.js
var import_react7 = __toESM(require_react());
function t15(t123) {
  const o103 = (0, import_react7.useId)();
  return t123 || o103;
}

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.js
var import_react8 = __toESM(require_react());
var f2 = { activeColor: "dark", bordered: true, color: "white", radius: "md", shadow: "none", shadowColor: "none", size: "md", tone: "solid", withRing: true };
var j = (0, import_react8.forwardRef)((e114, i49) => {
  const t123 = d5("Accordion", e114.variant), a60 = q("Accordion"), j9 = Object.assign(Object.assign(Object.assign({}, f2), t123), e114), { activeColor: p31, bordered: w9 = true, children: b9, className: u29 = "", color: A2, defaultItem: g17, radius: v7, shadow: C3, shadowColor: I, size: O6, tone: x12, withRing: z3 } = j9, N2 = __rest(j9, ["activeColor", "bordered", "children", "className", "color", "defaultItem", "radius", "shadow", "shadowColor", "size", "tone", "withRing"]), y6 = t15(e114.id), [R2, B] = (0, import_react8.useState)(g17), H2 = { activeColor: p31, activeItemAnchor: R2, bordered: w9, color: A2, radius: v7, setActiveItemAnchor: B, size: O6, tone: x12, withRing: z3 }, k4 = (0, import_react8.useMemo)(() => twMerge(a60.base({ bordered: w9, className: u29, color: A2, radius: v7, shadow: C3, shadowColor: I, size: O6 })), [w9, u29, A2, v7, C3, I, O6, a60]);
  return (0, import_jsx_runtime7.jsx)(e2, Object.assign({ value: H2 }, { children: (0, import_jsx_runtime7.jsx)("div", Object.assign({ id: y6, ref: i49, className: k4 }, N2, { children: b9 })) }));
});
j.displayName = "Accordion";
var p3 = Object.assign(j, { Item: o14, Header: d4, Body: d3 });

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Fader/Fader.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_react11 = __toESM(require_react());

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v7) => ({
  x: v7,
  y: v7
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x12,
    y: y6
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i49 = 0; i49 < validMiddleware.length; i49++) {
    const {
      name,
      fn
    } = validMiddleware[i49];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x: x12,
      y: y6,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x12 = nextX != null ? nextX : x12;
    y6 = nextY != null ? nextY : y6;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x12,
          y: y6
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i49 = -1;
      continue;
    }
  }
  return {
    x: x12,
    y: y6,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x12,
    y: y6,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x12,
    y: y6
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x12,
      y: y6,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x12,
      y: y6
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d33) => d33.overflows[0] <= 0).sort((a60, b9) => a60.overflows[1] - b9.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d33) => [d33.placement, d33.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a60, b9) => a60[1] - b9[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a60, b9) => a60.y - b9.y);
  const groups = [];
  let prevRect = null;
  for (let i49 = 0; i49 < sortedRects.length; i49++) {
    const rect = sortedRects[i49];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
var inline = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "inline",
    options,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform: platform2,
        strategy
      } = state;
      const {
        padding = 2,
        x: x12,
        y: y6
      } = evaluate(options, state);
      const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
      const paddingObject = getPaddingObject(padding);
      function getBoundingClientRect2() {
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x12 != null && y6 != null) {
          return clientRects.find((rect) => x12 > rect.left - paddingObject.left && x12 < rect.right + paddingObject.right && y6 > rect.top - paddingObject.top && y6 < rect.bottom + paddingObject.bottom) || fallback;
        }
        if (clientRects.length >= 2) {
          if (getSideAxis(placement) === "y") {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide(placement) === "top";
            const top2 = firstRect.top;
            const bottom2 = lastRect.bottom;
            const left2 = isTop ? firstRect.left : lastRect.left;
            const right2 = isTop ? firstRect.right : lastRect.right;
            const width2 = right2 - left2;
            const height2 = bottom2 - top2;
            return {
              top: top2,
              bottom: bottom2,
              left: left2,
              right: right2,
              width: width2,
              height: height2,
              x: left2,
              y: top2
            };
          }
          const isLeftSide = getSide(placement) === "left";
          const maxRight = max(...clientRects.map((rect) => rect.right));
          const minLeft = min(...clientRects.map((rect) => rect.left));
          const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top = measureRects[0].top;
          const bottom = measureRects[measureRects.length - 1].bottom;
          const left = minLeft;
          const right = maxRight;
          const width = right - left;
          const height = bottom - top;
          return {
            top,
            bottom,
            left,
            right,
            width,
            height,
            x: left,
            y: top
          };
        }
        return fallback;
      }
      const resetRects = await platform2.getElementRects({
        reference: {
          getBoundingClientRect: getBoundingClientRect2
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      const {
        x: x12,
        y: y6
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      return {
        x: x12 + diffCoords.x,
        y: y6 + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x12,
        y: y6,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x13,
              y: y7
            } = _ref;
            return {
              x: x13,
              y: y7
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x12,
        y: y6
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x12,
          y: limitedCoords.y - y6
        }
      };
    }
  };
};

// node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x12 = ($2 ? round(rect.width) : rect.width) / width;
  let y6 = ($2 ? round(rect.height) : rect.height) / height;
  if (!x12 || !Number.isFinite(x12)) {
    x12 = 1;
  }
  if (!y6 || !Number.isFinite(y6)) {
    y6 = 1;
  }
  return {
    x: x12,
    y: y6
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x12 = (clientRect.left + visualOffsets.x) / scale.x;
  let y6 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x12 *= iframeScale.x;
      y6 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x12 += left;
      y6 += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x12,
    y: y6
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x12 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y6 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x12 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x12,
    y: y6
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x12 = 0;
  let y6 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x12 = visualViewport.offsetLeft;
      y6 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x12,
    y: y6
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x12 = left * scale.x;
  const y6 = top * scale.y;
  return {
    width,
    height,
    x: x12,
    y: y6
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
var getElementRects = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId2;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId2);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId2 = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e114) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var arrow2 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      } else if (element) {
        return arrow({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var index = typeof document !== "undefined" ? import_react9.useLayoutEffect : import_react9.useEffect;
function deepEqual(a60, b9) {
  if (a60 === b9) {
    return true;
  }
  if (typeof a60 !== typeof b9) {
    return false;
  }
  if (typeof a60 === "function" && a60.toString() === b9.toString()) {
    return true;
  }
  let length, i49, keys;
  if (a60 && b9 && typeof a60 == "object") {
    if (Array.isArray(a60)) {
      length = a60.length;
      if (length != b9.length)
        return false;
      for (i49 = length; i49-- !== 0; ) {
        if (!deepEqual(a60[i49], b9[i49])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a60);
    length = keys.length;
    if (length !== Object.keys(b9).length) {
      return false;
    }
    for (i49 = length; i49-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b9, keys[i49])) {
        return false;
      }
    }
    for (i49 = length; i49-- !== 0; ) {
      const key = keys[i49];
      if (key === "_owner" && a60.$$typeof) {
        continue;
      }
      if (!deepEqual(a60[key], b9[key])) {
        return false;
      }
    }
    return true;
  }
  return a60 !== a60 && b9 !== b9;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React.useState(null);
  const [_floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback((node) => {
    if (node != referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, [_setReference]);
  const setFloating = React.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, [_setFloating]);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      } else {
        update();
      }
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x12 = roundByDPR(elements.floating, data.x);
    const y6 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x12 + "px, " + y6 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x12,
      top: y6
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var React2 = __toESM(require_react());
var import_react10 = __toESM(require_react());

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a60, b9) {
  return a60.tabIndex === b9.tabIndex ? a60.documentOrder - b9.documentOrder : a60.tabIndex - b9.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r107 = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r107;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i49 = 0; i49 < nodes.length; i49++) {
    if (nodes[i49].checked && nodes[i49].form === form) {
      return nodes[i49];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i49 = 0; i49 < parentNode.children.length; i49++) {
          var child = parentNode.children.item(i49);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i49) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i49,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var import_react_dom3 = __toESM(require_react_dom());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i49 = 1; i49 < arguments.length; i49++) {
      var source = arguments[i49];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var index2 = typeof document !== "undefined" ? import_react10.useLayoutEffect : import_react10.useEffect;
var serverHandoffComplete = false;
var count = 0;
var genId = () => "floating-ui-" + count++;
function useFloatingId() {
  const [id, setId] = React2.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React2.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id;
}
var useReactId = React2["useId".toString()];
var useId = useReactId || useFloatingId;
var FloatingArrow = React2.forwardRef(function FloatingArrow2(_ref, ref) {
  let {
    context: {
      placement,
      elements: {
        floating
      },
      middlewareData: {
        arrow: arrow3
      }
    },
    width = 14,
    height = 7,
    tipRadius = 0,
    strokeWidth = 0,
    staticOffset,
    stroke,
    d: d33,
    style: {
      transform,
      ...restStyle
    } = {},
    ...rest
  } = _ref;
  if (true) {
    if (!ref) {
      console.warn("Floating UI: The `ref` prop is required for the `FloatingArrow`", "component.");
    }
  }
  const clipPathId = useId();
  if (!floating) {
    return null;
  }
  strokeWidth *= 2;
  const halfStrokeWidth = strokeWidth / 2;
  const svgX = width / 2 * (tipRadius / -8 + 1);
  const svgY = height / 2 * tipRadius / 4;
  const [side, alignment] = placement.split("-");
  const isRTL2 = platform.isRTL(floating);
  const isCustomShape = !!d33;
  const isVerticalSide = side === "top" || side === "bottom";
  const yOffsetProp = staticOffset && alignment === "end" ? "bottom" : "top";
  let xOffsetProp = staticOffset && alignment === "end" ? "right" : "left";
  if (staticOffset && isRTL2) {
    xOffsetProp = alignment === "end" ? "left" : "right";
  }
  const arrowX = (arrow3 == null ? void 0 : arrow3.x) != null ? staticOffset || arrow3.x : "";
  const arrowY = (arrow3 == null ? void 0 : arrow3.y) != null ? staticOffset || arrow3.y : "";
  const dValue = d33 || "M0,0" + (" H" + width) + (" L" + (width - svgX) + "," + (height - svgY)) + (" Q" + width / 2 + "," + height + " " + svgX + "," + (height - svgY)) + " Z";
  const rotation = {
    top: isCustomShape ? "rotate(180deg)" : "",
    left: isCustomShape ? "rotate(90deg)" : "rotate(-90deg)",
    bottom: isCustomShape ? "" : "rotate(180deg)",
    right: isCustomShape ? "rotate(-90deg)" : "rotate(90deg)"
  }[side];
  return React2.createElement("svg", _extends({}, rest, {
    "aria-hidden": true,
    ref,
    width: isCustomShape ? width : width + strokeWidth,
    height: width,
    viewBox: "0 0 " + width + " " + (height > width ? height : width),
    style: {
      position: "absolute",
      pointerEvents: "none",
      [xOffsetProp]: arrowX,
      [yOffsetProp]: arrowY,
      [side]: isVerticalSide || isCustomShape ? "100%" : "calc(100% - " + strokeWidth / 2 + "px)",
      transform: "" + rotation + (transform != null ? transform : ""),
      ...restStyle
    }
  }), strokeWidth > 0 && React2.createElement("path", {
    clipPath: "url(#" + clipPathId + ")",
    fill: "none",
    stroke,
    strokeWidth: strokeWidth + (d33 ? 0 : 1),
    d: dValue
  }), React2.createElement("path", {
    stroke: strokeWidth && !d33 ? rest.fill : "none",
    d: dValue
  }), React2.createElement("clipPath", {
    id: clipPathId
  }, React2.createElement("rect", {
    x: -halfStrokeWidth,
    y: halfStrokeWidth * (isCustomShape ? -1 : 1),
    width: width + strokeWidth,
    height: width
  })));
});
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l40) => l40 !== listener)) || []);
    }
  };
}
var FloatingNodeContext = React2.createContext(null);
var FloatingTreeContext = React2.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React2.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React2.useContext(FloatingTreeContext);
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function getWindow2(value) {
  return getDocument(value).defaultView || window;
}
function isElement2(value) {
  return value ? value instanceof Element || value instanceof getWindow2(value).Element : false;
}
function isHTMLElement2(value) {
  return value ? value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement : false;
}
function isShadowRoot2(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow2(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  const androidRe = /Android/i;
  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot2(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function useLatestRef2(value) {
  const ref = (0, import_react10.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function useHover(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements: {
      domReference,
      floating
    },
    refs
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const pointerTypeRef = React2.useRef();
  const timeoutRef = React2.useRef();
  const handlerRef = React2.useRef();
  const restTimeoutRef = React2.useRef();
  const blockMouseMoveRef = React2.useRef(true);
  const performedPointerEventsMutationRef = React2.useRef(false);
  const unbindMouseMoveRef = React2.useRef(() => {
  });
  const isHoverOpen = React2.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss() {
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      blockMouseMoveRef.current = true;
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [enabled, events]);
  React2.useEffect(() => {
    if (!enabled || !handleCloseRef.current || !open) {
      return;
    }
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event);
      }
    }
    const html = getDocument(floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
  const closeWithDelay = React2.useCallback(function(event, runElseBranch) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => onOpenChange(false, event), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false, event);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = React2.useCallback(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  }, []);
  const clearPointerEvents = React2.useCallback(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(refs.floating.current).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  }, [refs]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function isClickLikeOpenEvent() {
      return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, "open") === 0) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = setTimeout(() => {
          onOpenChange(true, event);
        }, openDelay);
      } else {
        onOpenChange(true, event);
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      unbindMouseMoveRef.current();
      const doc = getDocument(floating);
      clearTimeout(restTimeoutRef.current);
      if (handleCloseRef.current) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...context,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            closeWithDelay(event);
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      handleCloseRef.current == null ? void 0 : handleCloseRef.current({
        ...context,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          closeWithDelay(event);
        }
      })(event);
    }
    if (isElement2(domReference)) {
      const ref = domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      floating == null ? void 0 : floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        floating == null ? void 0 : floating.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
  index2(() => {
    var _handleCloseRef$curre;
    if (!enabled) {
      return;
    }
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      const body = getDocument(floating).body;
      body.setAttribute(safePolygonIdentifier, "");
      body.style.pointerEvents = "none";
      performedPointerEventsMutationRef.current = true;
      if (isElement2(domReference) && floating) {
        var _tree$nodesRef$curren, _tree$nodesRef$curren2;
        const ref = domReference;
        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        ref.style.pointerEvents = "auto";
        floating.style.pointerEvents = "auto";
        return () => {
          ref.style.pointerEvents = "";
          floating.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
  index2(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React2.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      reference: {
        onPointerDown: setPointerRef,
        onPointerEnter: setPointerRef,
        onMouseMove(event) {
          if (open || restMs === 0) {
            return;
          }
          clearTimeout(restTimeoutRef.current);
          restTimeoutRef.current = setTimeout(() => {
            if (!blockMouseMoveRef.current) {
              onOpenChange(true, event.nativeEvent);
            }
          }, restMs);
        }
      },
      floating: {
        onMouseEnter() {
          clearTimeout(timeoutRef.current);
        },
        onMouseLeave(event) {
          events.emit("dismiss", {
            type: "mouseLeave",
            data: {
              returnFocus: false
            }
          });
          closeWithDelay(event.nativeEvent, false);
        }
      }
    };
  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);
}
var FloatingDelayGroupContext = React2.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: () => {
  },
  setState: () => {
  },
  isInstantPhase: false
});
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {
    var _activeElement, _activeElement$shadow;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n83) => {
        var _node$context2;
        return node.parentId === n83.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement2(element) && element.matches(TYPEABLE_SELECTOR);
}
var getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: (
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
  )
});
function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var timeoutId;
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    event.target;
    clearTimeout(timeoutId);
  }
}
var FocusGuard = React2.forwardRef(function FocusGuard2(props, ref) {
  const [role, setRole] = React2.useState();
  index2(() => {
    if (isSafari()) {
      setRole("button");
    }
    document.addEventListener("keydown", setActiveElementOnTab);
    return () => {
      document.removeEventListener("keydown", setActiveElementOnTab);
    };
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    "aria-hidden": role ? void 0 : true,
    [createAttribute("focus-guard")]: "",
    style: HIDDEN_STYLES
  };
  return React2.createElement("span", _extends({}, props, restProps));
});
var PortalContext = React2.createContext(null);
function useFloatingPortalNode(_temp) {
  let {
    id,
    root
  } = _temp === void 0 ? {} : _temp;
  const [portalNode, setPortalNode] = React2.useState(null);
  const uniqueId = useId();
  const portalContext = usePortalContext();
  const data = React2.useMemo(() => ({
    id,
    root,
    portalContext,
    uniqueId
  }), [id, root, portalContext, uniqueId]);
  const dataRef = React2.useRef();
  index2(() => {
    return () => {
      portalNode == null ? void 0 : portalNode.remove();
    };
  }, [portalNode, data]);
  index2(() => {
    if (dataRef.current === data)
      return;
    dataRef.current = data;
    const {
      id: id2,
      root: root2,
      portalContext: portalContext2,
      uniqueId: uniqueId2
    } = data;
    const existingIdRoot = id2 ? document.getElementById(id2) : null;
    const attr = createAttribute("portal");
    if (existingIdRoot) {
      const subRoot = document.createElement("div");
      subRoot.id = uniqueId2;
      subRoot.setAttribute(attr, "");
      existingIdRoot.appendChild(subRoot);
      setPortalNode(subRoot);
    } else {
      let container = root2 || (portalContext2 == null ? void 0 : portalContext2.portalNode);
      if (container && !isElement2(container))
        container = container.current;
      container = container || document.body;
      let idWrapper = null;
      if (id2) {
        idWrapper = document.createElement("div");
        idWrapper.id = id2;
        container.appendChild(idWrapper);
      }
      const subRoot = document.createElement("div");
      subRoot.id = uniqueId2;
      subRoot.setAttribute(attr, "");
      container = idWrapper || container;
      container.appendChild(subRoot);
      setPortalNode(subRoot);
    }
  }, [data]);
  return portalNode;
}
function FloatingPortal(_ref) {
  let {
    children,
    id,
    root = null,
    preserveTabOrder = true
  } = _ref;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React2.useState(null);
  const beforeOutsideRef = React2.useRef(null);
  const afterOutsideRef = React2.useRef(null);
  const beforeInsideRef = React2.useRef(null);
  const afterInsideRef = React2.useRef(null);
  const shouldRenderGuards = (
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode)
  );
  React2.useEffect(() => {
    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
      return;
    }
    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === "focusin";
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }
    portalNode.addEventListener("focusin", onFocus, true);
    portalNode.addEventListener("focusout", onFocus, true);
    return () => {
      portalNode.removeEventListener("focusin", onFocus, true);
      portalNode.removeEventListener("focusout", onFocus, true);
    };
  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
  return React2.createElement(PortalContext.Provider, {
    value: React2.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode])
  }, shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
    "data-type": "outside",
    ref: beforeOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _beforeInsideRef$curr;
        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
      } else {
        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        prevTabbable == null ? void 0 : prevTabbable.focus();
      }
    }
  }), shouldRenderGuards && portalNode && React2.createElement("span", {
    "aria-owns": portalNode.id,
    style: HIDDEN_STYLES
  }), portalNode && (0, import_react_dom3.createPortal)(children, portalNode), shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
    "data-type": "outside",
    ref: afterOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _afterInsideRef$curre;
        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
      } else {
        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        nextTabbable == null ? void 0 : nextTabbable.focus();
        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
      }
    }
  }));
}
var usePortalContext = () => React2.useContext(PortalContext);
var VisuallyHiddenDismiss = React2.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
  return React2.createElement("button", _extends({}, props, {
    type: "button",
    ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  }));
});
var FloatingListContext = React2.createContext({
  register: () => {
  },
  unregister: () => {
  },
  map: /* @__PURE__ */ new Map(),
  elementsRef: {
    current: []
  }
});
var identifier = createAttribute("scroll-lock");
var FloatingOverlay = React2.forwardRef(function FloatingOverlay2(_ref, ref) {
  let {
    lockScroll = false,
    ...rest
  } = _ref;
  index2(() => {
    var _window$visualViewpor, _window$visualViewpor2;
    if (!lockScroll) {
      return;
    }
    const alreadyLocked = document.body.hasAttribute(identifier);
    if (alreadyLocked) {
      return;
    }
    document.body.setAttribute(identifier, "");
    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
    const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
      Object.assign(document.body.style, {
        overflow: "hidden",
        [paddingProp]: scrollbarWidth + "px"
      });
      return () => {
        document.body.removeAttribute(identifier);
        Object.assign(document.body.style, {
          overflow: "",
          [paddingProp]: ""
        });
      };
    }
    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
    const scrollX = window.pageXOffset;
    const scrollY = window.pageYOffset;
    Object.assign(document.body.style, {
      position: "fixed",
      overflow: "hidden",
      top: -(scrollY - Math.floor(offsetTop)) + "px",
      left: -(scrollX - Math.floor(offsetLeft)) + "px",
      right: "0",
      [paddingProp]: scrollbarWidth + "px"
    });
    return () => {
      Object.assign(document.body.style, {
        position: "",
        overflow: "",
        top: "",
        left: "",
        right: "",
        [paddingProp]: ""
      });
      document.body.removeAttribute(identifier);
      window.scrollTo(scrollX, scrollY);
    };
  }, [lockScroll]);
  return React2.createElement("div", _extends({
    ref
  }, rest, {
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  }));
});
function isButtonTarget(event) {
  return isHTMLElement2(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function useClick(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    elements: {
      domReference
    }
  } = context;
  const {
    enabled = true,
    event: eventOption = "click",
    toggle = true,
    ignoreMouse = false,
    keyboardHandlers = true
  } = props;
  const pointerTypeRef = React2.useRef();
  const didKeyDownRef = React2.useRef(false);
  return React2.useMemo(() => {
    if (!enabled)
      return {};
    return {
      reference: {
        onPointerDown(event) {
          pointerTypeRef.current = event.pointerType;
        },
        onMouseDown(event) {
          if (event.button !== 0) {
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (eventOption === "click") {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "mousedown" : true)) {
            onOpenChange(false, event.nativeEvent);
          } else {
            event.preventDefault();
            onOpenChange(true, event.nativeEvent);
          }
        },
        onClick(event) {
          if (eventOption === "mousedown" && pointerTypeRef.current) {
            pointerTypeRef.current = void 0;
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "click" : true)) {
            onOpenChange(false, event.nativeEvent);
          } else {
            onOpenChange(true, event.nativeEvent);
          }
        },
        onKeyDown(event) {
          pointerTypeRef.current = void 0;
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
            return;
          }
          if (event.key === " " && !isSpaceIgnored(domReference)) {
            event.preventDefault();
            didKeyDownRef.current = true;
          }
          if (event.key === "Enter") {
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent);
            } else {
              onOpenChange(true, event.nativeEvent);
            }
          }
        },
        onKeyUp(event) {
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
            return;
          }
          if (event.key === " " && didKeyDownRef.current) {
            didKeyDownRef.current = false;
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent);
            } else {
              onOpenChange(true, event.nativeEvent);
            }
          }
        }
      }
    };
  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
}
var useInsertionEffect = React2["useInsertionEffect".toString()];
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = React2.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React2.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e114 = event;
  return e114.target != null && node.contains(e114.target);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeBubblesProp = (bubbles) => {
  var _bubbles$escapeKey, _bubbles$outsidePress;
  return {
    escapeKeyBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$escapeKey = bubbles == null ? void 0 : bubbles.escapeKey) != null ? _bubbles$escapeKey : false,
    outsidePressBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$outsidePress = bubbles == null ? void 0 : bubbles.outsidePress) != null ? _bubbles$outsidePress : true
  };
};
function useDismiss(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    nodeId,
    elements: {
      reference,
      domReference,
      floating
    },
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles
  } = props;
  const tree = useFloatingTree();
  const nested = useFloatingParentNodeId() != null;
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React2.useRef(false);
  const {
    escapeKeyBubbles,
    outsidePressBubbles
  } = normalizeBubblesProp(bubbles);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    events.emit("dismiss", {
      type: "escapeKey",
      data: {
        returnFocus: {
          preventScroll: false
        }
      }
    });
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    if (isHTMLElement2(target) && floating) {
      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      let xCond = canScrollY && event.offsetX > target.clientWidth;
      if (canScrollY) {
        const isRTL2 = getWindow2(floating).getComputedStyle(target).direction === "rtl";
        if (isRTL2) {
          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
        }
      }
      if (xCond || canScrollX && event.offsetY > target.clientHeight) {
        return;
      }
    }
    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    events.emit("dismiss", {
      type: "outsidePress",
      data: {
        returnFocus: nested ? {
          preventScroll: true
        } : isVirtualClick(event) || isVirtualPointerEvent(event)
      }
    });
    onOpenChange(false, event);
  });
  React2.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    function onScroll(event) {
      onOpenChange(false, event);
    }
    const doc = getDocument(floating);
    escapeKey && doc.addEventListener("keydown", closeOnEscapeKeyDown);
    outsidePress && doc.addEventListener(outsidePressEvent, closeOnPressOutside);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement2(domReference)) {
        ancestors = getOverflowAncestors(domReference);
      }
      if (isElement2(floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(floating));
      }
      if (!isElement2(reference) && reference && reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      escapeKey && doc.removeEventListener("keydown", closeOnEscapeKeyDown);
      outsidePress && doc.removeEventListener(outsidePressEvent, closeOnPressOutside);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
    };
  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, closeOnPressOutside]);
  React2.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onKeyDown: closeOnEscapeKeyDown,
        [bubbleHandlerKeys[referencePressEvent]]: (event) => {
          if (referencePress) {
            events.emit("dismiss", {
              type: "referencePress",
              data: {
                returnFocus: false
              }
            });
            onOpenChange(false, event.nativeEvent);
          }
        }
      },
      floating: {
        onKeyDown: closeOnEscapeKeyDown,
        [captureHandlerKeys[outsidePressEvent]]: () => {
          insideReactTreeRef.current = true;
        }
      }
    };
  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);
}
function useFloating2(options) {
  var _options$elements;
  if (options === void 0) {
    options = {};
  }
  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options;
  const [_domReference, setDomReference] = React2.useState(null);
  const domReference = ((_options$elements = options.elements) == null ? void 0 : _options$elements.reference) || _domReference;
  const position = useFloating(options);
  const tree = useFloatingTree();
  const onOpenChange = useEffectEvent((open2, event) => {
    if (open2) {
      dataRef.current.openEvent = event;
    }
    unstable_onOpenChange == null ? void 0 : unstable_onOpenChange(open2, event);
  });
  const domReferenceRef = React2.useRef(null);
  const dataRef = React2.useRef({});
  const events = React2.useState(() => createPubSub())[0];
  const floatingId = useId();
  const setPositionReference = React2.useCallback((node) => {
    const positionReference = isElement2(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    position.refs.setReference(positionReference);
  }, [position.refs]);
  const setReference = React2.useCallback((node) => {
    if (isElement2(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement2(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement2(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React2.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React2.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const context = React2.useMemo(() => ({
    ...position,
    refs,
    elements,
    dataRef,
    nodeId,
    floatingId,
    events,
    open,
    onOpenChange
  }), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);
  index2(() => {
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React2.useMemo(() => ({
    ...position,
    context,
    refs,
    elements
  }), [position, refs, elements, context]);
}
function useFocus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    refs,
    elements: {
      floating,
      domReference
    }
  } = context;
  const {
    enabled = true,
    keyboardOnly = true
  } = props;
  const pointerTypeRef = React2.useRef("");
  const blockFocusRef = React2.useRef(false);
  const timeoutRef = React2.useRef();
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    const doc = getDocument(floating);
    const win = doc.defaultView || window;
    function onBlur() {
      if (!open && isHTMLElement2(domReference) && domReference === activeElement(getDocument(domReference))) {
        blockFocusRef.current = true;
      }
    }
    win.addEventListener("blur", onBlur);
    return () => {
      win.removeEventListener("blur", onBlur);
    };
  }, [floating, domReference, open, enabled]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss(payload) {
      if (payload.type === "referencePress" || payload.type === "escapeKey") {
        blockFocusRef.current = true;
      }
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [events, enabled]);
  React2.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onPointerDown(_ref) {
          let {
            pointerType
          } = _ref;
          pointerTypeRef.current = pointerType;
          blockFocusRef.current = !!(pointerType && keyboardOnly);
        },
        onMouseLeave() {
          blockFocusRef.current = false;
        },
        onFocus(event) {
          var _dataRef$current$open;
          if (blockFocusRef.current) {
            return;
          }
          if (event.type === "focus" && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === "mousedown" && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
            return;
          }
          onOpenChange(true, event.nativeEvent);
        },
        onBlur(event) {
          blockFocusRef.current = false;
          const relatedTarget = event.relatedTarget;
          const movedToFocusGuard = isElement2(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
          timeoutRef.current = setTimeout(() => {
            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
              return;
            }
            onOpenChange(false, event.nativeEvent);
          });
        }
      }
    };
  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...userProps,
    ...propsList.map((value) => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const deps = propsList;
  const getReferenceProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getFloatingProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getItemProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "item"),
    // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key) => key == null ? void 0 : key.item)
  );
  return React2.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
function useMergeRefs(refs) {
  return React2.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
function useRole(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const referenceId = useId();
  return React2.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      role
    };
    if (!enabled) {
      return {};
    }
    if (role === "tooltip") {
      return {
        reference: {
          "aria-describedby": open ? floatingId : void 0
        },
        floating: floatingProps
      };
    }
    return {
      reference: {
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": role === "alertdialog" ? "dialog" : role,
        "aria-controls": open ? floatingId : void 0,
        ...role === "listbox" && {
          role: "combobox"
        },
        ...role === "menu" && {
          id: referenceId
        }
      },
      floating: {
        ...floatingProps,
        ...role === "menu" && {
          "aria-labelledby": referenceId
        }
      }
    };
  }, [enabled, role, open, floatingId, referenceId]);
}
function isPointInPolygon(point, polygon) {
  const [x12, y6] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i49 = 0, j9 = length - 1; i49 < length; j9 = i49++) {
    const [xi, yi] = polygon[i49] || [0, 0];
    const [xj, yj] = polygon[j9] || [0, 0];
    const intersect = yi >= y6 !== yj >= y6 && x12 <= (xj - xi) * (y6 - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    buffer = 0.5,
    blockPointerEvents = false,
    requireIntent = true
  } = options;
  let timeoutId2;
  let hasLanded = false;
  let lastX = null;
  let lastY = null;
  let lastCursorTime = performance.now();
  function getCursorSpeed(x12, y6) {
    const currentTime = performance.now();
    const elapsedTime = currentTime - lastCursorTime;
    if (lastX === null || lastY === null || elapsedTime === 0) {
      lastX = x12;
      lastY = y6;
      lastCursorTime = currentTime;
      return null;
    }
    const deltaX = x12 - lastX;
    const deltaY = y6 - lastY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const speed = distance / elapsedTime;
    lastX = x12;
    lastY = y6;
    lastCursorTime = currentTime;
    return speed;
  }
  const fn = (_ref) => {
    let {
      x: x12,
      y: y6,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId2);
        onClose();
      }
      clearTimeout(timeoutId2);
      if (!elements.domReference || !elements.floating || placement == null || x12 == null || y6 == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x12 > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y6 > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      const isFloatingWider = rect.width > refRect.width;
      const isFloatingTaller = rect.height > refRect.height;
      const left = (isFloatingWider ? refRect : rect).left;
      const right = (isFloatingWider ? refRect : rect).right;
      const top = (isFloatingTaller ? refRect : rect).top;
      const bottom = (isFloatingTaller ? refRect : rect).bottom;
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement2(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context
        } = _ref2;
        return context == null ? void 0 : context.open;
      })) {
        return;
      }
      if (side === "top" && y6 >= refRect.bottom - 1 || side === "bottom" && y6 <= refRect.top + 1 || side === "left" && x12 >= refRect.right - 1 || side === "right" && x12 <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
          break;
        case "bottom":
          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
          break;
        case "left":
          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
          break;
        case "right":
          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
          break;
      }
      function getPolygon(_ref3) {
        let [x13, y7] = _ref3;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x13 + buffer / 2 : cursorLeaveFromRight ? x13 + buffer * 4 : x13 - buffer * 4, y7 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x13 - buffer / 2 : cursorLeaveFromRight ? x13 + buffer * 4 : x13 - buffer * 4, y7 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x13 + buffer / 2 : cursorLeaveFromRight ? x13 + buffer * 4 : x13 - buffer * 4, y7 - buffer];
            const cursorPointTwo = [isFloatingWider ? x13 - buffer / 2 : cursorLeaveFromRight ? x13 + buffer * 4 : x13 - buffer * 4, y7 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x13 + buffer + 1, isFloatingTaller ? y7 + buffer / 2 : cursorLeaveFromBottom ? y7 + buffer * 4 : y7 - buffer * 4];
            const cursorPointTwo = [x13 + buffer + 1, isFloatingTaller ? y7 - buffer / 2 : cursorLeaveFromBottom ? y7 + buffer * 4 : y7 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x13 - buffer, isFloatingTaller ? y7 + buffer / 2 : cursorLeaveFromBottom ? y7 + buffer * 4 : y7 - buffer * 4];
            const cursorPointTwo = [x13 - buffer, isFloatingTaller ? y7 - buffer / 2 : cursorLeaveFromBottom ? y7 + buffer * 4 : y7 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      if (isPointInPolygon([clientX, clientY], rectPoly)) {
        return;
      } else if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isLeave && requireIntent) {
        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
        const cursorSpeedThreshold = 0.1;
        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
          return close();
        }
      }
      if (!isPointInPolygon([clientX, clientY], getPolygon([x12, y6]))) {
        close();
      } else if (!hasLanded && requireIntent) {
        timeoutId2 = window.setTimeout(close, 40);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}

// node_modules/@rewind-ui/core/dist/components/Fader/Fader.js
var a12 = (0, import_react11.forwardRef)((t123, a60) => {
  const l40 = (0, import_react11.useRef)(null), { children: s59, fadeInDuration: c55 = 250, fadeOutDuration: d33 = 250, isActive: u29 = false, isShown: f19 = false, method: y6 = "hide" } = t123, p31 = (0, import_react11.useRef)(true), [m56, h16] = (0, import_react11.useState)(true), b9 = useMergeRefs([a60 || null, l40]);
  return (0, import_react11.useEffect)(() => {
    const i49 = l40.current;
    if (!i49)
      return;
    if (!u29)
      return i49.style.opacity = f19 ? "1" : "0", void (i49.style.display = f19 ? "block" : "none");
    if (h16(true), p31.current)
      return i49.style.opacity = f19 ? "1" : "0", i49.style.display = f19 ? "block" : "none", void (p31.current = false);
    i49.style.display = "block";
    const t124 = f19 ? { duration: c55, easing: "linear", fill: "forwards" } : { duration: d33, easing: "linear", fill: "forwards" }, e114 = f19 ? [{ opacity: 0 }, { opacity: 1 }] : [{ opacity: 1 }, { opacity: 0 }];
    i49.animate(e114, t124).onfinish = () => {
      i49.style.display = f19 ? "block" : "none", "unmount" !== y6 || f19 || h16(false);
    };
  }, [u29, f19, c55, d33, y6]), (0, import_jsx_runtime8.jsx)("div", Object.assign({ ref: b9, className: "w-full" }, { children: m56 && s59 }));
});
a12.displayName = "Fader";

// node_modules/@rewind-ui/core/dist/icons/Error.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var c3 = () => (0, import_jsx_runtime9.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime9.jsx)("path", { d: "M209 175c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l47 47-47 47c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47 47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-47-47 47-47c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47-47-47z" }), (0, import_jsx_runtime9.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Info.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var s10 = () => (0, import_jsx_runtime10.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime10.jsx)("path", { d: "M256 128a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM192 248c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h24V272H216c-13.3 0-24-10.7-24-24z" }), (0, import_jsx_runtime10.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Question.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var t18 = () => (0, import_jsx_runtime11.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime11.jsx)("path", { d: "M222.6 128c-23.7 0-44.8 14.9-52.8 37.3l-.4 1.2c-4.4 12.5 2.1 26.2 14.6 30.6s26.2-2.1 30.6-14.6l.4-1.2c1.1-3.2 4.2-5.3 7.5-5.3h58.3c8.4 0 15.1 6.8 15.1 15.1c0 5.4-2.9 10.4-7.6 13.1l-44.3 25.4c-7.5 4.3-12.1 12.2-12.1 20.8V264c0 13.3 10.7 24 24 24c13.1 0 23.8-10.5 24-23.6l32.3-18.5c19.6-11.3 31.7-32.2 31.7-54.8c0-34.9-28.3-63.1-63.1-63.1H222.6zM256 384a32 32 0 1 0 0-64 32 32 0 1 0 0 64z" }), (0, import_jsx_runtime11.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Success.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var e16 = () => (0, import_jsx_runtime12.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime12.jsx)("path", { d: "M369 175c9.4 9.4 9.4 24.6 0 33.9L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0z" }), (0, import_jsx_runtime12.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Warning.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var s11 = () => (0, import_jsx_runtime13.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime13.jsx)("path", { d: "M280 184c0-13.3-10.7-24-24-24s-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184zM256 416a32 32 0 1 0 0-64 32 32 0 1 0 0 64z" }), (0, import_jsx_runtime13.jsx)("path", { style: { opacity: 0.25 }, d: "M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z" })] }));

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var import_react13 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/icons/XMark.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var o19 = ({ className: o103 }) => (0, import_jsx_runtime14.jsxs)("svg", Object.assign({ className: o103, xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", strokeWidth: "2", stroke: "currentColor", fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, { children: [(0, import_jsx_runtime14.jsx)("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), (0, import_jsx_runtime14.jsx)("path", { d: "M18 6l-12 12" }), (0, import_jsx_runtime14.jsx)("path", { d: "M6 6l12 12" })] }));

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var u2 = { accent: "none", color: "dark", dismissable: false, dismissableAnimation: true, radius: "md", shadow: "none", shadowColor: "none", size: "sm", tone: "light" };
var g2 = { error: (0, import_jsx_runtime15.jsx)(c3, {}), info: (0, import_jsx_runtime15.jsx)(s10, {}), question: (0, import_jsx_runtime15.jsx)(t18, {}), success: (0, import_jsx_runtime15.jsx)(e16, {}), warning: (0, import_jsx_runtime15.jsx)(s11, {}) };
var w = (0, import_react13.forwardRef)((r107, a60) => {
  const n83 = d5("Alert", r107.variant), t123 = q("Alert"), c55 = Object.assign(Object.assign(Object.assign({}, u2), n83), r107), { accent: p31, children: w9, className: N2 = "", color: O6, dismissable: v7, dismissableAnimation: z3 = false, icon: A2, iconType: C3, radius: x12, shadow: W2, shadowColor: k4, size: y6, title: I, tone: F2, variant: S2 } = c55, T2 = __rest(c55, ["accent", "children", "className", "color", "dismissable", "dismissableAnimation", "icon", "iconType", "radius", "shadow", "shadowColor", "size", "title", "tone", "variant"]), [q3, E] = (0, import_react13.useState)(true), M3 = (0, import_react13.useMemo)(() => twMerge(t123.base({ accent: p31, className: N2, color: O6, radius: x12, shadow: W2, shadowColor: k4, size: y6, tone: F2 })), [t123, p31, N2, O6, x12, W2, k4, y6, F2]), P3 = t15(r107.id), Q2 = (0, import_jsx_runtime15.jsxs)("div", Object.assign({ id: P3, role: "alert", ref: a60, className: M3 }, T2, { children: [(A2 || C3) && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t123.iconWrapper() }, { children: C3 ? g2[C3] : A2 })), (0, import_jsx_runtime15.jsxs)("div", Object.assign({ className: t123.infoWrapper({ size: y6 }) }, { children: [I && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t123.title({ size: y6, color: O6, tone: F2 }) }, { children: I })), w9 && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t123.text() }, { children: w9 }))] })), v7 && (0, import_jsx_runtime15.jsx)("button", Object.assign({ title: "Close alert", className: t123.iconWrapper(), onClick: () => E(false) }, { children: (0, import_jsx_runtime15.jsx)(o19, { className: t123.dismissIcon({ size: y6 }) }) }))] }));
  return (0, import_jsx_runtime15.jsx)(a12, Object.assign({ ref: a60, isActive: z3, isShown: q3, method: "unmount" }, { children: Q2 }));
});
w.displayName = "Alert";

// node_modules/@rewind-ui/core/dist/components/Avatar/Avatar.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Avatar/AvatarGroup/AvatarGroup.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var import_react14 = __toESM(require_react());
var m4 = (0, import_react14.forwardRef)((a60, m56) => {
  const i49 = q("Avatar"), o103 = Object.assign({}, a60), { children: c55, className: l40 = "" } = o103, n83 = __rest(o103, ["children", "className"]), p31 = t15(a60.id);
  return (0, import_jsx_runtime16.jsx)("div", Object.assign({ id: p31, ref: m56, className: i49.group({ className: l40 }) }, n83, { children: c55 }));
});
m4.displayName = "AvatarGroup";

// node_modules/@rewind-ui/core/dist/components/Avatar/Avatar.js
var import_react15 = __toESM(require_react());
var m5 = { color: "gray", outlined: true, radius: "full", shadow: "none", shadowColor: "none", size: "lg", status: "none", statusPosition: "bottom-right", tone: "solid" };
var u3 = (0, import_react15.forwardRef)((a60, e114) => {
  const u29 = q("Avatar"), c55 = Object.assign(Object.assign({}, m5), a60), { alt: p31, children: h16, className: f19 = "", color: g17, initials: w9 = "", outlined: j9, radius: b9, shadow: N2, shadowColor: v7, size: z3, src: A2, status: C3, statusPosition: O6, tone: P3 } = c55, x12 = __rest(c55, ["alt", "children", "className", "color", "initials", "outlined", "radius", "shadow", "shadowColor", "size", "src", "status", "statusPosition", "tone"]), [G3, y6] = (0, import_react15.useState)(false), E = (0, import_react15.useMemo)(() => twMerge(u29.base({ className: f19, color: g17, radius: b9, shadow: N2, shadowColor: v7, size: z3, tone: P3, outlined: j9 })), [u29, f19, g17, b9, N2, v7, z3, P3, j9]), I = t15(a60.id);
  return (0, import_jsx_runtime17.jsxs)("div", Object.assign({ id: I, ref: e114, className: E }, x12, { children: [A2 && !G3 && (0, import_jsx_runtime17.jsx)("img", { onError: () => y6(true), className: u29.image({ radius: b9 }), src: A2, alt: p31 || w9 }), (!A2 || A2 && G3) && w9, "none" !== C3 && (0, import_jsx_runtime17.jsx)("span", { className: u29.status({ radius: b9, status: C3, size: z3, position: O6 }) })] }));
});
u3.displayName = "Avatar";
var c8 = Object.assign(u3, { Group: m4 });

// node_modules/@rewind-ui/core/dist/components/Badge/Badge.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());
var n12 = { color: "dark", radius: "md", shadow: "none", shadowColor: "none", size: "sm", tone: "solid" };
var m6 = (0, import_react16.forwardRef)((t123, m56) => {
  const c55 = d5("Badge", t123.variant), l40 = q("Badge"), h16 = Object.assign(Object.assign(Object.assign({}, n12), c55), t123), { children: p31, className: f19 = "", color: u29, radius: w9, shadow: g17, shadowColor: j9, size: b9, tone: N2, variant: v7 } = h16, x12 = __rest(h16, ["children", "className", "color", "radius", "shadow", "shadowColor", "size", "tone", "variant"]), z3 = (0, import_react16.useMemo)(() => twMerge(l40({ className: f19, color: u29, radius: w9, shadow: g17, shadowColor: j9, size: b9, tone: N2 })), [l40, f19, u29, w9, g17, j9, b9, N2]), C3 = t15(t123.id);
  return (0, import_jsx_runtime18.jsx)("span", Object.assign({ id: C3, ref: m56, className: z3 }, x12, { children: p31 }));
});
m6.displayName = "Badge";

// node_modules/@rewind-ui/core/dist/components/Button/Button.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-independent-context.hook.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_react17 = __toESM(require_react());
function i7() {
  const i49 = (0, import_react17.createContext)({});
  return [({ children: e114, value: t123 }) => (0, import_jsx_runtime19.jsx)(i49.Provider, Object.assign({ value: t123 }, { children: e114 })), () => (0, import_react17.useContext)(i49)];
}

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.context.js
var [e22, t25] = i7();

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.context.js
var [e23, t26] = i7();

// node_modules/@rewind-ui/core/dist/components/Spinner/Spinner.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var a14 = (a60) => {
  const o103 = q("Spinner"), { size: c55 = "sm", className: i49 = "" } = a60, m56 = twMerge(o103({ size: c55, className: i49 }));
  return (0, import_jsx_runtime20.jsxs)("svg", Object.assign({ className: m56, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24" }, { children: [(0, import_jsx_runtime20.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }), (0, import_jsx_runtime20.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })] }));
};
a14.displayName = "Spinner";

// node_modules/@rewind-ui/core/dist/components/Button/Button.js
var import_react18 = __toESM(require_react());
var h3 = { animation: "none", color: "dark", disabled: false, icon: false, loading: false, radius: "md", shadow: "none", shadowColor: "none", size: "md", tone: "solid", withRing: true };
var u4 = (0, import_react18.forwardRef)((c55, u29) => {
  const b9 = d5("Button", c55.variant), w9 = q("Button"), g17 = Object.assign(Object.assign(Object.assign(Object.assign({}, h3), t26()), b9), c55), { animation: j9, as: f19, children: v7, className: N2 = "", color: x12, disabled: z3, icon: C3, loading: O6, radius: R2, shadow: y6, shadowColor: B, size: D, tone: I, variant: G3, withRing: S2 } = g17, k4 = __rest(g17, ["animation", "as", "children", "className", "color", "disabled", "icon", "loading", "radius", "shadow", "shadowColor", "size", "tone", "variant", "withRing"]), { open: P3, withChevron: q3, chevronRotation: A2 } = Object.assign({}, t25()), E = (0, import_react18.useMemo)(() => twMerge(w9.base({ animation: j9, className: N2, color: x12, disabled: z3, icon: C3, loading: O6, radius: R2, shadow: y6, shadowColor: B, size: D, tone: I, withRing: S2 })), [j9, N2, x12, z3, C3, O6, R2, y6, B, D, w9, I, S2]), F2 = q3 ? w9.chevron({ open: P3, size: D, chevronRotation: A2 }) : "", H2 = O6 ? w9.spinner({ size: D }) : "", J2 = f19 || "button", K2 = t15(c55.id), L = c55.type || "button" === J2 ? "button" : void 0;
  return (0, import_jsx_runtime21.jsxs)(J2, Object.assign({ id: K2, ref: u29, type: L, className: E, disabled: z3 || O6, "aria-disabled": z3 || O6 }, k4, { children: [O6 && (0, import_jsx_runtime21.jsx)(a14, { className: H2 }), v7, q3 && (0, import_jsx_runtime21.jsx)(n6, { className: F2 })] }));
});
u4.displayName = "Button";

// node_modules/@rewind-ui/core/dist/components/Card/Card.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Card/CardBody/CardBody.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Card/Card.context.js
var [e25, n14] = t("Card compound components cannot be rendered outside the Card component");

// node_modules/@rewind-ui/core/dist/components/Card/CardBody/CardBody.js
var import_react19 = __toESM(require_react());
var d6 = (0, import_react19.forwardRef)((o103, d33) => {
  const c55 = q("Card"), { children: l40, className: n83 = "" } = o103, p31 = __rest(o103, ["children", "className"]), { size: f19, withDivider: h16 } = n14(), j9 = t15(o103.id), N2 = (0, import_react19.useMemo)(() => twMerge(c55.body({ className: n83, size: f19, withDivider: h16 })), [c55, n83, f19, h16]);
  return (0, import_jsx_runtime22.jsx)("div", Object.assign({ id: j9, ref: d33, className: N2 }, p31, { children: l40 }));
});
d6.displayName = "CardBody";

// node_modules/@rewind-ui/core/dist/components/Card/CardFooter/CardFooter.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var import_react20 = __toESM(require_react());
var c10 = (0, import_react20.forwardRef)((s59, c55) => {
  const d33 = q("Card"), { children: l40, className: n83 = "" } = s59, p31 = __rest(s59, ["children", "className"]), { size: f19, radius: u29 } = n14(), h16 = t15(s59.id), j9 = (0, import_react20.useMemo)(() => twMerge(d33.footer({ className: n83, radius: u29, size: f19 })), [d33, n83, u29, f19]);
  return (0, import_jsx_runtime23.jsx)("div", Object.assign({ id: h16, ref: c55, className: j9 }, p31, { children: l40 }));
});
c10.displayName = "CardFooter";

// node_modules/@rewind-ui/core/dist/components/Card/CardHeader/CardHeader.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_react21 = __toESM(require_react());
var d7 = (0, import_react21.forwardRef)((m56, d33) => {
  const n83 = q("Card"), { children: l40, actions: p31, className: f19 = "" } = m56, h16 = __rest(m56, ["children", "actions", "className"]), { size: j9, radius: u29 } = n14(), N2 = t15(m56.id), x12 = (0, import_react21.useMemo)(() => twMerge(n83.header({ className: f19, radius: u29, size: j9 })), [n83, f19, u29, j9]);
  return (0, import_jsx_runtime24.jsxs)("div", Object.assign({ id: N2, ref: d33, className: x12 }, h16, { children: [l40, p31 && (0, import_jsx_runtime24.jsx)("div", Object.assign({ className: "flex" }, { children: p31 }))] }));
});
d7.displayName = "CardHeader";

// node_modules/@rewind-ui/core/dist/components/Card/CardImage/CardImage.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Image/Image.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_react22 = __toESM(require_react());
var c11 = { fit: "contain", height: "auto", loading: "lazy", mode: "dark", radius: "none", width: "100%" };
var d8 = (0, import_react22.forwardRef)((r107, d33) => {
  const l40 = q("Image"), n83 = Object.assign(Object.assign({}, c11), r107), { alt: g17 = "", caption: p31, children: h16, wrapperClassName: f19 = "", className: u29 = "", fit: N2, radius: w9, src: j9, width: b9, height: O6, imageRef: x12, loading: I, mode: y6 } = n83, C3 = __rest(n83, ["alt", "caption", "children", "wrapperClassName", "className", "fit", "radius", "src", "width", "height", "imageRef", "loading", "mode"]), R2 = t15(r107.id), k4 = (0, import_react22.useMemo)(() => twMerge(l40.base({ className: u29, fit: N2, radius: w9 })), [l40, u29, N2, w9]);
  return (0, import_jsx_runtime25.jsxs)("div", Object.assign({ id: R2, ref: d33, className: twMerge(l40.wrapper({ className: f19 })) }, C3, { children: [(0, import_jsx_runtime25.jsx)("img", { className: k4, src: j9, alt: g17, height: O6, width: b9, loading: I, ref: x12 }), p31 && (0, import_jsx_runtime25.jsx)("figcaption", Object.assign({ className: l40.caption({ mode: y6 }) }, { children: p31 }))] }));
});
d8.displayName = "Image";

// node_modules/@rewind-ui/core/dist/components/Card/CardImage/CardImage.js
var import_react23 = __toESM(require_react());
var i10 = (0, import_react23.forwardRef)((s59, i49) => {
  const c55 = q("Card"), { caption: d33, children: p31, src: l40, alt: n83 = "", className: f19 = "", mode: g17 = "light" } = s59, j9 = __rest(s59, ["caption", "children", "src", "alt", "className", "mode"]), { radius: u29 } = n14(), h16 = t15(s59.id), x12 = c55.image({ radius: u29 });
  return (0, import_jsx_runtime26.jsx)(d8, Object.assign({ id: h16, ref: i49, className: x12, src: l40, alt: n83, caption: d33, mode: g17 }, j9));
});
i10.displayName = "CardImage";

// node_modules/@rewind-ui/core/dist/components/Card/Card.js
var import_react24 = __toESM(require_react());
var h4 = { bordered: true, color: "white", radius: "base", shadow: "sm", size: "base", withDivider: true };
var p5 = (0, import_react24.forwardRef)((i49, o103) => {
  const s59 = q("Card"), a60 = Object.assign(Object.assign({}, h4), i49), { bordered: m56, children: p31, className: b9 = "", color: f19, radius: j9, shadow: u29, size: w9, withDivider: C3 } = a60, g17 = __rest(a60, ["bordered", "children", "className", "color", "radius", "shadow", "size", "withDivider"]), v7 = t15(i49.id), D = { radius: j9, size: w9, withDivider: C3 }, N2 = (0, import_react24.useMemo)(() => twMerge(s59.base({ bordered: m56, className: b9, color: f19, radius: j9, shadow: u29, withDivider: C3 })), [m56, b9, f19, j9, u29, C3, s59]);
  return (0, import_jsx_runtime27.jsx)(e25, Object.assign({ value: D }, { children: (0, import_jsx_runtime27.jsx)("div", Object.assign({ id: v7, ref: o103, className: N2 }, g17, { children: p31 })) }));
});
p5.displayName = "Card";
var b = Object.assign(p5, { Header: d7, Image: i10, Body: d6, Footer: c10 });

// node_modules/@rewind-ui/core/dist/components/Checkbox/Checkbox.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_react25 = __toESM(require_react());
var c13 = { color: "dark", disabled: false, radius: "md", size: "md", tone: "solid", withRing: true };
var o23 = (0, import_react25.forwardRef)((r107, o103) => {
  const m56 = q("Checkbox"), n83 = Object.assign(Object.assign({}, c13), r107), { children: b9, className: N2 = "", color: p31, disabled: h16, radius: g17, size: j9, tone: u29, withRing: f19, label: C3, labelClassName: O6 = "", description: x12, descriptionClassName: z3 = "", error: v7, errorClassName: w9 = "" } = n83, k4 = __rest(n83, ["children", "className", "color", "disabled", "radius", "size", "tone", "withRing", "label", "labelClassName", "description", "descriptionClassName", "error", "errorClassName"]), y6 = t15(r107.id), R2 = v7 ? "invalid" : "valid", $2 = (0, import_react25.useMemo)(() => twMerge(m56.base({ className: N2, color: p31, radius: g17, size: j9, tone: u29, validation: R2, withRing: f19 })), [m56, p31, u29, j9, g17, R2, f19, N2]);
  return (0, import_jsx_runtime28.jsxs)("div", Object.assign({ className: "flex items-center" }, { children: [(0, import_jsx_runtime28.jsx)("input", Object.assign({ id: y6, ref: o103, type: "checkbox", "aria-labelledby": `${y6}-label`, className: $2, disabled: h16 }, k4)), (0, import_jsx_runtime28.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime28.jsx)("label", Object.assign({ id: `${y6}-label`, htmlFor: y6, className: twMerge(m56.label({ disabled: h16, size: j9, className: O6 })) }, { children: C3 })), x12 && (0, import_jsx_runtime28.jsx)("span", Object.assign({ className: twMerge(m56.description({ disabled: h16, size: j9, className: z3 })) }, { children: x12 })), v7 && (0, import_jsx_runtime28.jsx)("span", Object.assign({ className: twMerge(m56.error({ disabled: h16, size: j9, className: w9 })) }, { children: v7 }))] }))] }));
});
o23.displayName = "Checkbox";

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxGroup/ComboboxGroup.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.context.js
var [e30, t29] = i7();

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxGroup/ComboboxGroup.js
var import_react27 = __toESM(require_react());
var g3 = { weight: "normal" };
var u5 = (0, import_react27.forwardRef)((n83, u29) => {
  const b9 = q("Combobox"), f19 = Object.assign(Object.assign({}, g3), n83), { children: j9, className: x12, heading: N2, weight: O6 } = f19, w9 = __rest(f19, ["children", "className", "heading", "weight"]), C3 = t15(n83.id), v7 = (0, import_react27.useRef)(null), z3 = useMergeRefs([v7, u29 || null]), [y6, A2] = (0, import_react27.useState)(false), { search: G3, size: I, mode: P3 } = t29(), [k4, q3] = (0, import_react27.useState)(null), [B, D] = (0, import_react27.useState)(""), [E, F2] = (0, import_react27.useState)(0);
  return (0, import_react27.useEffect)(() => {
    F2(0), q3(import_react27.Children.map(j9, (e114) => (0, import_react27.cloneElement)(e114, Object.assign(Object.assign({}, e114.props), { ref: (e115) => {
      e115 && "true" === (null == e115 ? void 0 : e115.getAttribute("aria-hidden")) && F2((e116) => e116 + 1);
    } }))));
  }, [G3]), (0, import_react27.useEffect)(() => {
    A2(E === import_react27.Children.count(j9));
  }, [j9, E]), (0, import_react27.useEffect)(() => {
    D(b9.group({ className: x12, hidden: y6, size: I, mode: P3, weight: O6 }));
  }, [x12, y6, P3, I, b9, O6]), (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [(0, import_jsx_runtime29.jsx)("div", Object.assign({ id: C3, ref: z3, "aria-hidden": y6, className: B }, w9, { children: N2 })), k4] });
});
u5.displayName = "ComboboxGroup";

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxOption/ComboboxOption.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/helpers/text-normalize.utility.js
function r23(r107) {
  return r107.trim().normalize("NFD").replace(/\p{Diacritic}/gu, "").toLowerCase();
}

// node_modules/@rewind-ui/core/dist/icons/Check.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var t31 = ({ className: t123 }) => (0, import_jsx_runtime30.jsx)("svg", Object.assign({ className: t123, xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", fill: "none", viewBox: "0 0 256 256" }, { children: (0, import_jsx_runtime30.jsx)("path", { d: "M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z" }) }));

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxOption/ComboboxOption.js
var import_react28 = __toESM(require_react());
var n16 = (0, import_react28.forwardRef)((r107, n83) => {
  const c55 = q("ComboboxOption"), { value: m56, label: p31, description: b9, media: u29 } = r107, h16 = !!r107.disabled, j9 = t15(r107.id), { externalSearch: f19, mode: x12, optionColor: C3, radius: N2, search: O6, selectedValue: g17, setSelectedLabel: z3, setSelectedValue: v7, size: S2 } = t29(), k4 = r23(O6 || ""), y6 = r23(p31 || ""), V = r23(b9 || ""), W2 = !f19 && !y6.includes(k4) && !V.includes(k4), I = g17 === m56 && !h16;
  return (0, import_react28.useEffect)(() => {
    g17 !== m56 || h16 || z3(p31);
  }, [g17]), (0, import_jsx_runtime31.jsxs)("button", Object.assign({ id: j9, ref: n83, className: c55.button({ optionColor: C3, radius: N2, selected: I, hidden: W2, size: S2, mode: x12 }), "aria-hidden": W2, disabled: h16, "aria-disabled": h16, onClick: () => {
    g17 === m56 ? (v7(null), z3(null)) : (v7(m56), z3(p31));
  } }, { children: [(0, import_jsx_runtime31.jsxs)("div", Object.assign({ className: c55.optionWrapper() }, { children: [u29, (0, import_jsx_runtime31.jsxs)("div", Object.assign({ className: c55.infoWrapper() }, { children: [(0, import_jsx_runtime31.jsx)("span", Object.assign({ className: c55.label({ disabled: h16, selected: I }) }, { children: p31 })), (0, import_jsx_runtime31.jsx)("span", Object.assign({ className: c55.description({ disabled: h16, selected: I }) }, { children: b9 }))] }))] })), I && (0, import_jsx_runtime31.jsx)(t31, { className: c55.icon({ size: S2 }) })] }));
});
n16.displayName = "ComboboxOption";

// node_modules/@rewind-ui/core/dist/components/Combobox/use-combobox.hook.js
var import_react30 = __toESM(require_react());
function l14({ offset: l40 = 5 }) {
  const [m56, u29] = (0, import_react30.useState)(false), { x: x12, y: y6, refs: P3, strategy: d33, context: F2 } = useFloating2({ open: m56, onOpenChange: u29, placement: "bottom-start", middleware: [offset(l40), shift(), inline(), flip()], whileElementsMounted: autoUpdate }), { getReferenceProps: R2, getFloatingProps: b9 } = useInteractions([useFocus(F2), useDismiss(F2, { escapeKey: false, referencePress: false }), useRole(F2, { role: "listbox" })]);
  return (0, import_react30.useMemo)(() => ({ x: x12, y: y6, reference: P3.setReference, floating: P3.setFloating, strategy: d33, getFloatingProps: b9(), getReferenceProps: R2(), open: m56, setOpen: u29 }), [P3, b9, R2, m56, d33, x12, y6]);
}

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.context.js
var [e32, t32] = i7();

// node_modules/@rewind-ui/core/dist/hooks/use-keypress.js
var import_react31 = __toESM(require_react());
function r25(r107, n83, t123) {
  (0, import_react31.useEffect)(() => {
    if (!n83)
      return;
    const e114 = (e115) => {
      e115.key === r107 && t123 && (t123(e115), "ArrowDown" !== e115.key && "ArrowUp" !== e115.key || e115.preventDefault());
    };
    return document.addEventListener("keydown", e114), () => {
      document.removeEventListener("keydown", e114);
    };
  }, [r107, t123, n83]);
}

// node_modules/@rewind-ui/core/dist/hooks/use-vertical-arrows.hook.js
function o25(o103 = [], i49 = true) {
  r25("ArrowDown", i49, () => {
    var n83, e114;
    if (!i49 || !(null == o103 ? void 0 : o103.length))
      return;
    const t123 = document.activeElement;
    if (!t123)
      return void (null === (n83 = o103[0]) || void 0 === n83 || n83.focus());
    const d33 = o103.findIndex((n84) => n84.id === t123.id), r107 = o103[d33 + 1] ? d33 + 1 : 0;
    null === (e114 = o103[r107]) || void 0 === e114 || e114.focus();
  }), r25("ArrowUp", i49, () => {
    var n83, e114;
    if (!i49 || !(null == o103 ? void 0 : o103.length))
      return;
    const t123 = document.activeElement;
    if (!t123)
      return void (null === (n83 = o103[0]) || void 0 === n83 || n83.focus());
    const d33 = o103.findIndex((n84) => n84.id === t123.id), r107 = o103[d33 - 1] ? d33 - 1 : o103.length - 1;
    null === (e114 = o103[r107]) || void 0 === e114 || e114.focus();
  });
}

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var import_react33 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/icons/CaretUpDown.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var l15 = ({ className: l40 }) => (0, import_jsx_runtime32.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: l40, width: "32", height: "32", fill: "#000000", viewBox: "0 0 256 256" }, { children: (0, import_jsx_runtime32.jsx)("path", { d: "M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z" }) }));

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var w2 = { clearable: true, closeOnEscape: true, color: "dark", disabled: false, loading: false, maxHeight: 250, minWidth: 250, mode: "spacey", offset: 5, optionColor: "gray", radius: "md", searchable: true, shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var z = (0, import_react33.forwardRef)((a60, r107) => {
  const f19 = q("Combobox"), z3 = Object.assign(Object.assign(Object.assign(Object.assign({}, w2), t32()), t26()), a60), { children: k4, className: I, clearable: S2, closeOnEscape: E, color: R2, controlId: W2, initialValue: G3, leftIcon: H2, loading: L, maxHeight: P3, minWidth: V, mode: F2, offset: $2, onChange: q3, onSearch: A2, optionColor: B, placeholder: D, radius: M3, searchable: T2, shadow: U, size: X2, tone: J2, validation: K2, value: Q2, withRing: Y2 } = z3, Z2 = __rest(z3, ["children", "className", "clearable", "closeOnEscape", "color", "controlId", "initialValue", "leftIcon", "loading", "maxHeight", "minWidth", "mode", "offset", "onChange", "onSearch", "optionColor", "placeholder", "radius", "searchable", "shadow", "size", "tone", "validation", "value", "withRing"]), _2 = t15(a60.id), ee = (0, import_react33.useId)(), oe = t15(W2), te = a60.disabled || L, ae = !!H2, [re, se] = (0, import_react33.useState)(""), [ie, ne] = (0, import_react33.useState)(false), [le, ce] = (0, import_react33.useState)(G3), [de, me] = (0, import_react33.useState)(""), [pe, ue] = (0, import_react33.useState)([]), [he, be] = (0, import_react33.useState)(""), [fe, ge] = (0, import_react33.useState)(""), [je, ve] = (0, import_react33.useState)(null), xe = (0, import_react33.useRef)(true), Oe = (0, import_react33.useRef)(null), Ce = (0, import_react33.useRef)(null), Ne = (0, import_react33.useRef)(null), ye = { externalSearch: !!A2, mode: F2, optionColor: B, radius: M3, search: re, selectedLabel: de, selectedValue: le, setSearch: se, setSelectedLabel: me, setSelectedValue: ce, size: X2 }, { x: we, y: ze, reference: ke, floating: Ie, strategy: Se, getFloatingProps: Ee, open: Re, setOpen: We } = l14({ offset: $2 }), Ge = useMergeRefs([ke, Oe, r107 || null]), He = useMergeRefs([Ce, Ie]), Le = f19.wrapper({ disabled: te }), Pe = f19.noResults({ size: X2 }), Ve = H2 ? f19.icon({ tone: J2, size: X2, className: H2.props.className }) : null, Fe = f19.leftIconWrapper({ size: X2 }), $e = f19.icon({ tone: J2, size: X2 }), qe = f19.rightIconWrapper({ size: X2 });
  (0, import_react33.useEffect)(() => {
    Oe.current && ve(Oe.current.getBoundingClientRect().width);
  }, []), (0, import_react33.useEffect)(() => {
    se(""), ne(false);
  }, [de]), (0, import_react33.useEffect)(() => {
    q3 && !xe.current && q3(le), xe.current = false;
  }, [le]), (0, import_react33.useEffect)(() => {
    ce(Q2);
  }, [Q2]), (0, import_react33.useEffect)(() => {
    var e114;
    Re && (null === (e114 = Ne.current) || void 0 === e114 || e114.focus()), De();
  }, [Re]), r25("Escape", true, () => {
    se(""), ne(false), Re && E && We(false);
  }), r25("Enter", true, () => {
    var e114;
    if (!ie)
      return;
    const o103 = null === (e114 = Ce.current) || void 0 === e114 ? void 0 : e114.querySelector('button[aria-hidden="false"]:not([aria-disabled="true"])');
    o103 && o103.click();
  }), (0, import_react33.useLayoutEffect)(() => {
    setTimeout(() => {
      Ce.current && ue(Array.from(Ce.current.querySelectorAll('button[aria-hidden="false"][aria-disabled="false"]')));
    }, 1), De();
  }, [re]), (0, import_react33.useEffect)(() => {
    Re && We(false);
  }, [de]), o25(pe, Re);
  const Ae = (0, import_jsx_runtime33.jsx)("input", { id: oe, ref: Ne, disabled: te, role: "combobox", "aria-controls": ee, "aria-expanded": Re, value: ie ? re : de || "", placeholder: D, className: fe, readOnly: !T2, onBlur: () => ne(false), onChange: (e114) => {
    ne(true), se(e114.target.value), A2 && A2(e114.target.value), Re || We(true);
  }, type: "text" }), Be = "solid" === J2 ? "slate" : "gray", De = () => {
    if (!Ce.current)
      return;
    const e114 = Ce.current.scrollHeight > (P3 || 0);
    be(f19.list({ size: X2, open: Re, mode: F2, radius: M3, shadow: U, overflown: e114 }));
  };
  return (0, import_react33.useEffect)(() => {
    var e114, o103;
    if (!(null === (e114 = Oe.current) || void 0 === e114 ? void 0 : e114.dataset))
      return;
    const t123 = Object.assign({}, null === (o103 = Oe.current) || void 0 === o103 ? void 0 : o103.dataset), a61 = t123.hasOwnProperty("hasLeftElement"), r108 = t123.hasOwnProperty("hasRightElement");
    ge(f19.base({ className: I, color: R2, disabled: te, hasLeftElement: a61, hasLeftIcon: ae, hasRightElement: r108, hasRightIcon: true, radius: M3, shadow: U, size: X2, tone: J2, validation: K2, withRing: Y2 }));
  }, [I, R2, te, ae, true, M3, U, X2, f19, J2, K2, Y2]), (0, import_jsx_runtime33.jsxs)("div", Object.assign({ id: _2, ref: Ge, className: Le, onClick: () => {
    Re || te || We(true);
  } }, Z2, { children: [H2 && (0, import_jsx_runtime33.jsx)("span", Object.assign({ className: Fe }, { children: (0, import_react33.cloneElement)(H2, { className: Ve }) })), Ae, L && (0, import_jsx_runtime33.jsx)("span", Object.assign({ className: qe }, { children: (0, import_jsx_runtime33.jsx)(a14, { size: X2, color: Be }) })), !L && S2 && le && (0, import_jsx_runtime33.jsx)("button", Object.assign({ disabled: te, onClick: (e114) => {
    me(""), ce(null), se(""), e114.stopPropagation();
  }, className: qe }, { children: (0, import_jsx_runtime33.jsx)(o19, { className: $e }) })), !L && (!S2 || !le) && (0, import_jsx_runtime33.jsx)("div", Object.assign({ className: qe }, { children: (0, import_jsx_runtime33.jsx)(l15, { className: $e }) })), (0, import_jsx_runtime33.jsx)(e30, Object.assign({ value: ye }, { children: (0, import_jsx_runtime33.jsx)(FloatingPortal, { children: (0, import_jsx_runtime33.jsxs)("div", Object.assign({ id: ee, ref: He, className: he, style: { display: Re ? "block" : "none", opacity: Re && !te ? 1 : 0, maxHeight: `${P3}px`, minWidth: `${V}px`, maxWidth: `${je}px`, position: Se, top: ze && ze > 0 && ze !== 1 / 0 ? ze : 0, left: we || 0 } }, Ee, { children: [0 === (null == pe ? void 0 : pe.length) && ie && (0, import_jsx_runtime33.jsx)("div", Object.assign({ className: Pe }, { children: "No results" })), k4] })) }) }))] }));
});
z.displayName = "Combobox";
var k2 = Object.assign(z, { Group: u5, Option: n16 });

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-focus-trap.hook.js
var import_react34 = __toESM(require_react());
function r26(r107 = true) {
  const u29 = (0, import_react34.useRef)(null);
  return (0, import_react34.useEffect)(() => {
    if (!r107)
      return;
    const e114 = (e115) => {
      var t123, n83;
      if ("Tab" === e115.key && u29.current) {
        e115.preventDefault();
        const r108 = Array.from(null === (t123 = u29.current) || void 0 === t123 ? void 0 : t123.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'));
        if (!r108.length)
          return;
        null === (n83 = ((e116, t124) => {
          const n84 = t124 ? e116 - 1 : e116 + 1;
          return n84 < 0 || n84 >= r108.length ? t124 ? r108[r108.length - 1] : r108[0] : r108[n84];
        })(r108.indexOf(document.activeElement), e115.shiftKey)) || void 0 === n83 || n83.focus();
      }
    };
    return document.addEventListener("keydown", e114), () => {
      document.removeEventListener("keydown", e114);
    };
  }, [r107]), (0, import_react34.useCallback)((e114) => {
    if (r107)
      return u29.current || (u29.current = e114), u29.current && u29.current.focus(), u29;
  }, [r107]);
}

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var import_react37 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Overlay/Overlay.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_react35 = __toESM(require_react());
var c16 = { blur: "sm", opacity: "50", color: "dark", closeOnClick: false };
var m11 = (0, import_react35.forwardRef)((t123, m56) => {
  const n83 = q("Overlay"), d33 = Object.assign(Object.assign({}, c16), t123), { blur: p31, color: u29, opacity: b9, closeOnClick: f19, onClose: y6, open: O6, className: j9 = "" } = d33, v7 = __rest(d33, ["blur", "color", "opacity", "closeOnClick", "onClose", "open", "className"]), h16 = t15(t123.id), C3 = (0, import_react35.useMemo)(() => twMerge(n83({ blur: p31, className: j9, color: u29, open: O6, opacity: b9 })), [p31, j9, u29, O6, b9, n83]);
  return (0, import_react35.useEffect)(() => {
    O6 ? document.body.classList.add("overflow-hidden") : document.body.classList.remove("overflow-hidden");
  }, [O6]), (0, import_jsx_runtime34.jsx)("div", Object.assign({ id: h16, ref: m56, className: C3, "aria-hidden": "true" }, v7));
});
m11.displayName = "Overlay";

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var v2 = { closeOnEscape: true, color: "white", open: false, overlayBlur: "sm", overlayCloseOnClick: true, overlayColor: "dark", overlayOpacity: "50", position: "right", shadow: "base" };
var O3 = (0, import_react37.forwardRef)((m56, O6) => {
  const C3 = q("Drawer"), b9 = Object.assign(Object.assign({}, v2), m56), { children: w9, className: k4 = "", closeOnEscape: g17, onClose: j9, open: E, overlayBlur: N2, overlayCloseOnClick: X2, overlayColor: Y2, overlayOpacity: x12, position: B, shadow: D } = b9, A2 = __rest(b9, ["children", "className", "closeOnEscape", "onClose", "open", "overlayBlur", "overlayCloseOnClick", "overlayColor", "overlayOpacity", "position", "shadow"]), I = t15(m56.id), K2 = (0, import_react37.useRef)(null), [P3, q3] = (0, import_react37.useState)(false), z3 = r26(P3), F2 = useMergeRefs([K2, z3 || null, O6 || null]), G3 = (0, import_react37.useRef)(null), H2 = (0, import_react37.useMemo)(() => twMerge(C3({ className: k4, position: B, shadow: D })), [k4, B, D, C3]);
  r25("Escape", g17, j9);
  const J2 = (0, import_react37.useMemo)(() => {
    switch (B) {
      case "left":
      default:
        return ["translateX(-100%)", "translateX(0%)"];
      case "right":
        return ["translateX(100%)", "translateX(0%)"];
      case "top":
        return ["translateY(-100%)", "translateY(0%)"];
      case "bottom":
        return ["translateY(100%)", "translateY(0%)"];
    }
  }, [B]);
  return (0, import_react37.useEffect)(() => {
    const e114 = E ? "ease-in-out" : "ease-out", r107 = E ? 150 : 100, o103 = new KeyframeEffect(K2.current, [{ opacity: 0.75, transform: J2[0], visibility: "hidden" }, { opacity: 1, visibility: "visible", transform: J2[1] }], { duration: r107, fill: "both", easing: e114 });
    G3.current = new Animation(o103, document.timeline);
  }, [E, K2]), (0, import_react37.useEffect)(() => {
    G3.current && (E ? (G3.current.play(), G3.current.onfinish = () => {
      q3(true);
    }) : (G3.current.reverse(), q3(false)));
  }, [E]), (0, import_jsx_runtime35.jsxs)(import_jsx_runtime35.Fragment, { children: [(0, import_jsx_runtime35.jsx)(m11, { open: E, onClick: () => {
    X2 && j9 && j9();
  }, blur: N2, color: Y2, opacity: x12, closeOnClick: X2 }), (0, import_jsx_runtime35.jsx)(FloatingPortal, { children: (0, import_jsx_runtime35.jsx)("div", Object.assign({ id: I, role: "dialog", "aria-hidden": !E, style: { opacity: 0, visibility: "hidden" }, ref: F2, className: H2 }, A2, { children: w9 })) })] });
});
O3.displayName = "Drawer";

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownContent/DropdownContent.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownItem/DropdownItem.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var import_react38 = __toESM(require_react());
var l17 = (0, import_react38.forwardRef)((i49, l40) => {
  const u29 = q("Dropdown"), { tone: d33, itemColor: p31, mode: f19, radius: b9, size: j9, setOpen: x12 } = Object.assign(Object.assign({}, i49), t25()), g17 = Object.assign({}, i49), { children: h16, className: I = "", color: N2 = p31, tabIndex: O6 = 0, onClick: w9 } = g17, C3 = __rest(g17, ["children", "className", "color", "tabIndex", "onClick"]), k4 = (0, import_react38.useRef)(null), D = useMergeRefs([l40 || null, k4]), z3 = t15(i49.id), M3 = (0, import_react38.useMemo)(() => twMerge(u29.item({ tone: d33, className: I, color: N2, mode: f19, radius: b9, size: j9 })), [d33, I, N2, f19, b9, j9, u29]);
  return (0, import_jsx_runtime36.jsx)("button", Object.assign({ id: z3, ref: D, tabIndex: O6, className: M3, role: "menuitem", onClick: (e114) => {
    x12(false), w9 && w9(e114);
  }, onMouseEnter: () => {
    k4.current && k4.current.focus();
  }, onMouseLeave: () => {
    k4.current && k4.current.blur();
  } }, C3, { children: h16 }));
});
l17.displayName = "DropdownItem";

// node_modules/@rewind-ui/core/dist/helpers/arrow-side.dictionary.js
var o29 = cva("", { variants: { side: { top: "bottom", "top-start": "bottom", "top-end": "bottom", right: "left", "right-start": "left", "right-end": "left", bottom: "top", "bottom-start": "top", "bottom-end": "top", left: "right", "left-start": "right", "left-end": "right" } } });

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownContent/DropdownContent.js
var import_react41 = __toESM(require_react());
var h6 = (0, import_react41.forwardRef)((p31, h16) => {
  var b9, u29;
  const x12 = q("Dropdown"), y6 = Object.assign({}, p31), { children: O6, className: v7 = "" } = y6, N2 = __rest(y6, ["children", "className"]), D = t15(p31.id), I = [], $2 = (0, import_react41.useRef)(), { x: P3, y: k4, context: z3, open: S2, floating: C3, strategy: F2, color: R2, size: q3, mode: A2, radius: B, shadow: E, withinPortal: G3, arrowRef: H2, getFloatingProps: J2 } = t25(), K2 = useMergeRefs([C3, $2]), L = (null === (b9 = z3.middlewareData.arrow) || void 0 === b9 ? void 0 : b9.x) || 0, M3 = (null === (u29 = z3.middlewareData.arrow) || void 0 === u29 ? void 0 : u29.y) || 0, Q2 = o29({ side: z3.placement }), T2 = (0, import_react41.useMemo)(() => twMerge(x12.base({ arrowSide: Q2, className: v7, color: R2, mode: A2, open: S2, radius: B, shadow: E, size: q3 })), [Q2, v7, R2, A2, S2, B, E, q3, x12]), U = (0, import_jsx_runtime37.jsx)("span", { ref: H2, className: x12.arrow({ arrowSide: Q2, color: R2 }), style: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "right" !== Q2 && { left: `${L}px` }), "top" !== Q2 && "left" !== Q2 && { bottom: `${M3}px` }), "left" === Q2 && { top: `${M3}px` }), "right" === Q2 && { top: `${M3}px` }), { [Q2]: "-5px" }) }), V = import_react41.Children.map(O6, (o103, e114) => o103.type.displayName !== l17.displayName ? o103 : (0, import_react41.cloneElement)(o103, Object.assign(Object.assign({}, o103.props), { tabIndex: e114 + 1, ref: (o104) => {
    (null == o104 ? void 0 : o104.disabled) || I.push(o104);
  } }))), W2 = (0, import_jsx_runtime37.jsxs)("div", Object.assign({ id: D, ref: K2, className: T2, role: "menu", style: { position: F2, top: null != k4 ? k4 : 0, left: null != P3 ? P3 : 0 } }, J2, N2, { children: [U, V] }));
  return o25(I, S2), (0, import_jsx_runtime37.jsx)("div", Object.assign({ ref: h16, className: v7 }, { children: G3 ? (0, import_jsx_runtime37.jsx)(FloatingPortal, { children: W2 }) : W2 }));
});
h6.displayName = "DropdownContent";

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownDivider/DropdownDivider.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var t37 = (t123) => {
  const s59 = q("Dropdown"), { color: m56 = "gray", className: c55 = "" } = t123, i49 = t15(t123.id);
  return (0, import_jsx_runtime38.jsx)("hr", { id: i49, className: s59.divider({ color: m56, className: c55 }) });
};

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownLabel/DropdownLabel.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var import_react42 = __toESM(require_react());
var c18 = { color: "gray", size: "sm", weight: "normal" };
var n18 = (0, import_react42.forwardRef)((i49, n83) => {
  const l40 = q("Dropdown"), d33 = Object.assign(Object.assign({}, c18), i49), { as: p31, children: g17, color: j9, weight: b9, className: h16 = "" } = d33, f19 = __rest(d33, ["as", "children", "color", "weight", "className"]), { size: w9, mode: O6 } = Object.assign(Object.assign(Object.assign({}, c18), t25()), i49), N2 = t15(i49.id), u29 = (0, import_react42.useMemo)(() => twMerge(l40.label({ className: h16, color: j9, mode: O6, size: w9, weight: b9 })), [h16, j9, O6, w9, b9, l40]);
  return (0, import_jsx_runtime39.jsx)(p31 || "div", Object.assign({ id: N2, className: u29, ref: n83 }, f19, { children: g17 }));
});
n18.displayName = "DropdownLabel";

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownTrigger/DropdownTrigger.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var import_react43 = __toESM(require_react());
var p9 = (0, import_react43.forwardRef)((n83, p31) => {
  const { children: s59 } = n83, { open: c55, reference: m56, getReferenceProps: d33 } = t25(), f19 = import_react43.Children.only(s59), g17 = useMergeRefs([m56, p31 || null]), l40 = (0, import_react43.cloneElement)(f19, Object.assign(Object.assign(Object.assign({ ref: g17 }, { "aria-expanded": c55, "aria-pressed": true, "aria-haspopup": true }), f19.props), d33));
  return (0, import_jsx_runtime40.jsx)(import_jsx_runtime40.Fragment, { children: l40 });
});
p9.displayName = "DropdownTrigger";

// node_modules/@rewind-ui/core/dist/components/Dropdown/use-dropdown.hook.js
var import_react46 = __toESM(require_react());
function x2({ placement: x12 = "bottom", initiallyOpen: y6 = false, outsidePress: h16 = true, trigger: R2 = "click" }) {
  const b9 = (0, import_react46.useRef)(null), [w9, F2] = (0, import_react46.useState)(y6), { x: O6, y: k4, refs: v7, strategy: C3, context: E } = useFloating2({ open: w9, onOpenChange: F2, placement: x12, middleware: [offset(8), shift(), inline(), flip(), arrow2({ element: b9 })], whileElementsMounted: autoUpdate }), { getFloatingProps: M3, getReferenceProps: j9 } = useInteractions([useClick(E, { enabled: "click" === R2, toggle: true }), useHover(E, { enabled: "hover" === R2, move: true, handleClose: safePolygon() }), useFocus(E), useDismiss(E, { referencePress: false, outsidePress: h16 }), useRole(E, { role: "dialog" })]);
  return (0, import_react46.useMemo)(() => ({ arrowRef: b9, context: E, floating: v7.setFloating, getFloatingProps: M3(), getReferenceProps: j9(), open: w9, setOpen: F2, reference: v7.setReference, strategy: C3, x: O6, y: k4 }), [E, v7, M3, j9, w9, F2, C3, O6, k4]);
}

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.js
var import_react47 = __toESM(require_react());
var c19 = { chevronRotation: true, color: "white", initiallyOpen: false, itemColor: "gray", mode: "spacey", outsidePress: true, placement: "bottom", radius: "md", shadow: "none", size: "sm", tone: "solid", trigger: "click", withChevron: true, withinPortal: true };
var g7 = (0, import_react47.forwardRef)((r107, t123) => {
  const i49 = Object.assign(Object.assign({}, c19), r107), { chevronRotation: n83, children: s59, color: m56, initiallyOpen: g17, itemColor: w9, mode: h16, outsidePress: f19, placement: u29, radius: j9, shadow: D, size: v7, tone: P3, trigger: y6, withChevron: b9, withinPortal: C3 } = i49, O6 = __rest(i49, ["chevronRotation", "children", "color", "initiallyOpen", "itemColor", "mode", "outsidePress", "placement", "radius", "shadow", "size", "tone", "trigger", "withChevron", "withinPortal"]), R2 = t15(r107.id), { arrowRef: x12, context: k4, floating: z3, getFloatingProps: I, getReferenceProps: T2, open: L, setOpen: F2, reference: N2, strategy: q3, x: A2, y: B } = x2({ outsidePress: f19, placement: u29, initiallyOpen: g17, trigger: y6 }), E = { arrowRef: x12, chevronRotation: n83, color: m56, context: k4, floating: z3, getFloatingProps: I, getReferenceProps: T2, itemColor: w9, mode: h16, open: L, setOpen: F2, radius: j9, reference: N2, shadow: D, size: v7, strategy: q3, tone: P3, withChevron: b9, withinPortal: C3, x: A2, y: B };
  return r25("Tab", L, () => {
    L && F2(false);
  }), (0, import_jsx_runtime41.jsx)(e22, Object.assign({ value: E }, { children: (0, import_jsx_runtime41.jsx)("div", Object.assign({ id: R2, ref: t123 }, O6, { children: s59 })) }));
});
g7.displayName = "Dropdown";
var w4 = Object.assign(g7, { Trigger: p9, Content: h6, Label: n18, Divider: t37, Item: l17 });

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControlLabel/FormControlLabel.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_react48 = __toESM(require_react());
var a18 = { required: false };
var c20 = (0, import_react48.forwardRef)((s59, c55) => {
  const n83 = q("FormControl"), d33 = Object.assign(Object.assign(Object.assign({}, a18), t32()), s59), { className: p31 = "", children: b9, controlId: f19, required: j9, size: u29 } = d33, h16 = __rest(d33, ["className", "children", "controlId", "required", "size"]), g17 = t15(s59.id), N2 = (0, import_react48.useMemo)(() => twMerge(n83.label({ className: p31, required: j9, size: u29 })), [p31, j9, u29, n83]);
  return (0, import_jsx_runtime42.jsx)("label", Object.assign({ id: g17, ref: c55, htmlFor: f19, className: N2 }, h16, { children: b9 }));
});
c20.displayName = "FormControlLabel";

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControlText/FormControlText.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var import_react49 = __toESM(require_react());
var n20 = { validation: "none" };
var l18 = (0, import_react49.forwardRef)((s59, l40) => {
  const c55 = q("FormControl"), d33 = Object.assign(Object.assign(Object.assign({}, n20), t32()), s59), { className: p31 = "", children: f19, controlId: j9, size: x12, validation: b9 } = d33, g17 = __rest(d33, ["className", "children", "controlId", "size", "validation"]), h16 = t15(s59.id), v7 = (0, import_react49.useMemo)(() => twMerge(c55.text({ className: p31, size: x12, validation: b9 })), [p31, x12, c55, b9]);
  return (0, import_jsx_runtime43.jsx)("div", Object.assign({ id: h16, ref: l40, className: v7 }, g17, { children: f19 }));
});
l18.displayName = "FormControlText";

// node_modules/@rewind-ui/core/dist/components/Input/Input.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var import_react50 = __toESM(require_react());
var p10 = { color: "dark", disabled: false, loading: false, radius: "md", shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var g8 = (0, import_react50.forwardRef)((n83, g17) => {
  const h16 = q("Input"), u29 = Object.assign(Object.assign(Object.assign(Object.assign({}, p10), t32()), t26()), n83), { className: I = "", color: b9, controlId: f19, leftIcon: j9, loading: N2, radius: w9, rightIcon: z3, shadow: O6, size: x12, tone: y6, type: v7 = "text", validation: R2, withRing: W2 } = u29, C3 = __rest(u29, ["className", "color", "controlId", "leftIcon", "loading", "radius", "rightIcon", "shadow", "size", "tone", "type", "validation", "withRing"]), F2 = t15(n83.id), G3 = f19 || F2, S2 = !!j9, k4 = !!z3, L = n83.disabled || N2, P3 = (0, import_react50.useMemo)(() => twMerge(h16.base({ className: I, color: b9, disabled: L, hasLeftIcon: S2, hasRightIcon: k4, loading: N2, radius: w9, shadow: O6, size: x12, tone: y6, type: v7, validation: R2, withRing: W2 })), [I, b9, L, S2, k4, N2, w9, O6, x12, h16, y6, v7, R2, W2]), q3 = (0, import_jsx_runtime44.jsx)("input", Object.assign({ id: G3, type: v7, ref: g17, className: P3 }, C3, { disabled: L }));
  return S2 || k4 || N2 ? (0, import_jsx_runtime44.jsxs)("div", Object.assign({ className: h16.wrapper() }, { children: [j9 && (0, import_jsx_runtime44.jsx)("span", Object.assign({ className: h16.leftIconWrapper({ size: x12 }) }, { children: (0, import_react50.cloneElement)(j9, { className: h16.icon({ tone: y6, size: x12, className: j9.props.className }) }) })), q3, z3 && !N2 && (0, import_jsx_runtime44.jsx)("span", Object.assign({ className: h16.rightIconWrapper({ size: x12 }) }, { children: (0, import_react50.cloneElement)(z3, { className: h16.icon({ tone: y6, size: x12, className: z3.props.className }) }) })), N2 && (0, import_jsx_runtime44.jsx)("span", Object.assign({ className: h16.rightIconWrapper({ size: x12 }) }, { children: (0, import_jsx_runtime44.jsx)(a14, { size: x12, color: "gray" }) }))] })) : q3;
});
g8.displayName = "Input";

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroupText/InputGroupText.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var import_react51 = __toESM(require_react());
var n22 = (0, import_react51.forwardRef)((o103, n83) => {
  const c55 = q("InputGroup"), p31 = Object.assign(Object.assign({}, t26()), o103), { className: u29 = "", children: d33, tone: l40, size: f19, radius: j9 } = p31, x12 = __rest(p31, ["className", "children", "tone", "size", "radius"]), h16 = t15(o103.id), N2 = (0, import_react51.useMemo)(() => twMerge(c55.text({ className: u29, tone: l40, radius: j9, size: f19 })), [u29, j9, f19, c55, l40]);
  return (0, import_jsx_runtime45.jsx)("div", Object.assign({ id: h16, ref: n83, className: N2 }, x12, { children: d33 }));
});
n22.displayName = "InputGroupText";

// node_modules/@rewind-ui/core/dist/components/Select/Select.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_react52 = __toESM(require_react());
var p11 = { color: "dark", disabled: false, radius: "md", shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var h7 = (0, import_react52.forwardRef)((c55, h16) => {
  const b9 = q("Select"), f19 = Object.assign(Object.assign(Object.assign(Object.assign({}, p11), t32()), t26()), c55), { children: g17, className: j9 = "", color: u29, controlId: N2, disabled: w9, leftIcon: I, radius: z3, shadow: O6, size: v7, tone: x12, validation: R2, withRing: C3 } = f19, F2 = __rest(f19, ["children", "className", "color", "controlId", "disabled", "leftIcon", "radius", "shadow", "size", "tone", "validation", "withRing"]), G3 = t15(c55.id), S2 = N2 || G3, W2 = !!I, k4 = (0, import_react52.useMemo)(() => twMerge(b9.base({ className: j9, color: u29, disabled: w9, hasLeftIcon: W2, radius: z3, shadow: O6, size: v7, tone: x12, validation: R2, withRing: C3 })), [j9, u29, w9, W2, z3, O6, v7, b9, x12, R2, C3]), y6 = (0, import_jsx_runtime46.jsx)("select", Object.assign({ id: S2, ref: h16, className: k4 }, F2, { disabled: w9 }, { children: g17 }));
  return (0, import_jsx_runtime46.jsxs)("div", Object.assign({ className: b9.wrapper() }, { children: [I && (0, import_jsx_runtime46.jsx)("span", Object.assign({ className: b9.leftIconWrapper({ size: v7 }) }, { children: (0, import_react52.cloneElement)(I, { className: b9.icon({ tone: x12, size: v7, className: I.props.className }) }) })), y6, (0, import_jsx_runtime46.jsx)("span", Object.assign({ className: b9.rightIconWrapper({ size: v7 }) }, { children: (0, import_jsx_runtime46.jsx)(l15, { className: b9.icon({ tone: x12, size: v7 }) }) }))] }));
});
h7.displayName = "Select";

// node_modules/@rewind-ui/core/dist/components/Textarea/Textarea.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var import_react53 = __toESM(require_react());
var m19 = { color: "dark", tone: "light", radius: "md", size: "md", validation: "none", shadow: "none", withRing: true, disabled: false };
var l20 = (0, import_react53.forwardRef)((r107, l40) => {
  const c55 = q("Textarea"), p31 = Object.assign(Object.assign(Object.assign(Object.assign({}, m19), t32()), t26()), r107), { className: u29 = "", color: b9, controlId: g17, disabled: h16, tone: f19, size: j9, radius: w9, validation: x12, shadow: I, withRing: N2, type: O6 = "text" } = p31, v7 = __rest(p31, ["className", "color", "controlId", "disabled", "tone", "size", "radius", "validation", "shadow", "withRing", "type"]), z3 = t15(r107.id), R2 = g17 || z3, y6 = (0, import_react53.useMemo)(() => twMerge(c55({ className: u29, color: b9, disabled: h16, radius: w9, shadow: I, size: j9, tone: f19, validation: x12, withRing: N2 })), [u29, b9, h16, w9, I, j9, c55, f19, x12, N2]);
  return (0, import_jsx_runtime47.jsx)("textarea", Object.assign({ id: R2, ref: l40, className: y6 }, v7, { disabled: h16 }));
});
l20.displayName = "Textarea";

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.js
var import_react54 = __toESM(require_react());
var h8 = { radius: "md", shadow: "none", size: "md", tone: "light" };
var x3 = (0, import_react54.forwardRef)((e114, r107) => {
  const a60 = q("InputGroup"), i49 = Object.assign(Object.assign(Object.assign({}, t32()), h8), e114), { className: m56 = "", controlId: n83, radius: u29, shadow: x12, size: g17, tone: I } = i49, O6 = __rest(i49, ["className", "controlId", "radius", "shadow", "size", "tone"]), T2 = t15(e114.id), w9 = (0, import_react54.useMemo)(() => twMerge(a60.base({ className: m56, radius: u29, shadow: x12, size: g17 })), [m56, u29, x12, g17, a60]), z3 = { tone: I, size: g17, radius: u29 }, C3 = [];
  return import_react54.Children.toArray(e114.children).forEach((t123, o103) => {
    C3.push((0, import_react54.cloneElement)(t123, Object.assign(Object.assign({}, t123.props), { "data-has-right-element": o103 < import_react54.Children.count(e114.children) - 1, "data-has-left-element": o103 > 0 })));
  }), (0, import_jsx_runtime48.jsx)(e23, Object.assign({ value: z3 }, { children: (0, import_jsx_runtime48.jsx)("div", Object.assign({ id: T2, ref: r107, className: w9 }, O6, { children: C3 })) }));
});
x3.displayName = "InputGroup";
var g9 = Object.assign(x3, { Input: g8, Textarea: l20, Select: h7, Combobox: k2, Text: n22, Button: u4 });

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.js
var import_react55 = __toESM(require_react());
var j5 = { size: "md", validation: "none" };
var u9 = (0, import_react55.forwardRef)((r107, e114) => {
  const m56 = q("FormControl"), i49 = Object.assign(Object.assign({}, j5), r107), { className: s59 = "", children: a60, size: n83, validation: c55 } = i49, u29 = __rest(i49, ["className", "children", "size", "validation"]), x12 = t15(r107.id), C3 = { controlId: `control-${x12}`, size: n83, validation: c55 }, I = (0, import_react55.useMemo)(() => twMerge(m56.base({ className: s59 })), [s59, m56]);
  return (0, import_jsx_runtime49.jsx)(e32, Object.assign({ value: C3 }, { children: (0, import_jsx_runtime49.jsx)("div", Object.assign({ id: x12, ref: e114, className: I }, u29, { children: a60 })) }));
});
u9.displayName = "FormControl";
var x4 = Object.assign(u9, { Label: c20, Text: l18, InputGroup: g9, Input: g8, Textarea: l20, Select: h7, Combobox: k2 });

// node_modules/@rewind-ui/core/dist/components/Modal/Modal.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var import_react56 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.context.js
var [e42, t40] = i7();

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.js
var l22 = (l40) => {
  const { children: n83 } = l40, [o103, a60] = (0, import_react56.useState)([]), [s59, c55] = (0, import_react56.useState)(null), d33 = { registry: o103, setRegistry: a60, activeModalId: s59 };
  return (0, import_react56.useEffect)(() => {
    if (o103.length > 1) {
      const t124 = o103[o103.length - 2];
      if (!t124)
        return;
      t124.animate([{ opacity: 1, transform: "translateY(0%)", filter: "blur(0)", visibility: "visible" }, { opacity: 0, transform: "translateY(-50px)", filter: "blur(15px)", visibility: "hidden" }], { duration: 100 }), t124.style.zIndex = "40";
    }
    const t123 = o103[o103.length - 1];
    t123 ? (t123.style.zIndex = "60", c55(t123.id)) : c55(null);
  }, [o103]), (0, import_jsx_runtime50.jsx)(e42, Object.assign({ value: d33 }, { children: n83 }));
};
l22.displayName = "ModalGroup";

// node_modules/@rewind-ui/core/dist/components/Modal/Modal.js
var import_react58 = __toESM(require_react());
var O4 = { closeOnEscape: true, color: "white", mode: "dialog", open: false, overlayBlur: "sm", overlayCloseOnClick: true, overlayColor: "dark", overlayOpacity: "50", position: "top", radius: "md", shadow: "base", size: "sm" };
var g10 = (0, import_react58.forwardRef)((t123, u29) => {
  const g17 = q("Modal"), j9 = Object.assign(Object.assign({}, O4), t123), { children: C3, className: k4 = "", closeOnEscape: w9, color: x12, mode: M3, onClose: N2, open: E, overlayBlur: G3, overlayCloseOnClick: z3, overlayColor: Y2, overlayOpacity: B, position: I, radius: A2, shadow: K2, size: P3 } = j9, R2 = __rest(j9, ["children", "className", "closeOnEscape", "color", "mode", "onClose", "open", "overlayBlur", "overlayCloseOnClick", "overlayColor", "overlayOpacity", "position", "radius", "shadow", "size"]), T2 = t15(t123.id), $2 = (0, import_react58.useRef)(null), [q3, D] = (0, import_react58.useState)(false), F2 = r26(q3), H2 = useMergeRefs([$2, F2 || null, u29 || null]), J2 = (0, import_react58.useRef)(null), { activeModalId: L, registry: Q2, setRegistry: S2 } = t40(), U = (0, import_react58.useMemo)(() => {
    if ("fullscreen" === M3)
      return "0%";
    switch (I) {
      case "top":
      case "bottom":
        return "0%";
      default:
        return "-50%";
    }
  }, [I, M3]);
  (0, import_react58.useEffect)(() => {
    if (!S2 || !Q2 || !$2.current)
      return;
    const e114 = E ? [...Q2, $2.current] : Q2.filter((e115) => e115 !== $2.current);
    if (S2(e114), 0 !== e114.length && !E && e114.length < Q2.length) {
      e114[e114.length - 1].animate([{ opacity: 0, transform: "translateY(-50px)", visibility: "hidden" }, { opacity: 1, transform: "translateY(0%)", visibility: "visible" }], { duration: 150 }), D(false);
    }
  }, [E]);
  const V = (0, import_react58.useMemo)(() => twMerge(g17({ className: k4, color: x12, mode: M3, position: I, radius: A2, shadow: K2, size: P3 })), [k4, x12, M3, I, A2, K2, P3, g17]);
  r25("Escape", w9, N2);
  return (0, import_react58.useEffect)(() => {
    const e114 = E ? "ease-in-out" : "ease-out", o103 = E ? 150 : 100, r107 = new KeyframeEffect($2.current, [{ opacity: 0, transform: "translateY(-100px)", visibility: "hidden" }, { opacity: 1, transform: `translateY(${U})`, visibility: "visible" }], { duration: o103, fill: "both", easing: e114 });
    J2.current = new Animation(r107, document.timeline);
  }, [E, $2]), (0, import_react58.useEffect)(() => {
    J2.current && (E ? (J2.current.play(), J2.current.onfinish = () => {
      D(true);
    }) : (J2.current.reverse(), D(false)));
  }, [E]), (0, import_react58.useEffect)(() => {
    J2.current && (L === T2 ? setTimeout(() => {
      D(true);
    }, 100) : D(false));
  }, [L]), (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: ["fullscreen" !== M3 && (0, import_jsx_runtime51.jsx)(m11, { open: E, onClick: () => {
    z3 && N2 && N2();
  }, blur: G3, color: Y2, opacity: B, closeOnClick: z3 }), (0, import_jsx_runtime51.jsx)(FloatingPortal, { children: (0, import_jsx_runtime51.jsx)("div", Object.assign({ className: "flex justify-center" }, { children: (0, import_jsx_runtime51.jsx)("div", Object.assign({ id: T2, role: "dialog", "aria-modal": "true", "aria-hidden": !E, style: { opacity: 0, visibility: "hidden" }, ref: H2, className: V }, R2, { children: C3 })) })) })] });
});
g10.displayName = "Modal";
var j6 = Object.assign(g10, { Group: l22 });

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverContent/PopoverContent.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.context.js
var [e43, n24] = t("Popover compound components cannot be rendered outside the Popover component");

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverContent/PopoverContent.js
var import_react60 = __toESM(require_react());
var f6 = (0, import_react60.forwardRef)((n83, f19) => {
  var u29, h16;
  const g17 = q("Popover"), w9 = Object.assign({}, n83), { children: v7, className: b9 = "" } = w9, j9 = __rest(w9, ["children", "className"]), x12 = t15(n83.id), { arrowRef: y6, color: N2, context: O6, floating: P3, getFloatingProps: z3, open: D, radius: S2, shadow: T2, size: $2, strategy: C3, withinPortal: F2, x: I, y: R2 } = n24(), [k4, q3] = (0, import_react60.useState)(!D), [A2, B] = (0, import_react60.useState)(null);
  (0, import_react60.useEffect)(() => {
    A2 && clearTimeout(A2), B(setTimeout(() => q3(!D), D ? 0 : 75));
  }, [D]);
  const E = (null === (u29 = O6.middlewareData.arrow) || void 0 === u29 ? void 0 : u29.x) || 0, G3 = (null === (h16 = O6.middlewareData.arrow) || void 0 === h16 ? void 0 : h16.y) || 0, H2 = o29({ side: O6.placement }), J2 = (0, import_react60.useMemo)(() => twMerge(g17.base({ arrowSide: H2, className: b9, color: N2, open: D, radius: S2, shadow: T2, size: $2 })), [H2, b9, N2, D, S2, T2, $2, g17]), K2 = (0, import_jsx_runtime52.jsx)("span", { ref: y6, className: g17.arrow({ arrowSide: H2, color: N2 }), style: Object.assign(Object.assign(Object.assign({}, "right" !== H2 && { left: `${E}px` }), "top" !== H2 && { bottom: `${G3}px` }), { [H2]: "-5px" }) }), L = !k4 && (0, import_jsx_runtime52.jsxs)("div", Object.assign({ id: x12, ref: P3, className: J2, style: { position: C3, top: null != R2 ? R2 : 0, left: null != I ? I : 0, visibility: null == I ? "hidden" : "visible" } }, z3, j9, { children: [K2, v7] }));
  return (0, import_jsx_runtime52.jsx)("div", Object.assign({ ref: f19, className: b9, "aria-hidden": !D }, { children: F2 ? (0, import_jsx_runtime52.jsx)(FloatingPortal, { children: L }) : L }));
});
f6.displayName = "PopoverContent";

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverTrigger/PopoverTrigger.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var import_react61 = __toESM(require_react());
var p13 = (0, import_react61.forwardRef)((t123, p31) => {
  const { children: s59 } = t123, { reference: m56, getReferenceProps: a60 } = n24(), f19 = import_react61.Children.only(s59), l40 = useMergeRefs([m56, p31 || null]), g17 = (0, import_react61.cloneElement)(f19, Object.assign(Object.assign({ ref: l40 }, f19.props), a60));
  return (0, import_jsx_runtime53.jsx)(import_jsx_runtime53.Fragment, { children: g17 });
});
p13.displayName = "PopoverTrigger";

// node_modules/@rewind-ui/core/dist/components/Popover/use-popover.hook.js
var import_react64 = __toESM(require_react());
function y3({ placement: y6 = "bottom", initiallyOpen: P3 = false, offset: R2 = 8 }) {
  const h16 = (0, import_react64.useRef)(null), [w9, F2] = (0, import_react64.useState)(P3), { x: b9, y: C3, refs: O6, strategy: v7, context: E } = useFloating2({ open: w9, onOpenChange: F2, placement: y6, middleware: [offset(R2), shift(), inline(), flip(), arrow2({ element: h16 })], whileElementsMounted: autoUpdate }), { getFloatingProps: M3, getReferenceProps: j9 } = useInteractions([useClick(E, { enabled: null == w9 }), useHover(E, { move: true, handleClose: safePolygon() }), useFocus(E), useDismiss(E, { referencePress: false }), useRole(E, { role: "dialog" })]);
  return (0, import_react64.useMemo)(() => ({ x: b9, y: C3, reference: O6.setReference, floating: O6.setFloating, strategy: v7, context: E, getFloatingProps: M3(), getReferenceProps: j9(), open: w9, arrowRef: h16 }), [w9, F2, b9, C3]);
}

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.js
var import_react65 = __toESM(require_react());
var p14 = { color: "white", initiallyOpen: false, offset: 8, placement: "top", radius: "md", shadow: "base", size: "md", withinPortal: true };
var c25 = (0, import_react65.forwardRef)((r107, i49) => {
  const a60 = Object.assign(Object.assign(Object.assign({}, p14), t26()), r107), { className: c55 = "", color: m56, children: f19, size: g17, radius: d33, placement: u29, shadow: P3, initiallyOpen: h16, withinPortal: j9, offset: w9 } = a60, O6 = __rest(a60, ["className", "color", "children", "size", "radius", "placement", "shadow", "initiallyOpen", "withinPortal", "offset"]), v7 = t15(r107.id), { x: y6, y: b9, reference: x12, floating: z3, strategy: N2, context: R2, open: C3, arrowRef: I, getFloatingProps: T2, getReferenceProps: F2 } = y3({ placement: u29, initiallyOpen: h16, offset: w9 }), G3 = { x: y6, y: b9, reference: x12, floating: z3, strategy: N2, context: R2, getFloatingProps: T2, getReferenceProps: F2, open: C3, color: m56, size: g17, radius: d33, shadow: P3, withinPortal: j9, arrowRef: I };
  return (0, import_jsx_runtime54.jsx)(e43, Object.assign({ value: G3 }, { children: (0, import_jsx_runtime54.jsx)("div", Object.assign({ id: v7, ref: i49, role: "dialog", "aria-modal": true, className: c55 }, O6, { children: f19 })) }));
});
c25.displayName = "Popover";
var m21 = Object.assign(c25, { Trigger: p13, Content: f6 });

// node_modules/@rewind-ui/core/dist/components/Progress/Progress.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var import_react66 = __toESM(require_react());
var o39 = { animated: false, color: "dark", radius: "md", shadow: "none", showValue: false, size: "md", striped: false };
var c26 = (0, import_react66.forwardRef)((n83, c55) => {
  const d33 = q("Progress"), u29 = t15(n83.id), m56 = `${u29}-label`, p31 = Object.assign(Object.assign({}, o39), n83), { animated: b9, children: g17, className: h16 = "", color: f19, description: v7, label: j9 = "", radius: z3, shadow: w9, showValue: N2, size: O6, striped: y6, value: k4 = 0 } = p31, x12 = __rest(p31, ["animated", "children", "className", "color", "description", "label", "radius", "shadow", "showValue", "size", "striped", "value"]), P3 = (0, import_react66.useRef)(null);
  (0, import_react66.useEffect)(() => {
    if (!b9)
      return;
    if (!y6)
      return;
    if (!(null == P3 ? void 0 : P3.current))
      return;
    const e114 = P3.current.animate({ backgroundPosition: ["0 0", d33.stripe({ size: O6 })] }, { duration: 2e3, iterations: 1 / 0 });
    return () => {
      e114.cancel();
    };
  }, [b9, y6, P3, O6, d33]), (0, import_react66.useEffect)(() => {
    if (null == P3 ? void 0 : P3.current) {
      if (!y6)
        return P3.current.style.backgroundSize = "", void (P3.current.style.backgroundImage = "");
      P3.current.style.backgroundSize = d33.stripe({ size: O6 }), P3.current.style.backgroundImage = "linear-gradient(-45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)";
    }
  }, [P3, O6, y6, d33]);
  const I = O6 && ["xs", "sm"].includes(O6) ? "outer" : "inner";
  return (0, import_jsx_runtime55.jsxs)("div", Object.assign({ id: u29, ref: c55, className: d33.wrapper({ className: h16, size: O6 }) }, x12, { children: [(j9 || N2 && "outer" === I) && (0, import_jsx_runtime55.jsxs)("div", Object.assign({ className: d33.label({ size: O6 }) }, { children: [j9 && (0, import_jsx_runtime55.jsx)("span", Object.assign({ id: m56, role: "presentation" }, { children: j9 })), N2 && "outer" === I && (0, import_jsx_runtime55.jsxs)("span", { children: [k4, "%"] })] })), (0, import_jsx_runtime55.jsx)("div", Object.assign({ className: d33.base({ radius: z3, size: O6, shadow: w9 }) }, { children: (0, import_jsx_runtime55.jsx)("div", Object.assign({ ref: P3, role: "progressbar", "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": k4, "aria-labelledby": j9 ? m56 : void 0, style: { width: `${k4}%` }, className: d33.bar({ color: f19 }) }, { children: N2 && "inner" === I && (0, import_jsx_runtime55.jsxs)("span", { children: [k4, "%"] }) })) })), v7 && (0, import_jsx_runtime55.jsx)("span", Object.assign({ className: d33.description({ size: O6 }) }, { children: v7 }))] }));
});
c26.displayName = "Progress";

// node_modules/@rewind-ui/core/dist/components/Ribbon/Ribbon.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var import_react67 = __toESM(require_react());
var d18 = { color: "dark", position: "top-right", radius: "base", shadow: "base", shadowColor: "none", size: "md", tone: "solid" };
var m22 = (0, import_react67.forwardRef)((a60, m56) => {
  const c55 = d5("Ribbon", a60.variant), l40 = q("Ribbon"), h16 = Object.assign(Object.assign(Object.assign({}, d18), c55), a60), { children: p31, className: b9 = "", color: f19, position: u29, radius: w9, shadow: j9, shadowColor: g17, size: v7, tone: N2, variant: x12 } = h16, z3 = __rest(h16, ["children", "className", "color", "position", "radius", "shadow", "shadowColor", "size", "tone", "variant"]), C3 = t15(a60.id), O6 = (0, import_react67.useMemo)(() => twMerge(l40({ className: b9, position: u29, radius: w9, shadow: j9, shadowColor: g17, size: v7, color: f19, tone: N2 })), [b9, f19, u29, w9, j9, g17, v7, l40, N2]);
  return (0, import_jsx_runtime56.jsx)("div", Object.assign({ id: C3, ref: m56, className: O6 }, z3, { children: p31 }));
});
m22.displayName = "Ribbon";

// node_modules/@rewind-ui/core/dist/components/Radio/Radio.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Radio/RadioGroup.context.js
var [e46, t44] = i7();

// node_modules/@rewind-ui/core/dist/components/Radio/Radio.js
var import_react68 = __toESM(require_react());
var n28 = { color: "dark", disabled: false, radius: "full", size: "md", tone: "solid", withRing: true };
var c27 = (0, import_react68.forwardRef)((t123, c55) => {
  const m56 = q("Radio"), b9 = Object.assign(Object.assign(Object.assign({}, n28), t44()), t123), { children: u29, className: p31 = "", color: N2, defaultChecked: g17, description: h16, descriptionClassName: f19 = "", disabled: j9, error: C3, errorClassName: O6 = "", label: v7, labelClassName: z3 = "", name: R2, setValue: w9, initialValue: x12, value: k4, radius: y6, size: V, tone: $2, withRing: F2 } = b9, G3 = __rest(b9, ["children", "className", "color", "defaultChecked", "description", "descriptionClassName", "disabled", "error", "errorClassName", "label", "labelClassName", "name", "setValue", "initialValue", "value", "radius", "size", "tone", "withRing"]), I = t15(t123.id), P3 = C3 ? "invalid" : "valid", q3 = (0, import_react68.useMemo)(() => twMerge(m56.base({ className: p31, color: N2, radius: y6, size: V, tone: $2, validation: P3, withRing: F2 })), [m56, N2, $2, V, y6, P3, F2, p31]);
  return (0, import_jsx_runtime57.jsxs)("div", Object.assign({ className: "flex items-center" }, { children: [(0, import_jsx_runtime57.jsx)("input", Object.assign({ id: I, ref: c55, type: "radio", "aria-labelledby": `${I}-label`, className: q3, disabled: j9, onChange: (e114) => {
    w9 && w9(e114.target.value);
  }, name: R2, defaultChecked: x12 ? x12 === k4 : g17 }, G3)), (0, import_jsx_runtime57.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime57.jsx)("label", Object.assign({ id: `${I}-label`, htmlFor: I, className: twMerge(m56.label({ disabled: j9, size: V, className: z3 })) }, { children: v7 })), h16 && (0, import_jsx_runtime57.jsx)("span", Object.assign({ className: twMerge(m56.description({ disabled: j9, size: V, className: f19 })) }, { children: h16 })), C3 && (0, import_jsx_runtime57.jsx)("span", Object.assign({ className: twMerge(m56.error({ disabled: j9, size: V, className: O6 })) }, { children: C3 }))] }))] }));
});
c27.displayName = "Radio";

// node_modules/@rewind-ui/core/dist/components/Radio/RadioGroup/RadioGroup.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var import_react69 = __toESM(require_react());
var c28 = { orientation: "horizontal" };
var d20 = (0, import_react69.forwardRef)((r107, d33) => {
  const u29 = q("Radio"), p31 = Object.assign(Object.assign({}, c28), r107), { children: f19, className: g17, initialValue: h16, name: j9, onChange: b9, orientation: N2 } = p31, x12 = __rest(p31, ["children", "className", "initialValue", "name", "onChange", "orientation"]), O6 = t15(r107.id), [V, v7] = (0, import_react69.useState)(h16), R2 = { initialValue: h16, name: j9, setValue: v7, value: V }, C3 = (0, import_react69.useMemo)(() => twMerge(u29.group({ className: g17, orientation: N2 })), [u29, N2, g17]);
  return (0, import_react69.useEffect)(() => {
    b9 && b9(V);
  }, [V, b9]), (0, import_jsx_runtime58.jsx)(e46, Object.assign({ value: R2 }, { children: (0, import_jsx_runtime58.jsx)("div", Object.assign({ id: O6, ref: d33, role: "radiogroup", className: C3 }, x12, { children: f19 })) }));
});
d20.displayName = "RadioGroup";

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Selector/SelectorTab/SelectorTab.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.context.js
var [e47, t46] = t("Selector compound components cannot be rendered outside the Selector component");

// node_modules/@rewind-ui/core/dist/components/Selector/SelectorTab/SelectorTab.js
var import_react70 = __toESM(require_react());
var m24 = (0, import_react70.forwardRef)((c55, m56) => {
  const d33 = q("Selector"), b9 = Object.assign(Object.assign({}, t46()), c55), { activeTabAnchor: h16, anchor: p31, children: f19, className: u29 = "", color: j9, disabled: N2 = false, label: g17, orientation: v7, radius: x12, separator: A2, setActiveTabAnchor: w9, shadow: z3, size: S2, tone: T2, withSeparator: O6 } = b9, k4 = __rest(b9, ["activeTabAnchor", "anchor", "children", "className", "color", "disabled", "label", "orientation", "radius", "separator", "setActiveTabAnchor", "shadow", "size", "tone", "withSeparator"]), y6 = t15(c55.id), I = p31 === h16, C3 = "string" == typeof g17 ? g17 : void 0, P3 = (0, import_react70.useMemo)(() => twMerge(d33.tab({ active: I, className: u29, color: j9, orientation: v7, radius: x12, size: S2, tone: T2 })), [I, u29, j9, v7, x12, S2, d33, T2]);
  return (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [(0, import_jsx_runtime59.jsx)("button", Object.assign({ id: y6, ref: m56, role: "radio", "aria-checked": I, "aria-label": C3, onClick: () => {
    w9(p31);
  }, className: P3, disabled: N2, tabIndex: I ? 0 : -1 }, k4, { children: (0, import_jsx_runtime59.jsx)("span", Object.assign({ className: "z-40 h-full flex items-center" }, { children: g17 })) })), O6 && (A2 || (0, import_jsx_runtime59.jsx)("span", { className: d33.separator({ orientation: v7, size: S2 }) }))] });
});
m24.displayName = "SelectorTab";

// node_modules/@rewind-ui/core/dist/hooks/use-horizontal-arrows.hook.js
function t48(t123, n83 = true) {
  r25("ArrowRight", n83, () => {
    var e114, r107;
    if (!n83)
      return;
    const o103 = document.activeElement;
    if (!o103)
      return;
    if (!t123)
      return;
    const u29 = null === (e114 = t123.current) || void 0 === e114 ? void 0 : e114.querySelectorAll('button:not([disabled="true"])');
    if (!u29)
      return;
    const i49 = [];
    if (u29.forEach((e115) => {
      i49.push(e115.id);
    }), !i49.includes(o103.id))
      return;
    const d33 = i49.findIndex((e115) => e115 === o103.id), c55 = i49[d33 + 1] ? d33 + 1 : 0;
    null === (r107 = document.getElementById(i49[c55])) || void 0 === r107 || r107.focus();
  }), r25("ArrowLeft", n83, () => {
    var e114, r107;
    if (!n83)
      return;
    const o103 = document.activeElement;
    if (!o103)
      return;
    if (!t123)
      return;
    const u29 = null === (e114 = t123.current) || void 0 === e114 ? void 0 : e114.querySelectorAll('button:not([disabled="true"])');
    if (!u29)
      return;
    const i49 = [];
    if (u29.forEach((e115) => {
      i49.push(e115.id);
    }), !i49.includes(o103.id))
      return;
    const d33 = i49.findIndex((e115) => e115 === o103.id), c55 = i49[d33 - 1] ? d33 - 1 : i49.length - 1;
    null === (r107 = document.getElementById(i49[c55])) || void 0 === r107 || r107.focus();
  });
}

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.js
var import_react72 = __toESM(require_react());
var w5 = { color: "dark", fullWidth: false, orientation: "horizontal", radius: "md", shadow: "base", size: "md", tone: "solid", withAnimation: true, withSeparator: true };
var b2 = (0, import_react72.forwardRef)((o103, c55) => {
  const b9 = q("Selector"), g17 = Object.assign(Object.assign({}, w5), o103), { children: v7, className: j9 = "", color: y6, fullWidth: z3, onChange: S2, orientation: x12, radius: A2, separator: N2, shadow: O6, size: T2, tone: P3, value: k4, withAnimation: W2, withSeparator: $2 } = g17, C3 = __rest(g17, ["children", "className", "color", "fullWidth", "onChange", "orientation", "radius", "separator", "shadow", "size", "tone", "value", "withAnimation", "withSeparator"]), R2 = t15(o103.id), q3 = (0, import_react72.useRef)(null), B = useMergeRefs([c55 || null, q3]), [I, L] = (0, import_react72.useState)(k4), M3 = (0, import_react72.useRef)(true), D = (0, import_react72.useRef)(null), E = (0, import_react72.useRef)(null), [F2, G3] = (0, import_react72.useState)(""), H2 = /* @__PURE__ */ new Map(), J2 = (0, import_react72.useMemo)(() => twMerge(b9.wrapper({ className: j9, fullWidth: z3, orientation: x12, radius: A2, shadow: O6, size: T2 })), [j9, z3, x12, A2, O6, T2, b9]), K2 = (r107, t123, e114, o104 = "md", i49 = "horizontal", a60 = true) => {
    const n83 = r107.getBoundingClientRect(), s59 = n83.width, c56 = n83.height;
    t123.style.setProperty("width", `${s59}px`), t123.style.setProperty("height", `${c56}px`), t123.style.setProperty("top", `${r107.offsetTop}px`), t123.style.setProperty("left", `${r107.offsetLeft}px`), G3(b9.base({ color: H2.get(e114), size: o104, radius: A2, tone: P3, initialRun: a60, withAnimation: W2 }));
  };
  (0, import_react72.useEffect)(() => {
    var r107;
    if (!I)
      return;
    const t123 = null === (r107 = q3.current) || void 0 === r107 ? void 0 : r107.querySelector('button[aria-checked="true"]');
    return t123 && D.current ? (K2(t123, D.current, I, T2, x12, M3.current), M3.current = false, E.current = new ResizeObserver((r108) => {
      D.current && K2(t123, D.current, I, T2, x12, M3.current);
    }), E.current.observe(D.current), () => {
      E.current && E.current.disconnect();
    }) : void 0;
  }, [I, y6, z3, x12, A2, T2, P3, W2, $2]), (0, import_react72.useEffect)(() => {
    S2 && !M3.current && S2(I);
  }, [I]);
  const Q2 = { activeTabAnchor: I, color: y6, orientation: x12, radius: A2, separator: N2, setActiveTabAnchor: L, shadow: O6, size: T2, tone: P3, withSeparator: $2 };
  return import_react72.Children.map(v7, (r107) => {
    H2.set(r107.props.anchor, r107.props.color || y6);
  }), t48(q3), (0, import_jsx_runtime60.jsx)(e47, Object.assign({ value: Q2 }, { children: (0, import_jsx_runtime60.jsxs)("div", Object.assign({ id: R2, ref: B, role: "radiogroup", className: J2 }, C3, { children: [v7, (0, import_jsx_runtime60.jsx)("div", { ref: D, className: F2 })] })) }));
});
b2.displayName = "Selector";
var g11 = Object.assign(b2, { Tab: m24 });

// node_modules/@rewind-ui/core/dist/components/Switch/Switch.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var import_react73 = __toESM(require_react());
var m25 = { color: "dark", radius: "full", size: "md", withRing: true };
var f7 = (0, import_react73.forwardRef)((r107, f19) => {
  const h16 = q("Switch"), b9 = Object.assign(Object.assign({}, m25), r107), { className: u29 = "", checked: g17 = false, color: p31, disabled: N2, onChange: j9, radius: y6, size: C3, withRing: w9, label: z3, labelClassName: O6 = "", description: x12, descriptionClassName: k4 = "", error: v7, errorClassName: S2 = "" } = b9, R2 = __rest(b9, ["className", "checked", "color", "disabled", "onChange", "radius", "size", "withRing", "label", "labelClassName", "description", "descriptionClassName", "error", "errorClassName"]), X2 = t15(r107.id), [$2, E] = (0, import_react73.useState)(g17), H2 = (0, import_react73.useRef)(null), W2 = (0, import_react73.useRef)(true), A2 = $2 ? "active" : "inactive", F2 = (0, import_react73.useMemo)(() => twMerge(h16.base({ className: u29, color: p31, radius: y6, size: C3, state: A2, withRing: w9 })), [h16, p31, C3, y6, A2, w9, u29]);
  return (0, import_react73.useEffect)(() => {
    const e114 = H2.current;
    if (!e114)
      return;
    if (W2.current)
      return e114.style.justifySelf = $2 ? "end" : "start", e114.style.transform = "", void (W2.current = false);
    const s59 = e114.getAnimations();
    s59.length > 0 && s59.forEach((e115) => {
      e115.cancel();
    });
    const a60 = e114.parentElement;
    if (!a60)
      return;
    const t123 = a60.scrollWidth - e114.offsetWidth - (a60.scrollHeight - e114.offsetHeight), i49 = $2 ? "translateX(0)" : `translateX(${t123}px)`, r108 = $2 ? `translateX(${t123}px)` : "translateX(0)";
    e114.style.justifySelf = "";
    e114.animate({ transform: [i49, r108] }, { duration: 50 }).onfinish = () => {
      e114.style.transform = "", e114.style.justifySelf = $2 ? "end" : "start";
    };
  }, [$2]), (0, import_react73.useEffect)(() => {
    j9 && !W2.current && j9($2);
  }, [$2]), (0, import_jsx_runtime61.jsxs)("div", Object.assign({ onClick: () => {
    N2 || E(!$2);
  }, className: "flex items-center" }, { children: [(0, import_jsx_runtime61.jsx)("button", Object.assign({ ref: f19, className: F2, role: "switch", "aria-checked": $2, "aria-labelledby": `${X2}-label`, disabled: N2 }, R2, { children: (0, import_jsx_runtime61.jsx)("span", { ref: H2, className: h16.inner({ radius: y6, size: C3, state: A2 }) }) })), (0, import_jsx_runtime61.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime61.jsx)("label", Object.assign({ id: `${X2}-label`, htmlFor: X2, className: twMerge(h16.label({ disabled: N2, size: C3, className: O6 })) }, { children: z3 })), x12 && (0, import_jsx_runtime61.jsx)("span", Object.assign({ className: twMerge(h16.description({ disabled: N2, size: C3, className: k4 })) }, { children: x12 })), v7 && (0, import_jsx_runtime61.jsx)("span", Object.assign({ className: twMerge(h16.error({ disabled: N2, size: C3, className: S2 })) }, { children: v7 }))] }))] }));
});
f7.displayName = "Switch";

// node_modules/@rewind-ui/core/dist/components/Table/Table.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Table/Table.context.js
var [e49, n32] = t("Table compound components cannot be rendered outside the Table component");

// node_modules/@rewind-ui/core/dist/components/Table/Tbody/Tbody.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var import_react74 = __toESM(require_react());
var m26 = {};
var a26 = (0, import_react74.forwardRef)((i49, a60) => {
  const c55 = Object.assign(Object.assign({}, m26), i49), { className: l40, children: d33 } = c55, n83 = __rest(c55, ["className", "children"]), { borderStyle: b9, horizontalBorders: p31, size: f19 } = n32(), h16 = q("Table"), j9 = t15(i49.id);
  return (0, import_jsx_runtime62.jsx)("tbody", Object.assign({ id: j9, ref: a60, className: h16.tbody({ borderStyle: b9, horizontalBorders: p31, size: f19 }) }, n83, { children: d33 }));
});
a26.displayName = "Tbody";

// node_modules/@rewind-ui/core/dist/components/Table/Td/Td.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var import_react75 = __toESM(require_react());
var o41 = {};
var a27 = (0, import_react75.forwardRef)((m56, a60) => {
  const c55 = Object.assign(Object.assign({}, o41), m56), { className: l40, children: n83 } = c55, d33 = __rest(c55, ["className", "children"]), p31 = q("Table"), f19 = t15(m56.id), { size: j9 } = n32();
  return (0, import_jsx_runtime63.jsx)("td", Object.assign({ id: f19, ref: a60, className: p31.td({ className: l40, size: j9 }) }, d33, { children: n83 }));
});
a27.displayName = "Td";

// node_modules/@rewind-ui/core/dist/components/Table/Tfoot/Tfoot.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_react76 = __toESM(require_react());
var m28 = {};
var a28 = (0, import_react76.forwardRef)((i49, a60) => {
  const c55 = Object.assign(Object.assign({}, m28), i49), { className: l40, children: f19 } = c55, n83 = __rest(c55, ["className", "children"]), { borderStyle: d33, footerBorders: p31, size: b9 } = n32(), j9 = q("Table"), h16 = t15(i49.id);
  return (0, import_jsx_runtime64.jsx)("tfoot", Object.assign({ id: h16, ref: a60, className: j9.tfoot({ borderStyle: d33, footerBorders: p31, size: b9 }) }, n83, { children: f19 }));
});
a28.displayName = "Tfoot";

// node_modules/@rewind-ui/core/dist/components/Table/Th/Th.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var import_react77 = __toESM(require_react());
var o42 = {};
var a29 = (0, import_react77.forwardRef)((m56, a60) => {
  const c55 = Object.assign(Object.assign({}, o42), m56), { className: l40, children: n83 } = c55, p31 = __rest(c55, ["className", "children"]), h16 = q("Table"), d33 = t15(m56.id), { size: f19 } = n32();
  return (0, import_jsx_runtime65.jsx)("th", Object.assign({ id: d33, ref: a60, className: h16.th({ className: l40, size: f19 }) }, p31, { children: n83 }));
});
a29.displayName = "Th";

// node_modules/@rewind-ui/core/dist/components/Table/Thead/Thead.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var import_react78 = __toESM(require_react());
var i21 = {};
var m30 = (0, import_react78.forwardRef)((a60, m56) => {
  const d33 = Object.assign(Object.assign({}, i21), a60), { className: c55, children: l40 } = d33, h16 = __rest(d33, ["className", "children"]), { borderStyle: n83, headerBorders: p31, headerColor: b9, size: f19 } = n32(), j9 = q("Table"), u29 = t15(a60.id);
  return (0, import_jsx_runtime66.jsx)("thead", Object.assign({ id: u29, ref: m56, className: j9.thead({ borderStyle: n83, headerBorders: p31, headerColor: b9, size: f19 }) }, h16, { children: l40 }));
});
m30.displayName = "Thead";

// node_modules/@rewind-ui/core/dist/components/Table/Tr/Tr.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var import_react80 = __toESM(require_react());
var m31 = { color: "none" };
var d22 = (0, import_react80.forwardRef)((s59, d33) => {
  const p31 = Object.assign(Object.assign({}, m31), s59), { className: b9, children: v7, color: u29 } = p31, f19 = __rest(p31, ["className", "children", "color"]), { borderStyle: h16, verticalBorders: j9, hoverable: N2, striped: g17, stripePosition: B } = n32(), O6 = q("Table"), T2 = (0, import_react80.useRef)(null), x12 = useMergeRefs([T2, d33 || null]), y6 = t15(s59.id), [P3, S2] = (0, import_react80.useState)(O6.tr({ borderStyle: h16, verticalBorders: j9, className: b9, color: u29, hoverable: N2, striped: g17 }));
  return (0, import_react80.useEffect)(() => {
    var r107, e114;
    const o103 = null === (e114 = null === (r107 = null == T2 ? void 0 : T2.current) || void 0 === r107 ? void 0 : r107.parentElement) || void 0 === e114 ? void 0 : e114.tagName;
    S2(O6.tr({ borderStyle: h16, verticalBorders: j9, className: b9, color: u29, hoverable: "TBODY" === o103 && N2, striped: "TBODY" === o103 && g17, stripePosition: B }));
  }, [h16, b9, u29, N2, g17, B, O6, j9]), (0, import_jsx_runtime67.jsx)("tr", Object.assign({ id: y6, ref: x12, className: P3 }, f19, { children: v7 }));
});
d22.displayName = "Tr";

// node_modules/@rewind-ui/core/dist/components/Table/Table.js
var import_react81 = __toESM(require_react());
var n34 = { borderStyle: "solid", footerBorders: true, headerBorders: true, headerColor: "gray", horizontalBorders: true, hoverable: true, outerBorders: true, radius: "lg", size: "md", striped: true, stripePosition: "even", verticalBorders: false };
var p16 = (0, import_react81.forwardRef)((s59, t123) => {
  const d33 = Object.assign(Object.assign({}, n34), s59), { borderStyle: i49, children: a60, className: l40, color: h16, footerBorders: p31, headerBorders: b9, headerColor: f19, horizontalBorders: B, hoverable: T2, outerBorders: j9, radius: u29, size: v7, striped: y6, stripePosition: z3, verticalBorders: g17 } = d33, N2 = __rest(d33, ["borderStyle", "children", "className", "color", "footerBorders", "headerBorders", "headerColor", "horizontalBorders", "hoverable", "outerBorders", "radius", "size", "striped", "stripePosition", "verticalBorders"]), O6 = q("Table"), P3 = t15(s59.id), S2 = { borderStyle: i49, footerBorders: p31, headerBorders: b9, headerColor: f19, horizontalBorders: B, hoverable: T2, outerBorders: j9, size: v7, striped: y6, stripePosition: z3, verticalBorders: g17 };
  return (0, import_jsx_runtime68.jsx)(e49, Object.assign({ value: S2 }, { children: (0, import_jsx_runtime68.jsx)("div", Object.assign({ id: P3, ref: t123, className: O6.wrapper({ borderStyle: i49, className: l40, outerBorders: j9, radius: u29 }) }, N2, { children: (0, import_jsx_runtime68.jsx)("table", Object.assign({ className: O6.table({ radius: u29, size: v7 }) }, { children: a60 })) })) }));
});
p16.displayName = "Table";
var b3 = Object.assign(p16, { Thead: m30, Tbody: a26, Tfoot: a28, Tr: d22, Th: a29, Td: a27 });

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tabs/Tab/Tab.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.context.js
var [e52, n35] = t("Tabs compound components cannot be rendered outside the Tabs component");

// node_modules/@rewind-ui/core/dist/components/Tabs/Tab/Tab.js
var import_react82 = __toESM(require_react());
var c33 = (0, import_react82.forwardRef)((o103, c55) => {
  const n83 = q("Tabs"), { anchor: l40, children: m56, className: b9 } = o103, d33 = __rest(o103, ["anchor", "children", "className"]), { activeTabAnchor: h16, baseId: p31, color: f19, fullWidth: u29, radius: j9, setActiveTabAnchor: x12, size: N2, tone: T2 } = Object.assign({}, n35()), v7 = `tab-${p31}-${l40}`, $2 = `tabpanel-${p31}-${l40}`, g17 = l40 === h16, A2 = g17 ? "active" : "inactive", y6 = (0, import_react82.useMemo)(() => twMerge(n83.tab({ className: b9, color: f19, fullWidth: u29, radius: j9, size: N2, state: A2, tone: T2 })), [b9, f19, u29, j9, N2, A2, n83, T2]);
  return (0, import_jsx_runtime69.jsx)("button", Object.assign({ id: v7, ref: c55, type: "button", role: "tab", "aria-selected": g17, "aria-controls": $2, tabIndex: g17 ? 0 : -1, onClick: () => {
    x12(l40);
  }, className: y6 }, d33, { children: m56 }));
});
c33.displayName = "Tab";

// node_modules/@rewind-ui/core/dist/components/Tabs/TabContent/TabContent.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var r44 = (r107) => {
  const { activeTabAnchor: o103, baseId: i49, method: l40 } = n35(), { anchor: c55, children: b9 } = r107, d33 = __rest(r107, ["anchor", "children"]), s59 = `tabpanel-${i49}-${c55}`, m56 = `tab-${i49}-${c55}`, h16 = c55 === o103, p31 = (0, import_jsx_runtime70.jsx)("div", Object.assign({ id: s59, style: { display: h16 ? "block" : "none" }, role: "tabpanel", "aria-labelledby": m56, "aria-hidden": !h16 }, d33, { children: b9 }));
  return "unmount" === l40 ? h16 ? p31 : (0, import_jsx_runtime70.jsx)(import_jsx_runtime70.Fragment, {}) : p31;
};
r44.displayName = "TabContent";

// node_modules/@rewind-ui/core/dist/components/Tabs/TabList/TabList.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var import_react83 = __toESM(require_react());
var m32 = (m56) => {
  const { children: l40, className: n83 = "" } = m56, c55 = __rest(m56, ["children", "className"]), p31 = (0, import_react83.useRef)(null), d33 = q("Tabs"), h16 = t15(m56.id);
  return t48(p31), (0, import_jsx_runtime71.jsx)("div", Object.assign({ id: h16, ref: p31, role: "tablist", "aria-orientation": "horizontal", className: twMerge(d33.list({ className: n83 })) }, c55, { children: l40 }));
};
m32.displayName = "TabList";

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.js
var import_react84 = __toESM(require_react());
var c34 = { color: "dark", method: "hide", radius: "none", size: "md", tone: "line" };
var l26 = (0, import_react84.forwardRef)((o103, i49) => {
  const r107 = Object.assign(Object.assign({}, c34), o103), { children: n83, color: l40, defaultTab: b9, fullWidth: f19, method: h16, radius: u29, size: p31, tone: T2 } = r107, j9 = __rest(r107, ["children", "color", "defaultTab", "fullWidth", "method", "radius", "size", "tone"]), g17 = q("Tabs"), O6 = t15(o103.id), [v7, x12] = (0, import_react84.useState)(b9), z3 = { activeTabAnchor: v7, baseId: O6, color: l40, fullWidth: f19, method: h16, radius: u29, setActiveTabAnchor: x12, size: p31, tone: T2 };
  return (0, import_jsx_runtime72.jsx)(e52, Object.assign({ value: z3 }, { children: (0, import_jsx_runtime72.jsx)("div", Object.assign({ id: O6, ref: i49, className: g17.wrapper({ fullWidth: f19 }) }, j9, { children: n83 })) }));
});
l26.displayName = "Tabs";
var b4 = Object.assign(l26, { Tab: c33, List: m32, Content: r44 });

// node_modules/@rewind-ui/core/dist/components/Text/Text.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var import_react85 = __toESM(require_react());
var o45 = { color: "dark", leading: "normal", size: "base", tracking: "normal", weight: "normal" };
var c35 = (0, import_react85.forwardRef)((s59, c55) => {
  const m56 = d5("Text", s59.variant), l40 = q("Text"), g17 = Object.assign(Object.assign(Object.assign({}, o45), m56), s59), { as: d33, children: h16, className: p31 = "", color: f19, leading: j9, size: x12, tracking: b9, variant: k4, weight: u29 } = g17, N2 = __rest(g17, ["as", "children", "className", "color", "leading", "size", "tracking", "variant", "weight"]), v7 = (0, import_react85.useMemo)(() => l40({ className: p31, color: f19, leading: j9, size: x12, tracking: b9, weight: u29 }), [p31, f19, j9, x12, l40, b9, u29]), w9 = d33 || "span", z3 = t15(s59.id);
  return (0, import_jsx_runtime73.jsx)(w9, Object.assign({ id: z3, ref: c55, className: v7 }, N2, { children: h16 }));
});
c35.displayName = "Text";

// node_modules/@rewind-ui/core/dist/components/Toast/Toast.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Toast/use-toast.hook.js
var t51 = () => ({ add: (t123) => {
  const e114 = new CustomEvent("toasts:add", { detail: t123 });
  document.dispatchEvent(e114);
}, update: (t123) => {
  const e114 = new CustomEvent("toasts:update", { detail: t123 });
  document.dispatchEvent(e114);
}, remove: (t123) => {
  const e114 = new CustomEvent("toasts:remove", { detail: { id: t123 } });
  document.dispatchEvent(e114);
}, clear: () => {
  const t123 = new CustomEvent("toasts:clear", {});
  document.dispatchEvent(t123);
} });

// node_modules/@rewind-ui/core/dist/components/Toast/Toast.js
var import_react86 = __toESM(require_react());
var O5 = { closeOnClick: true, color: "blue", pauseOnHover: true, radius: "md", shadow: "base", shadowColor: "gray", showProgress: true, tone: "solid" };
var b5 = { error: (0, import_jsx_runtime74.jsx)(c3, {}), info: (0, import_jsx_runtime74.jsx)(s10, {}), question: (0, import_jsx_runtime74.jsx)(t18, {}), success: (0, import_jsx_runtime74.jsx)(e16, {}), warning: (0, import_jsx_runtime74.jsx)(s11, {}) };
var v3 = (0, import_react86.forwardRef)((t123, n83) => {
  const i49 = d5("Toast", t123.variant), a60 = q("Toast"), c55 = Object.assign(Object.assign(Object.assign({}, O5), i49), t123), { actions: u29 = [], className: v7 = "", closeOnClick: w9, color: N2, description: C3 = "", duration: k4 = 3e3, halted: y6 = false, iconType: T2, pauseOnHover: x12, radius: A2, shadow: F2, shadowColor: P3, showProgress: q3, title: H2 = "", tone: I, variant: W2 } = c55, E = __rest(c55, ["actions", "className", "closeOnClick", "color", "description", "duration", "halted", "iconType", "pauseOnHover", "radius", "shadow", "shadowColor", "showProgress", "title", "tone", "variant"]), [M3, $2] = (0, import_react86.useState)(y6), [D, L] = (0, import_react86.useState)(y6 ? 1e3 : 0), Q2 = t51(), S2 = t15(t123.id), z3 = (0, import_react86.useRef)(null), B = (0, import_react86.useRef)(null), G3 = !!H2, J2 = (0, import_react86.useMemo)(() => twMerge(a60.toast({ className: v7, color: N2, tone: I, radius: A2, shadow: F2, shadowColor: P3 })), [v7, N2, I, A2, F2, P3, a60]), K2 = (o103) => {
    B.current || (B.current = o103);
    o103 - (B.current || 0) >= 50 && (L((o104) => o104 + 50), B.current = o103), z3.current = requestAnimationFrame(K2);
  };
  return (0, import_react86.useEffect)(() => {
    if (M3 || (z3.current = requestAnimationFrame(K2)), x12)
      return () => {
        z3.current && cancelAnimationFrame(z3.current), B.current && cancelAnimationFrame(B.current);
      };
  }, [M3]), (0, import_react86.useEffect)(() => {
    k4 && D >= k4 && Q2.remove(S2);
  }, [D]), (0, import_jsx_runtime74.jsxs)("div", Object.assign({ id: S2, ref: n83, role: "alert", onMouseEnter: () => $2(true), onMouseLeave: () => $2(false), className: J2 }, E, { children: [k4 > 0 && q3 && (0, import_jsx_runtime74.jsx)("div", Object.assign({ className: a60.progress({ color: N2, tone: I }) }, { children: (0, import_jsx_runtime74.jsx)("div", { className: a60.progressInner({ color: N2, tone: I }), style: { width: 100 * D / k4 + "%", transitionDuration: "50ms" } }) })), (0, import_jsx_runtime74.jsxs)("div", Object.assign({ className: a60.contentWrapper({ closeOnClick: w9 }), onClick: () => {
    w9 && Q2.remove(S2);
  } }, { children: [T2 && b5[T2], (0, import_jsx_runtime74.jsxs)("div", Object.assign({ className: a60.content() }, { children: [H2 && (0, import_jsx_runtime74.jsx)("h4", Object.assign({ className: a60.title() }, { children: H2 })), C3 && (0, import_jsx_runtime74.jsx)("p", Object.assign({ className: a60.description({ hasTitle: G3 }) }, { children: C3 }))] }))] })), u29.length > 0 && (0, import_jsx_runtime74.jsx)("div", Object.assign({ className: a60.actionsWrapper({ tone: I, color: N2 }) }, { children: u29.map((o103, r107) => (0, import_jsx_runtime74.jsx)("button", Object.assign({ className: a60.action({ primary: o103.primary, tone: I, color: N2 }), onClick: o103.onClick }, { children: o103.label }), `action-${S2}-${r107}`)) }))] }));
});
v3.displayName = "Toast";

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/toast.reducer.js
var a33;
!function(a60) {
  a60.add = "ADD", a60.update = "UPDATE", a60.remove = "REMOVE", a60.clear = "CLEAR";
}(a33 || (a33 = {}));
var e58 = (e114, t123) => {
  switch (t123.type) {
    case a33.add:
      if (e114.length >= (t123.max || 3))
        return [...e114];
      if (e114.find((a60) => a60.id === t123.payload.id))
        return [...e114];
      if (!t123.payload.id) {
        const a60 = Math.random().toString(36);
        t123.payload.id = `toast-${a60}`;
      }
      return [t123.payload, ...e114];
    case a33.update:
      return e114.map((a60) => a60.id === t123.payload.id ? Object.assign(Object.assign({}, a60), t123.payload) : a60);
    case a33.remove:
      return e114.filter((a60) => a60.id !== t123.payload.id);
    case a33.clear:
      return [];
    default:
      return e114;
  }
};

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var import_react112 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var e64 = __toESM(require_react());
var import_react96 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/create-render-step.js
function e59(e114) {
  let n83 = [], t123 = [], s59 = 0, c55 = false, l40 = false;
  const o103 = /* @__PURE__ */ new WeakSet(), r107 = { schedule: (e115, l41 = false, r108 = false) => {
    const d33 = r108 && c55, h16 = d33 ? n83 : t123;
    return l41 && o103.add(e115), -1 === h16.indexOf(e115) && (h16.push(e115), d33 && c55 && (s59 = n83.length)), e115;
  }, cancel: (e115) => {
    const n84 = t123.indexOf(e115);
    -1 !== n84 && t123.splice(n84, 1), o103.delete(e115);
  }, process: (d33) => {
    if (c55)
      l40 = true;
    else {
      if (c55 = true, [n83, t123] = [t123, n83], t123.length = 0, s59 = n83.length, s59)
        for (let t124 = 0; t124 < s59; t124++) {
          const s60 = n83[t124];
          s60(d33), o103.has(s60) && (r107.schedule(s60), e114());
        }
      c55 = false, l40 && (l40 = false, r107.process(d33));
    }
  } };
  return r107;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/data.js
var s32 = { delta: 0, timestamp: 0, isProcessing: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/index.js
var t52 = true;
var s33 = false;
var a34 = ["read", "update", "preRender", "render", "postRender"];
var n38 = a34.reduce((r107, t123) => (r107[t123] = e59(() => s33 = true), r107), {});
var o46 = (e114) => n38[e114].process(s32);
var i23 = (e114) => {
  s33 = false, s32.delta = t52 ? 1e3 / 60 : Math.max(Math.min(e114 - s32.timestamp, 40), 1), s32.timestamp = e114, s32.isProcessing = true, a34.forEach(o46), s32.isProcessing = false, s33 && (t52 = false, requestAnimationFrame(i23));
};
var c36 = a34.reduce((e114, a60) => {
  const o103 = n38[a60];
  return e114[a60] = (e115, a61 = false, n83 = false) => (s33 || (s33 = true, t52 = true, s32.isProcessing || requestAnimationFrame(i23)), o103.schedule(e115, a61, n83)), e114;
}, {});
function m33(e114) {
  a34.forEach((r107) => n38[r107].cancel(e114));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-force-update.js
var import_react89 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-is-mounted.js
var import_react88 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var import_react87 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-browser.js
var e60 = "undefined" != typeof document;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var m34 = e60 ? import_react87.useLayoutEffect : import_react87.useEffect;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-is-mounted.js
function o48() {
  const o103 = (0, import_react88.useRef)(false);
  return m34(() => (o103.current = true, () => {
    o103.current = false;
  }), []), o103;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-force-update.js
function m35() {
  const m56 = o48(), [n83, i49] = (0, import_react89.useState)(0), p31 = (0, import_react89.useCallback)(() => {
    m56.current && i49(n83 + 1);
  }, [n83]);
  return [(0, import_react89.useCallback)(() => c36.postRender(p31), [p31]), n83];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var e62 = __toESM(require_react());
var import_react93 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/PresenceContext.js
var import_react90 = __toESM(require_react());
var r48 = (0, import_react90.createContext)(null);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-constant.js
var import_react91 = __toESM(require_react());
function n39(n83) {
  const t123 = (0, import_react91.useRef)(null);
  return null === t123.current && (t123.current = n83()), t123.current;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.js
var t54 = __toESM(require_react());
var import_react92 = __toESM(require_react());
var o51 = class extends t54.Component {
  getSnapshotBeforeUpdate(t123) {
    const e114 = this.props.childRef.current;
    if (e114 && t123.isPresent && !this.props.isPresent) {
      const t124 = this.props.sizeRef.current;
      t124.height = e114.offsetHeight || 0, t124.width = e114.offsetWidth || 0, t124.top = e114.offsetTop, t124.left = e114.offsetLeft;
    }
    return null;
  }
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function i24({ children: i49, isPresent: s59 }) {
  const p31 = (0, import_react92.useId)(), h16 = (0, import_react92.useRef)(null), d33 = (0, import_react92.useRef)({ width: 0, height: 0, top: 0, left: 0 });
  return (0, import_react92.useInsertionEffect)(() => {
    const { width: t123, height: e114, top: n83, left: r107 } = d33.current;
    if (s59 || !h16.current || !t123 || !e114)
      return;
    h16.current.dataset.motionPopId = p31;
    const o103 = document.createElement("style");
    return document.head.appendChild(o103), o103.sheet && o103.sheet.insertRule(`
          [data-motion-pop-id="${p31}"] {
            position: absolute !important;
            width: ${t123}px !important;
            height: ${e114}px !important;
            top: ${n83}px !important;
            left: ${r107}px !important;
          }
        `), () => {
      document.head.removeChild(o103);
    };
  }, [s59]), t54.createElement(o51, { isPresent: s59, childRef: h16, sizeRef: d33 }, t54.cloneElement(i49, { ref: h16 }));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var n41 = ({ children: n83, initial: m56, isPresent: a60, onExitComplete: f19, custom: p31, presenceAffectsLayout: u29, mode: l40 }) => {
  const d33 = n39(c37), E = (0, import_react93.useId)(), P3 = (0, import_react93.useMemo)(() => ({ id: E, initial: m56, isPresent: a60, custom: p31, onExitComplete: (e114) => {
    d33.set(e114, true);
    for (const e115 of d33.values())
      if (!e115)
        return;
    f19 && f19();
  }, register: (e114) => (d33.set(e114, false), () => d33.delete(e114)) }), u29 ? void 0 : [a60]);
  return (0, import_react93.useMemo)(() => {
    d33.forEach((e114, t123) => d33.set(t123, false));
  }, [a60]), e62.useEffect(() => {
    !a60 && !d33.size && f19 && f19();
  }, [a60]), "popLayout" === l40 && (n83 = e62.createElement(i24, { isPresent: a60 }, n83)), e62.createElement(r48.Provider, { value: P3 }, n83);
};
function c37() {
  return /* @__PURE__ */ new Map();
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
var import_react94 = __toESM(require_react());
var r51 = (0, import_react94.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
var import_react95 = __toESM(require_react());
function t56(t123) {
  return (0, import_react95.useEffect)(() => () => t123(), []);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/noop.js
var o54 = (o103) => o103;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/errors.js
var e63 = o54;
var r53 = o54;
e63 = (o103, e114) => {
  o103 || "undefined" == typeof console || console.warn(e114);
}, r53 = (o103, e114) => {
  if (!o103)
    throw new Error(e114);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var p18 = (e114) => e114.key || "";
var d24 = ({ children: d33, custom: h16, initial: E = true, onExitComplete: y6, exitBeforeEnter: x12, presenceAffectsLayout: w9 = true, mode: j9 = "sync" }) => {
  r53(!x12, "Replace exitBeforeEnter with mode='wait'");
  const g17 = (0, import_react96.useContext)(r51).forceRender || m35()[0], k4 = o48(), v7 = function(e114) {
    const t123 = [];
    return import_react96.Children.forEach(e114, (e115) => {
      (0, import_react96.isValidElement)(e115) && t123.push(e115);
    }), t123;
  }(d33);
  let A2 = v7;
  const L = (0, import_react96.useRef)(/* @__PURE__ */ new Map()).current, P3 = (0, import_react96.useRef)(A2), C3 = (0, import_react96.useRef)(/* @__PURE__ */ new Map()).current, O6 = (0, import_react96.useRef)(true);
  if (m34(() => {
    O6.current = false, function(e114, t123) {
      e114.forEach((e115) => {
        const r107 = p18(e115);
        t123.set(r107, e115);
      });
    }(v7, C3), P3.current = A2;
  }), t56(() => {
    O6.current = true, C3.clear(), L.clear();
  }), O6.current)
    return e64.createElement(e64.Fragment, null, A2.map((t123) => e64.createElement(n41, { key: p18(t123), isPresent: true, initial: !!E && void 0, presenceAffectsLayout: w9, mode: j9 }, t123)));
  A2 = [...A2];
  const z3 = P3.current.map(p18), b9 = v7.map(p18), B = z3.length;
  for (let e114 = 0; e114 < B; e114++) {
    const t123 = z3[e114];
    -1 !== b9.indexOf(t123) || L.has(t123) || L.set(t123, void 0);
  }
  return "wait" === j9 && L.size && (A2 = []), L.forEach((t123, r107) => {
    if (-1 !== b9.indexOf(r107))
      return;
    const n83 = C3.get(r107);
    if (!n83)
      return;
    const o103 = z3.indexOf(r107);
    let s59 = t123;
    if (!s59) {
      const t124 = () => {
        C3.delete(r107), L.delete(r107);
        const e114 = P3.current.findIndex((e115) => e115.key === r107);
        if (P3.current.splice(e114, 1), !L.size) {
          if (P3.current = v7, false === k4.current)
            return;
          g17(), y6 && y6();
        }
      };
      s59 = e64.createElement(n41, { key: p18(n83), isPresent: false, onExitComplete: t124, custom: h16, presenceAffectsLayout: w9, mode: j9 }, n83), L.set(r107, s59);
    }
    A2.splice(o103, 0, s59);
  }), A2 = A2.map((t123) => {
    const r107 = t123.key;
    return L.has(r107) ? t123 : e64.createElement(n41, { key: p18(t123), isPresent: true, presenceAffectsLayout: w9, mode: j9 }, t123);
  }), "wait" === j9 && A2.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`), e64.createElement(e64.Fragment, null, L.size ? A2 : A2.map((e114) => (0, import_react96.cloneElement)(e114)));
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/index.js
var t66 = __toESM(require_react());
var import_react104 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionConfigContext.js
var import_react97 = __toESM(require_react());
var o56 = (0, import_react97.createContext)({ transformPagePoint: (t123) => t123, isStatic: false, reducedMotion: "never" });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/index.js
var import_react98 = __toESM(require_react());
var r55 = (0, import_react98.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
var import_react100 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/LazyContext.js
var import_react99 = __toESM(require_react());
var r56 = (0, import_react99.createContext)({ strict: false });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
function s35(s59, p31, u29, f19) {
  const { visualElement: d33 } = (0, import_react100.useContext)(r55), x12 = (0, import_react100.useContext)(r56), C3 = (0, import_react100.useContext)(r48), l40 = (0, import_react100.useContext)(o56).reducedMotion, j9 = (0, import_react100.useRef)();
  f19 = f19 || x12.renderer, !j9.current && f19 && (j9.current = f19(s59, { visualState: p31, parent: d33, props: u29, presenceContext: C3, blockInitialAnimation: !!C3 && false === C3.initial, reducedMotionConfig: l40 }));
  const M3 = j9.current;
  (0, import_react100.useInsertionEffect)(() => {
    M3 && M3.update(u29, C3);
  }), m34(() => {
    M3 && M3.render();
  }), (0, import_react100.useEffect)(() => {
    M3 && M3.updateFeatures();
  });
  return (window.HandoffAppearAnimations ? m34 : import_react100.useEffect)(() => {
    M3 && M3.animationState && M3.animationState.animateChanges();
  }), M3;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
var import_react101 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-ref-object.js
function t61(t123) {
  return "object" == typeof t123 && Object.prototype.hasOwnProperty.call(t123, "current");
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
function n44(n83, r107, u29) {
  return (0, import_react101.useCallback)((t123) => {
    t123 && n83.mount && n83.mount(t123), r107 && (t123 ? r107.mount(t123) : r107.unmount()), u29 && ("function" == typeof u29 ? u29(t123) : t61(u29) && (u29.current = t123));
  }, [r107]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/create.js
var import_react102 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/is-variant-label.js
function r57(r107) {
  return "string" == typeof r107 || Array.isArray(r107);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
function t63(t123) {
  return "object" == typeof t123 && "function" == typeof t123.start;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/variant-props.js
var i25 = ["animate", "whileInView", "whileFocus", "whileHover", "whileTap", "whileDrag", "exit"];
var e66 = ["initial", ...i25];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.js
function r58(r107) {
  return t63(r107.animate) || e66.some((o103) => r57(r107[o103]));
}
function t64(o103) {
  return Boolean(r58(o103) || o103.variants);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/utils.js
function t65(t123, n83) {
  if (r58(t123)) {
    const { initial: r107, animate: n84 } = t123;
    return { initial: false === r107 || r57(r107) ? r107 : void 0, animate: r57(n84) ? n84 : void 0 };
  }
  return false !== t123.inherit ? n83 : {};
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/create.js
function o59(o103) {
  const { initial: m56, animate: e114 } = t65(o103, (0, import_react102.useContext)(r55));
  return (0, import_react102.useMemo)(() => ({ initial: m56, animate: e114 }), [a35(m56), a35(e114)]);
}
function a35(i49) {
  return Array.isArray(i49) ? i49.join(" ") : i49;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/definitions.js
var n45 = { animation: ["animate", "variants", "whileHover", "whileTap", "exit", "whileInView", "whileFocus", "whileDrag"], exit: ["exit"], drag: ["drag", "dragControls"], focus: ["whileFocus"], hover: ["whileHover", "onHoverStart", "onHoverEnd"], tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"], pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"], inView: ["whileInView", "onViewportEnter", "onViewportLeave"], layout: ["layout", "layoutId"] };
var o60 = {};
for (const a60 in n45)
  o60[a60] = { isEnabled: (o103) => n45[a60].some((n83) => !!o103[n83]) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/load-features.js
function i27(i49) {
  for (const n83 in i49)
    o60[n83] = { ...o60[n83], ...i49[n83] };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.js
var import_react103 = __toESM(require_react());
var r60 = (0, import_react103.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/symbol.js
var o62 = Symbol.for("motionComponentSymbol");

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/index.js
function x6({ preloadedFeatures: a60, createVisualElement: x12, useRender: d33, useVisualState: j9, Component: E }) {
  a60 && i27(a60);
  const C3 = (0, import_react104.forwardRef)(function(e114, l40) {
    let p31;
    const C4 = { ...(0, import_react104.useContext)(o56), ...e114, layoutId: v4(e114) }, { isStatic: y6 } = C4, L = o59(e114), M3 = j9(e114, y6);
    if (!y6 && e60) {
      L.visualElement = s35(E, M3, C4, x12);
      const t123 = (0, import_react104.useContext)(r60), e115 = (0, import_react104.useContext)(r56).strict;
      L.visualElement && (p31 = L.visualElement.loadFeatures(C4, e115, a60, t123));
    }
    return t66.createElement(r55.Provider, { value: L }, p31 && L.visualElement ? t66.createElement(p31, { visualElement: L.visualElement, ...C4 }) : null, d33(E, e114, n44(M3, L.visualElement, l40), M3, y6, L.visualElement));
  });
  return C3[o62] = E, C3;
}
function v4({ layoutId: t123 }) {
  const e114 = (0, import_react104.useContext)(r51).id;
  return e114 && void 0 !== t123 ? e114 + "-" + t123 : t123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
function e68(e114) {
  function t123(t124, o104 = {}) {
    return x6(e114(t124, o104));
  }
  if ("undefined" == typeof Proxy)
    return t123;
  const o103 = /* @__PURE__ */ new Map();
  return new Proxy(t123, { get: (n83, e115) => (o103.has(e115) || o103.set(e115, t123(e115)), o103.get(e115)) });
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
var e69 = ["animate", "circle", "defs", "desc", "ellipse", "g", "image", "line", "filter", "marker", "mask", "metadata", "path", "pattern", "polygon", "polyline", "rect", "stop", "switch", "symbol", "svg", "text", "tspan", "use", "view"];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
function t67(t123) {
  return "string" == typeof t123 && !t123.includes("-") && !!(e69.indexOf(t123) > -1 || /[A-Z]/.test(t123));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/use-render.js
var import_react107 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/use-props.js
var import_react105 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-correction.js
var n46 = {};
function t68(t123) {
  Object.assign(n46, t123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/transform.js
var e70 = ["transformPerspective", "x", "y", "z", "translateX", "translateY", "translateZ", "scale", "scaleX", "scaleY", "rotate", "rotateX", "rotateY", "rotateZ", "skew", "skewX", "skewY"];
var t69 = new Set(e70);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
function r61(r107, { layout: i49, layoutId: s59 }) {
  return t69.has(r107) || r107.startsWith("origin") || (i49 || void 0 !== s59) && (!!n46[r107] || "opacity" === r107);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
var o64 = (o103) => Boolean(o103 && o103.getVelocity);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
var e71 = { x: "translateX", y: "translateY", z: "translateZ", transformPerspective: "perspective" };
var r62 = e70.length;
function n47(n83, { enableHardwareAcceleration: a60 = true, allowTransformNone: o103 = true }, s59, l40) {
  let i49 = "";
  for (let a61 = 0; a61 < r62; a61++) {
    const r107 = e70[a61];
    if (void 0 !== n83[r107]) {
      i49 += `${e71[r107] || r107}(${n83[r107]}) `;
    }
  }
  return a60 && !n83.z && (i49 += "translateZ(0)"), i49 = i49.trim(), l40 ? i49 = l40(n83, s59 ? "" : i49) : o103 && s59 && (i49 = "none"), i49;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
var s36 = (s59) => (t123) => "string" == typeof t123 && t123.startsWith(s59);
var t70 = s36("--");
var r63 = s36("var(--");
var a36 = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
var o65 = (o103, r107) => r107 && "number" == typeof o103 ? r107.transform(o103) : o103;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/clamp.js
var t71 = (t123, a60, h16) => Math.min(Math.max(h16, t123), a60);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/numbers/index.js
var r64 = { test: (t123) => "number" == typeof t123, parse: parseFloat, transform: (t123) => t123 };
var o66 = { ...r64, transform: (r107) => t71(0, 1, r107) };
var s37 = { ...r64, default: 1 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/utils.js
var s38 = (s59) => Math.round(1e5 * s59) / 1e5;
var d25 = /(-)?([\d]*\.?[\d])+/g;
var r65 = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var t72 = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function n48(s59) {
  return "string" == typeof s59;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/numbers/units.js
var s39 = (s59) => ({ test: (t123) => n48(t123) && t123.endsWith(s59) && 1 === t123.split(" ").length, parse: parseFloat, transform: (r107) => `${r107}${s59}` });
var t73 = s39("deg");
var e72 = s39("%");
var a37 = s39("px");
var o67 = s39("vh");
var p19 = s39("vw");
var n49 = { ...e72, parse: (r107) => e72.parse(r107) / 100, transform: (r107) => e72.transform(100 * r107) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
var o68 = { ...r64, transform: Math.round };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/number.js
var d26 = { borderWidth: a37, borderTopWidth: a37, borderRightWidth: a37, borderBottomWidth: a37, borderLeftWidth: a37, borderRadius: a37, radius: a37, borderTopLeftRadius: a37, borderTopRightRadius: a37, borderBottomRightRadius: a37, borderBottomLeftRadius: a37, width: a37, maxWidth: a37, height: a37, maxHeight: a37, size: a37, top: a37, right: a37, bottom: a37, left: a37, padding: a37, paddingTop: a37, paddingRight: a37, paddingBottom: a37, paddingLeft: a37, margin: a37, marginTop: a37, marginRight: a37, marginBottom: a37, marginLeft: a37, rotate: t73, rotateX: t73, rotateY: t73, rotateZ: t73, scale: s37, scaleX: s37, scaleY: s37, scaleZ: s37, skew: t73, skewX: t73, skewY: t73, distance: a37, translateX: a37, translateY: a37, translateZ: a37, x: a37, y: a37, z: a37, perspective: a37, transformPerspective: a37, opacity: o66, originX: n49, originY: n49, originZ: a37, zIndex: o68, fillOpacity: o66, strokeOpacity: o66, numOctaves: o68 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
function i28(i49, m56, f19, a60) {
  const { style: e114, vars: c55, transform: l40, transformOrigin: p31 } = i49;
  let u29 = false, g17 = false, d33 = true;
  for (const r107 in m56) {
    const i50 = m56[r107];
    if (t70(r107)) {
      c55[r107] = i50;
      continue;
    }
    const f20 = d26[r107], a61 = o65(i50, f20);
    if (t69.has(r107)) {
      if (u29 = true, l40[r107] = a61, !d33)
        continue;
      i50 !== (f20.default || 0) && (d33 = false);
    } else
      r107.startsWith("origin") ? (g17 = true, p31[r107] = a61) : e114[r107] = a61;
  }
  if (m56.transform || (u29 || a60 ? e114.transform = n47(i49.transform, f19, d33, a60) : e114.transform && (e114.transform = "none")), g17) {
    const { originX: r107 = "50%", originY: o103 = "50%", originZ: t123 = 0 } = p31;
    e114.transformOrigin = `${r107} ${o103} ${t123}`;
  }
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
var r66 = () => ({ style: {}, transform: {}, transformOrigin: {}, vars: {} });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/use-props.js
function a38(t123, o103, n83) {
  for (const a60 in o103)
    o64(o103[a60]) || r61(a60, n83) || (t123[a60] = o103[a60]);
}
function s40(e114, r107, s59) {
  const i49 = {};
  return a38(i49, e114.style || {}, e114), Object.assign(i49, function({ transformTemplate: e115 }, r108, a60) {
    return (0, import_react105.useMemo)(() => {
      const t123 = r66();
      return i28(t123, r108, { enableHardwareAcceleration: !a60 }, e115), Object.assign({}, t123.vars, t123.style);
    }, [r108]);
  }(e114, r107, s59)), e114.transformValues ? e114.transformValues(i49) : i49;
}
function i29(t123, e114, r107) {
  const o103 = {}, n83 = s40(t123, e114, r107);
  return t123.drag && false !== t123.dragListener && (o103.draggable = false, n83.userSelect = n83.WebkitUserSelect = n83.WebkitTouchCallout = "none", n83.touchAction = true === t123.drag ? "none" : "pan-" + ("x" === t123.drag ? "y" : "x")), void 0 === t123.tabIndex && (t123.onTap || t123.onTapStart || t123.whileTap) && (o103.tabIndex = 0), o103.style = n83, o103;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
var t75 = /* @__PURE__ */ new Set(["animate", "exit", "variants", "initial", "style", "values", "variants", "transition", "transformTemplate", "transformValues", "custom", "inherit", "onLayoutAnimationStart", "onLayoutAnimationComplete", "onLayoutMeasure", "onBeforeLayoutMeasure", "onAnimationStart", "onAnimationComplete", "onUpdate", "onDragStart", "onDrag", "onDragEnd", "onMeasureDragConstraints", "onDirectionLock", "onDragTransitionEnd", "_dragX", "_dragY", "onHoverStart", "onHoverEnd", "onViewportEnter", "onViewportLeave", "ignoreStrict", "viewport"]);
function n50(n83) {
  return n83.startsWith("while") || n83.startsWith("drag") && "draggable" !== n83 || n83.startsWith("layout") || n83.startsWith("onTap") || n83.startsWith("onPan") || t75.has(n83);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
var o69 = (o103) => !n50(o103);
function r67(r107) {
  r107 && (o69 = (o103) => o103.startsWith("on") ? !n50(o103) : r107(o103));
}
try {
  r67((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (t123) {
}
function i30(r107, i49, e114) {
  const n83 = {};
  for (const a60 in r107)
    "values" === a60 && "object" == typeof r107.values || (o69(a60) || true === e114 && n50(a60) || !i49 && !n50(a60) || r107.draggable && a60.startsWith("onDrag")) && (n83[a60] = r107[a60]);
  return n83;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/use-props.js
var import_react106 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
function r68(r107, n83, e114) {
  return "string" == typeof r107 ? r107 : a37.transform(n83 + e114 * r107);
}
function n51(t123, n83, e114) {
  return `${r68(n83, t123.x, t123.width)} ${r68(e114, t123.y, t123.height)}`;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/path.js
var s41 = { offset: "stroke-dashoffset", array: "stroke-dasharray" };
var t76 = { offset: "strokeDashoffset", array: "strokeDasharray" };
function a39(a60, o103, f19 = 1, e114 = 0, n83 = true) {
  a60.pathLength = 1;
  const h16 = n83 ? s41 : t76;
  a60[h16.offset] = a37.transform(-e114);
  const m56 = a37.transform(o103), y6 = a37.transform(f19);
  a60[h16.array] = `${m56} ${y6}`;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
function i31(i49, { attrX: s59, attrY: a60, attrScale: e114, originX: n83, originY: m56, pathLength: f19, pathSpacing: d33 = 1, pathOffset: l40 = 0, ...v7 }, p31, y6, g17) {
  if (i28(i49, v7, p31, g17), y6)
    return void (i49.style.viewBox && (i49.attrs.viewBox = i49.style.viewBox));
  i49.attrs = i49.style, i49.style = {};
  const { attrs: h16, style: c55, dimensions: x12 } = i49;
  h16.transform && (x12 && (c55.transform = h16.transform), delete h16.transform), x12 && (void 0 !== n83 || void 0 !== m56 || c55.transform) && (c55.transformOrigin = n51(x12, void 0 !== n83 ? n83 : 0.5, void 0 !== m56 ? m56 : 0.5)), void 0 !== s59 && (h16.x = s59), void 0 !== a60 && (h16.y = a60), void 0 !== e114 && (h16.scale = e114), void 0 !== f19 && a39(h16, f19, d33, l40, false);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
var r69 = () => ({ ...r66(), attrs: {} });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.js
var o70 = (o103) => "string" == typeof o103 && "svg" === o103.toLowerCase();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/use-props.js
function l27(l40, i49, m56, a60) {
  const n83 = (0, import_react106.useMemo)(() => {
    const t123 = r69();
    return i31(t123, i49, { enableHardwareAcceleration: false }, o70(a60), l40.transformTemplate), { ...t123.attrs, style: { ...t123.style } };
  }, [i49]);
  if (l40.style) {
    const t123 = {};
    a38(t123, l40.style, l40), n83.style = { ...t123, ...n83.style };
  }
  return n83;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/use-render.js
function p20(p31 = false) {
  return (l40, n83, u29, { latestValues: f19 }, c55) => {
    const a60 = (t67(l40) ? l27 : i29)(n83, f19, c55, l40), j9 = { ...i30(n83, "string" == typeof l40, p31), ...a60, ref: u29 }, { children: g17 } = n83, v7 = (0, import_react107.useMemo)(() => o64(g17) ? g17.get() : g17, [g17]);
    return (0, import_react107.createElement)(l40, { ...j9, children: v7 });
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
var e73 = (e114) => e114.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/render.js
function t79(t123, { style: e114, vars: s59 }, o103, n83) {
  Object.assign(t123.style, e114, n83 && n83.getProjectionStyles(o103));
  for (const e115 in s59)
    t123.style.setProperty(e115, s59[e115]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
var e74 = /* @__PURE__ */ new Set(["baseFrequency", "diffuseConstant", "kernelMatrix", "kernelUnitLength", "keySplines", "keyTimes", "limitingConeAngle", "markerHeight", "markerWidth", "numOctaves", "targetX", "targetY", "surfaceScale", "specularConstant", "specularExponent", "stdDeviation", "tableValues", "viewBox", "gradientTransform", "pathLength", "startOffset", "textLength", "lengthAdjust"]);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/render.js
function s42(s59, m56, i49, a60) {
  t79(s59, m56, void 0, a60);
  for (const r107 in m56.attrs)
    s59.setAttribute(e74.has(r107) ? r107 : e73(r107), m56.attrs[r107]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
function i32(i49, s59) {
  const { style: e114 } = i49, n83 = {};
  for (const r107 in e114)
    (o64(e114[r107]) || s59.style && o64(s59.style[r107]) || r61(r107, i49)) && (n83[r107] = e114[r107]);
  return n83;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
function s43(s59, i49) {
  const m56 = i32(s59, i49);
  for (const o103 in s59)
    if (o64(s59[o103]) || o64(i49[o103])) {
      m56[-1 !== e70.indexOf(o103) ? "attr" + o103.charAt(0).toUpperCase() + o103.substring(1) : o103] = s59[o103];
    }
  return m56;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var import_react108 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/resolve-variants.js
function t80(t123, o103, n83, i49 = {}, f19 = {}) {
  return "function" == typeof o103 && (o103 = o103(void 0 !== n83 ? n83 : t123.custom, i49, f19)), "string" == typeof o103 && (o103 = t123.variants && t123.variants[o103]), "function" == typeof o103 && (o103 = o103(void 0 !== n83 ? n83 : t123.custom, i49, f19)), o103;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
var r71 = (r107) => Array.isArray(r107);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/resolve-value.js
var o71 = (t123) => Boolean(t123 && "object" == typeof t123 && t123.mix && t123.toValue);
var e75 = (o103) => r71(o103) ? o103[o103.length - 1] || 0 : o103;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
function e76(e114) {
  const r107 = o64(e114) ? e114.get() : e114;
  return o71(r107) ? r107.toValue() : r107;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var c38 = (o103) => (r107, e114) => {
  const a60 = (0, import_react108.useContext)(r55), l40 = (0, import_react108.useContext)(r48), c55 = () => function({ scrapeMotionValuesFromProps: t123, createRenderState: o104, onMount: n83 }, r108, i49, e115) {
    const s59 = { latestValues: m36(r108, i49, e115, t123), renderState: o104() };
    return n83 && (s59.mount = (t124) => n83(r108, t124, s59)), s59;
  }(o103, r107, a60, l40);
  return e114 ? c55() : n39(c55);
};
function m36(t123, n83, i49, s59) {
  const c55 = {}, m56 = s59(t123, {});
  for (const t124 in m56)
    c55[t124] = e76(m56[t124]);
  let { initial: u29, animate: f19 } = t123;
  const p31 = r58(t123), d33 = t64(t123);
  n83 && d33 && !p31 && false !== t123.inherit && (void 0 === u29 && (u29 = n83.initial), void 0 === f19 && (f19 = n83.animate));
  let v7 = !!i49 && false === i49.initial;
  v7 = v7 || false === u29;
  const j9 = v7 ? f19 : u29;
  if (j9 && "boolean" != typeof j9 && !t63(j9)) {
    (Array.isArray(j9) ? j9 : [j9]).forEach((o103) => {
      const n84 = t80(t123, o103);
      if (!n84)
        return;
      const { transitionEnd: i50, transition: e114, ...s60 } = n84;
      for (const t124 in s60) {
        let o104 = s60[t124];
        if (Array.isArray(o104)) {
          o104 = o104[v7 ? o104.length - 1 : 0];
        }
        null !== o104 && (c55[t124] = o104);
      }
      for (const t124 in i50)
        c55[t124] = i50[t124];
    });
  }
  return c55;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/config-motion.js
var a40 = { useVisualState: c38({ scrapeMotionValuesFromProps: s43, createRenderState: r69, onMount: (e114, s59, { renderState: o103, latestValues: a60 }) => {
  try {
    o103.dimensions = "function" == typeof s59.getBBox ? s59.getBBox() : s59.getBoundingClientRect();
  } catch (t123) {
    o103.dimensions = { x: 0, y: 0, width: 0, height: 0 };
  }
  i31(o103, a60, { enableHardwareAcceleration: false }, o70(s59.tagName), e114.transformTemplate), s42(s59, o103);
} }) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/config-motion.js
var o72 = { useVisualState: c38({ scrapeMotionValuesFromProps: i32, createRenderState: r66 }) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
function n52(n83, { forwardMotionProps: m56 = false }, i49, s59) {
  return { ...t67(n83) ? a40 : o72, preloadedFeatures: i49, useRender: p20(m56), createVisualElement: s59, Component: n83 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/add-dom-event.js
function e77(e114, n83, t123, r107 = { passive: true }) {
  return e114.addEventListener(n83, t123, r107), () => e114.removeEventListener(n83, t123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.js
var t82 = (t123) => "mouse" === t123.pointerType ? "number" != typeof t123.button || t123.button <= 0 : false !== t123.isPrimary;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/event-info.js
function t83(r107, t123 = "page") {
  return { point: { x: r107[t123 + "X"], y: r107[t123 + "Y"] } };
}
var i33 = (i49) => (o103) => t82(o103) && i49(o103, t83(o103));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/add-pointer-event.js
function t84(t123, e114, n83, m56) {
  return e77(t123, e114, i33(n83), m56);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/pipe.js
var e78 = (e114, c55) => (o103) => c55(e114(o103));
var c39 = (...c55) => c55.reduce(e78);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
function n53(n83) {
  let t123 = null;
  return () => {
    const r107 = () => {
      t123 = null;
    };
    return null === t123 && (t123 = n83, r107);
  };
}
var t85 = n53("dragHorizontal");
var r72 = n53("dragVertical");
function e79(n83) {
  let e114 = false;
  if ("y" === n83)
    e114 = r72();
  else if ("x" === n83)
    e114 = t85();
  else {
    const n84 = t85(), l40 = r72();
    n84 && l40 ? e114 = () => {
      n84(), l40();
    } : (n84 && n84(), l40 && l40());
  }
  return e114;
}
function l28() {
  const n83 = e79(true);
  return !n83 || (n83(), false);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/Feature.js
var t86 = class {
  constructor(t123) {
    this.isMounted = false, this.node = t123;
  }
  update() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/hover.js
function i34(e114, r107) {
  const i49 = "pointer" + (r107 ? "enter" : "leave"), s59 = "onHover" + (r107 ? "Start" : "End");
  return t84(e114.current, i49, (t123, i50) => {
    if ("touch" === t123.type || l28())
      return;
    const m56 = e114.getProps();
    e114.animationState && m56.whileHover && e114.animationState.setActive("whileHover", r107), m56[s59] && c36.update(() => m56[s59](t123, i50));
  }, { passive: !e114.getProps()[s59] });
}
var s44 = class extends t86 {
  mount() {
    this.unmount = c39(i34(this.node, true), i34(this.node, false));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/focus.js
var s45 = class extends t86 {
  constructor() {
    super(...arguments), this.isActive = false;
  }
  onFocus() {
    let t123 = false;
    try {
      t123 = this.node.current.matches(":focus-visible");
    } catch (i49) {
      t123 = true;
    }
    t123 && this.node.animationState && (this.node.animationState.setActive("whileFocus", true), this.isActive = true);
  }
  onBlur() {
    this.isActive && this.node.animationState && (this.node.animationState.setActive("whileFocus", false), this.isActive = false);
  }
  mount() {
    this.unmount = c39(e77(this.node.current, "focus", () => this.onFocus()), e77(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
var e80 = (t123, n83) => !!n83 && (t123 === n83 || e80(t123, n83.parentElement));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/press.js
function h13(s59, t123) {
  if (!t123)
    return;
  const n83 = new PointerEvent("pointer" + s59);
  t123(n83, t83(n83));
}
var p21 = class extends t86 {
  constructor() {
    super(...arguments), this.removeStartListeners = o54, this.removeEndListeners = o54, this.removeAccessibleListeners = o54, this.startPointerPress = (e114, s59) => {
      if (this.removeEndListeners(), this.isPressing)
        return;
      const n83 = this.node.getProps(), i49 = t84(window, "pointerup", (e115, s60) => {
        if (!this.checkPressEnd())
          return;
        const { onTap: t123, onTapCancel: n84 } = this.node.getProps();
        c36.update(() => {
          e80(this.node.current, e115.target) ? t123 && t123(e115, s60) : n84 && n84(e115, s60);
        });
      }, { passive: !(n83.onTap || n83.onPointerUp) }), a60 = t84(window, "pointercancel", (e115, s60) => this.cancelPress(e115, s60), { passive: !(n83.onTapCancel || n83.onPointerCancel) });
      this.removeEndListeners = c39(i49, a60), this.startPress(e114, s59);
    }, this.startAccessiblePress = () => {
      const e114 = e77(this.node.current, "keydown", (e115) => {
        if ("Enter" !== e115.key || this.isPressing)
          return;
        this.removeEndListeners(), this.removeEndListeners = e77(this.node.current, "keyup", (e116) => {
          "Enter" === e116.key && this.checkPressEnd() && h13("up", (e117, s59) => {
            const { onTap: t124 } = this.node.getProps();
            t124 && c36.update(() => t124(e117, s59));
          });
        }), h13("down", (e116, s59) => {
          this.startPress(e116, s59);
        });
      }), t123 = e77(this.node.current, "blur", () => {
        this.isPressing && h13("cancel", (e115, s59) => this.cancelPress(e115, s59));
      });
      this.removeAccessibleListeners = c39(e114, t123);
    };
  }
  startPress(e114, s59) {
    this.isPressing = true;
    const { onTapStart: t123, whileTap: n83 } = this.node.getProps();
    n83 && this.node.animationState && this.node.animationState.setActive("whileTap", true), t123 && c36.update(() => t123(e114, s59));
  }
  checkPressEnd() {
    this.removeEndListeners(), this.isPressing = false;
    return this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive("whileTap", false), !l28();
  }
  cancelPress(e114, s59) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel: t123 } = this.node.getProps();
    t123 && c36.update(() => t123(e114, s59));
  }
  mount() {
    const e114 = this.node.getProps(), n83 = t84(this.node.current, "pointerdown", this.startPointerPress, { passive: !(e114.onTapStart || e114.onPointerStart) }), i49 = e77(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = c39(n83, i49);
  }
  unmount() {
    this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/viewport/observers.js
var e81 = /* @__PURE__ */ new WeakMap();
var t87 = /* @__PURE__ */ new WeakMap();
var n54 = (t123) => {
  const n83 = e81.get(t123.target);
  n83 && n83(t123);
};
var o73 = (e114) => {
  e114.forEach(n54);
};
function r73(n83, r107, s59) {
  const c55 = function({ root: e114, ...n84 }) {
    const r108 = e114 || document;
    t87.has(r108) || t87.set(r108, {});
    const s60 = t87.get(r108), c56 = JSON.stringify(n84);
    return s60[c56] || (s60[c56] = new IntersectionObserver(o73, { root: e114, ...n84 })), s60[c56];
  }(r107);
  return e81.set(n83, s59), c55.observe(n83), () => {
    e81.delete(n83), c55.unobserve(n83);
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/viewport/index.js
var r74 = { some: 0, all: 1 };
var o74 = class extends t86 {
  constructor() {
    super(...arguments), this.hasEnteredView = false, this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport: t123 = {} } = this.node.getProps(), { root: o103, margin: n83, amount: s59 = "some", once: i49 } = t123, a60 = { root: o103 ? o103.current : void 0, rootMargin: n83, threshold: "number" == typeof s59 ? s59 : r74[s59] };
    return r73(this.node.current, a60, (t124) => {
      const { isIntersecting: e114 } = t124;
      if (this.isInView === e114)
        return;
      if (this.isInView = e114, i49 && !e114 && this.hasEnteredView)
        return;
      e114 && (this.hasEnteredView = true), this.node.animationState && this.node.animationState.setActive("whileInView", e114);
      const { onViewportEnter: r107, onViewportLeave: o104 } = this.node.getProps(), n84 = e114 ? r107 : o104;
      n84 && n84(t124);
    });
  }
  mount() {
    this.startObserver();
  }
  update() {
    if ("undefined" == typeof IntersectionObserver)
      return;
    const { props: t123, prevProps: e114 } = this.node;
    ["amount", "margin", "root"].some(function({ viewport: t124 = {} }, { viewport: e115 = {} } = {}) {
      return (r107) => t124[r107] !== e115[r107];
    }(t123, e114)) && this.startObserver();
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/gestures.js
var t88 = { inView: { Feature: o74 }, tap: { Feature: p21 }, focus: { Feature: s45 }, hover: { Feature: s44 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/shallow-compare.js
function r75(r107, t123) {
  if (!Array.isArray(t123))
    return false;
  const n83 = t123.length;
  if (n83 !== r107.length)
    return false;
  for (let e114 = 0; e114 < n83; e114++)
    if (t123[e114] !== r107[e114])
      return false;
  return true;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.js
function o75(o103, r107, n83) {
  const e114 = o103.getProps();
  return t80(e114, r107, void 0 !== n83 ? n83 : e114.custom, function(t123) {
    const o104 = {};
    return t123.values.forEach((t124, r108) => o104[r108] = t124.get()), o104;
  }(o103), function(t123) {
    const o104 = {};
    return t123.values.forEach((t124, r108) => o104[r108] = t124.getVelocity()), o104;
  }(o103));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.js
var a41 = "framerAppearId";
var e82 = "data-" + e73(a41);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/time-conversion.js
var e83 = (e114) => 1e3 * e114;
var o76 = (e114) => e114 / 1e3;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.js
var r76 = { current: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.js
var r77 = (r107) => Array.isArray(r107) && "number" == typeof r107[0];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.js
function r78(i49) {
  return Boolean(!i49 || "string" == typeof i49 && n55[i49] || r77(i49) || Array.isArray(i49) && i49.every(r78));
}
var i35 = ([e114, r107, i49, n83]) => `cubic-bezier(${e114}, ${r107}, ${i49}, ${n83})`;
var n55 = { linear: "linear", ease: "ease", easeIn: "ease-in", easeOut: "ease-out", easeInOut: "ease-in-out", circIn: i35([0, 0.65, 0.55, 1]), circOut: i35([0.55, 0, 1, 0.45]), backIn: i35([0.31, 0.01, 0.66, -0.59]), backOut: i35([0.33, 1.53, 0.69, 0.99]) };
function a42(r107) {
  if (r107)
    return r77(r107) ? i35(r107) : Array.isArray(r107) ? r107.map(a42) : n55[r107];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/index.js
function r79(r107, a60, t123, { delay: i49 = 0, duration: n83, repeat: o103 = 0, repeatType: s59 = "loop", ease: l40, times: y6 } = {}) {
  const p31 = { [a60]: t123 };
  y6 && (p31.offset = y6);
  const d33 = a42(l40);
  return Array.isArray(d33) && (p31.easing = d33), r107.animate(p31, { delay: i49, duration: n83, easing: Array.isArray(d33) ? "linear" : d33, fill: "both", iterations: o103 + 1, direction: "reverse" === s59 ? "alternate" : "normal" });
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/supports.js
var t89 = { waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate") };
var o77 = {};
var e84 = {};
for (const a60 in t89)
  e84[a60] = () => (void 0 === o77[a60] && (o77[a60] = t89[a60]()), o77[a60]);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.js
function e85(e114, { repeat: o103, repeatType: p31 = "loop" }) {
  return e114[o103 && "loop" !== p31 && o103 % 2 == 1 ? 0 : e114.length - 1];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/cubic-bezier.js
var n56 = (t123, n83, o103) => (((1 - 3 * o103 + 3 * n83) * t123 + (3 * o103 - 6 * n83)) * t123 + 3 * n83) * t123;
var o78 = 1e-7;
var r80 = 12;
function e86(e114, i49, u29, s59) {
  if (e114 === i49 && u29 === s59)
    return o54;
  const c55 = (t123) => function(t124, e115, i50, u30, s60) {
    let c56, f19, l40 = 0;
    do {
      f19 = e115 + (i50 - e115) / 2, c56 = n56(f19, u30, s60) - t124, c56 > 0 ? i50 = f19 : e115 = f19;
    } while (Math.abs(c56) > o78 && ++l40 < r80);
    return f19;
  }(t123, 0, 1, e114, u29);
  return (t123) => 0 === t123 || 1 === t123 ? t123 : n56(c55(t123), i49, s59);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/ease.js
var r81 = e86(0.42, 0, 1, 1);
var c40 = e86(0, 0, 0.58, 1);
var e87 = e86(0.42, 0, 0.58, 1);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.js
var r82 = (r107) => Array.isArray(r107) && "number" != typeof r107[0];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/modifiers/mirror.js
var o79 = (o103) => (t123) => t123 <= 0.5 ? o103(2 * t123) / 2 : (2 - o103(2 * (1 - t123))) / 2;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/modifiers/reverse.js
var o80 = (o103) => (t123) => 1 - o103(1 - t123);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/circ.js
var i36 = (r107) => 1 - Math.sin(Math.acos(r107));
var s46 = o80(i36);
var m37 = o79(s46);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/back.js
var m38 = e86(0.33, 1.53, 0.69, 0.99);
var e88 = o80(m38);
var s47 = o79(e88);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/anticipate.js
var t90 = (t123) => (t123 *= 2) < 1 ? 0.5 * e88(t123) : 0.5 * (2 - Math.pow(2, -10 * (t123 - 1)));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/map.js
var b6 = { linear: o54, easeIn: r81, easeInOut: e87, easeOut: c40, circIn: i36, circInOut: m37, circOut: s46, backIn: e88, backInOut: s47, backOut: m38, anticipate: t90 };
var j8 = (t123) => {
  if (Array.isArray(t123)) {
    r53(4 === t123.length, "Cubic bezier arrays must contain four numerical values.");
    const [e114, o103, a60, s59] = t123;
    return e86(e114, o103, a60, s59);
  }
  return "string" == typeof t123 ? (r53(void 0 !== b6[t123], `Invalid easing type '${t123}'`), b6[t123]) : t123;
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/utils.js
var r83 = (o103, r107) => (e114) => Boolean(n48(e114) && t72.test(e114) && e114.startsWith(o103) || r107 && Object.prototype.hasOwnProperty.call(e114, r107));
var e89 = (a60, r107, e114) => (s59) => {
  if (!n48(s59))
    return s59;
  const [p31, l40, n83, c55] = s59.match(d25);
  return { [a60]: parseFloat(p31), [r107]: parseFloat(l40), [e114]: parseFloat(n83), alpha: void 0 !== c55 ? parseFloat(c55) : 1 };
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/rgba.js
var a43 = { ...r64, transform: (t123) => Math.round(((t124) => t71(0, 255, t124))(t123)) };
var n57 = { test: r83("rgb", "red"), parse: e89("red", "green", "blue"), transform: ({ red: r107, green: t123, blue: m56, alpha: e114 = 1 }) => "rgba(" + a43.transform(r107) + ", " + a43.transform(t123) + ", " + a43.transform(m56) + ", " + s38(o66.transform(e114)) + ")" };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/hex.js
var t91 = { test: r83("#"), parse: function(s59) {
  let r107 = "", t123 = "", n83 = "", e114 = "";
  return s59.length > 5 ? (r107 = s59.substring(1, 3), t123 = s59.substring(3, 5), n83 = s59.substring(5, 7), e114 = s59.substring(7, 9)) : (r107 = s59.substring(1, 2), t123 = s59.substring(2, 3), n83 = s59.substring(3, 4), e114 = s59.substring(4, 5), r107 += r107, t123 += t123, n83 += n83, e114 += e114), { red: parseInt(r107, 16), green: parseInt(t123, 16), blue: parseInt(n83, 16), alpha: e114 ? parseInt(e114, 16) / 255 : 1 };
}, transform: n57.transform };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/hsla.js
var n58 = { test: r83("hsl", "hue"), parse: e89("hue", "saturation", "lightness"), transform: ({ hue: o103, saturation: m56, lightness: n83, alpha: a60 = 1 }) => "hsla(" + Math.round(o103) + ", " + e72.transform(s38(m56)) + ", " + e72.transform(s38(n83)) + ", " + s38(o66.transform(a60)) + ")" };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/index.js
var o81 = { test: (r107) => n57.test(r107) || t91.test(r107) || n58.test(r107), parse: (r107) => n57.test(r107) ? n57.parse(r107) : n58.test(r107) ? n58.parse(r107) : t91.parse(r107), transform: (t123) => n48(t123) ? t123 : t123.hasOwnProperty("red") ? n57.transform(t123) : n58.transform(t123) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix.js
var o82 = (o103, t123, c55) => -c55 * o103 + c55 * t123 + o103;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.js
function n59(n83, t123, e114) {
  return e114 < 0 && (e114 += 1), e114 > 1 && (e114 -= 1), e114 < 1 / 6 ? n83 + 6 * (t123 - n83) * e114 : e114 < 0.5 ? t123 : e114 < 2 / 3 ? n83 + (t123 - n83) * (2 / 3 - e114) * 6 : n83;
}
function t92({ hue: t123, saturation: e114, lightness: r107, alpha: u29 }) {
  t123 /= 360, r107 /= 100;
  let a60 = 0, o103 = 0, h16 = 0;
  if (e114 /= 100) {
    const u30 = r107 < 0.5 ? r107 * (1 + e114) : r107 + e114 - r107 * e114, l40 = 2 * r107 - u30;
    a60 = n59(l40, u30, t123 + 1 / 3), o103 = n59(l40, u30, t123), h16 = n59(l40, u30, t123 - 1 / 3);
  } else
    a60 = o103 = h16 = r107;
  return { red: Math.round(255 * a60), green: Math.round(255 * o103), blue: Math.round(255 * h16), alpha: u29 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix-color.js
var n60 = (r107, o103, e114) => {
  const t123 = r107 * r107;
  return Math.sqrt(Math.max(0, e114 * (o103 * o103 - t123) + t123));
};
var l29 = [t91, n57, n58];
function m39(r107) {
  const t123 = (a60 = r107, l29.find((r108) => r108.test(a60)));
  var a60;
  r53(Boolean(t123), `'${r107}' is not an animatable color. Use the equivalent color code instead.`);
  let n83 = t123.parse(r107);
  return t123 === n58 && (n83 = t92(n83)), n83;
}
var p22 = (o103, e114) => {
  const t123 = m39(o103), s59 = m39(e114), l40 = { ...t123 };
  return (o104) => (l40.red = n60(t123.red, s59.red, o104), l40.green = n60(t123.green, s59.green, o104), l40.blue = n60(t123.blue, s59.blue, o104), l40.alpha = o82(t123.alpha, s59.alpha, o104), n57.transform(l40));
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/complex/index.js
var i37 = { regex: a36, countKey: "Vars", token: "${v}", parse: o54 };
var l30 = { regex: r65, countKey: "Colors", token: "${c}", parse: o81.parse };
var c41 = { regex: d25, countKey: "Numbers", token: "${n}", parse: r64.parse };
function m40(e114, { regex: n83, countKey: r107, token: t123, parse: o103 }) {
  const s59 = e114.tokenised.match(n83);
  s59 && (e114["num" + r107] = s59.length, e114.tokenised = e114.tokenised.replace(n83, t123), e114.values.push(...s59.map(o103)));
}
function p23(e114) {
  const n83 = e114.toString(), r107 = { value: n83, tokenised: n83, values: [], numVars: 0, numColors: 0, numNumbers: 0 };
  return r107.value.includes("var(--") && m40(r107, i37), m40(r107, l30), m40(r107, c41), r107;
}
function f8(e114) {
  return p23(e114).values;
}
function d27(e114) {
  const { values: n83, numColors: t123, numVars: o103, tokenised: s59 } = p23(e114), u29 = n83.length;
  return (e115) => {
    let n84 = s59;
    for (let s60 = 0; s60 < u29; s60++)
      n84 = s60 < o103 ? n84.replace(i37.token, e115[s60]) : s60 < o103 + t123 ? n84.replace(l30.token, o81.transform(e115[s60])) : n84.replace(c41.token, s38(e115[s60]));
    return n84;
  };
}
var v5 = (e114) => "number" == typeof e114 ? 0 : e114;
var k3 = { test: function(e114) {
  var n83, r107;
  return isNaN(e114) && n48(e114) && ((null === (n83 = e114.match(d25)) || void 0 === n83 ? void 0 : n83.length) || 0) + ((null === (r107 = e114.match(r65)) || void 0 === r107 ? void 0 : r107.length) || 0) > 0;
}, parse: f8, createTransformer: d27, getAnimatableNone: function(e114) {
  const n83 = f8(e114);
  return d27(e114)(n83.map(v5));
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix-complex.js
var a44 = (r107, o103) => (t123) => `${t123 > 0 ? o103 : r107}`;
function i38(t123, e114) {
  return "number" == typeof t123 ? (o103) => o82(t123, e114, o103) : o81.test(t123) ? p22(t123, e114) : t123.startsWith("var(") ? a44(t123, e114) : c42(t123, e114);
}
var u14 = (r107, o103) => {
  const t123 = [...r107], e114 = t123.length, n83 = r107.map((r108, t124) => i38(r108, o103[t124]));
  return (r108) => {
    for (let o104 = 0; o104 < e114; o104++)
      t123[o104] = n83[o104](r108);
    return t123;
  };
};
var l31 = (r107, o103) => {
  const t123 = { ...r107, ...o103 }, e114 = {};
  for (const n83 in t123)
    void 0 !== r107[n83] && void 0 !== o103[n83] && (e114[n83] = i38(r107[n83], o103[n83]));
  return (r108) => {
    for (const o104 in e114)
      t123[o104] = e114[o104](r108);
    return t123;
  };
};
var c42 = (r107, o103) => {
  const n83 = k3.createTransformer(o103), i49 = p23(r107), l40 = p23(o103);
  return i49.numVars === l40.numVars && i49.numColors === l40.numColors && i49.numNumbers >= l40.numNumbers ? c39(u14(i49.values, l40.values), n83) : (e63(true, `Complex values '${r107}' and '${o103}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`), a44(r107, o103));
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/progress.js
var t93 = (t123, n83, o103) => {
  const r107 = n83 - t123;
  return 0 === r107 ? 1 : (o103 - t123) / r107;
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/interpolate.js
var l32 = (r107, t123) => (o103) => o82(r107, t123, o103);
function u15(r107, o103, e114) {
  const f19 = [], u29 = e114 || ("number" == typeof (a60 = r107[0]) ? l32 : "string" == typeof a60 ? o81.test(a60) ? p22 : c42 : Array.isArray(a60) ? u14 : "object" == typeof a60 ? l31 : l32);
  var a60;
  const j9 = r107.length - 1;
  for (let t123 = 0; t123 < j9; t123++) {
    let e115 = u29(r107[t123], r107[t123 + 1]);
    if (o103) {
      const r108 = Array.isArray(o103) ? o103[t123] || o54 : o103;
      e115 = c39(r108, e115);
    }
    f19.push(e115);
  }
  return f19;
}
function a45(t123, e114, { clamp: s59 = true, ease: m56, mixer: n83 } = {}) {
  const i49 = t123.length;
  if (r53(i49 === e114.length, "Both input and output ranges must be the same length"), 1 === i49)
    return () => e114[0];
  t123[0] > t123[i49 - 1] && (t123 = [...t123].reverse(), e114 = [...e114].reverse());
  const p31 = u15(e114, m56, n83), c55 = p31.length, l40 = (r107) => {
    let o103 = 0;
    if (c55 > 1)
      for (; o103 < t123.length - 2 && !(r107 < t123[o103 + 1]); o103++)
        ;
    const e115 = t93(t123[o103], t123[o103 + 1], r107);
    return p31[o103](e115);
  };
  return s59 ? (r107) => l40(t71(t123[0], t123[i49 - 1], r107)) : l40;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/fill.js
function t94(t123, s59) {
  const m56 = t123[t123.length - 1];
  for (let n83 = 1; n83 <= s59; n83++) {
    const p31 = t93(0, s59, n83);
    t123.push(o82(m56, 1, p31));
  }
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/default.js
function n61(n83) {
  const o103 = [0];
  return t94(o103, n83.length - 1), o103;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/time.js
function n62(n83, r107) {
  return n83.map((n84) => n84 * r107);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/keyframes.js
function o83(t123, s59) {
  return t123.map(() => s59 || e87).splice(0, t123.length - 1);
}
function n63({ duration: e114 = 300, keyframes: n83, times: m56, ease: u29 = "easeInOut" }) {
  const l40 = r82(u29) ? u29.map(j8) : j8(u29), f19 = { done: false, value: n83[0] }, p31 = n62(m56 && m56.length === n83.length ? m56 : n61(n83), e114), g17 = a45(p31, n83, { ease: Array.isArray(l40) ? l40 : o83(n83, l40) });
  return { calculatedDuration: e114, next: (t123) => (f19.value = g17(t123), f19.done = t123 >= e114, f19) };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/velocity-per-second.js
function e90(e114, n83) {
  return n83 ? e114 * (1e3 / n83) : 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.js
function o84(o103, r107, e114) {
  const n83 = Math.max(r107 - 5, 0);
  return e90(e114 - o103(n83), r107 - n83);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/spring/find.js
var s48 = 1e-3;
var e91 = 0.01;
var i39 = 10;
var a46 = 0.05;
var u16 = 1;
function p24({ duration: p31 = 800, bounce: m56 = 0.25, velocity: h16 = 0, mass: l40 = 1 }) {
  let M3, d33;
  e63(p31 <= e83(i39), "Spring duration must be 10 seconds or less");
  let x12 = 1 - m56;
  x12 = t71(a46, u16, x12), p31 = t71(e91, i39, o76(p31)), x12 < 1 ? (M3 = (t123) => {
    const o103 = t123 * x12, r107 = o103 * p31, n83 = o103 - h16, e114 = f9(t123, x12), i49 = Math.exp(-r107);
    return s48 - n83 / e114 * i49;
  }, d33 = (t123) => {
    const o103 = t123 * x12 * p31, r107 = o103 * h16 + h16, n83 = Math.pow(x12, 2) * Math.pow(t123, 2) * p31, e114 = Math.exp(-o103), i49 = f9(Math.pow(t123, 2), x12);
    return (-M3(t123) + s48 > 0 ? -1 : 1) * ((r107 - n83) * e114) / i49;
  }) : (M3 = (t123) => Math.exp(-t123 * p31) * ((t123 - h16) * p31 + 1) - 1e-3, d33 = (t123) => Math.exp(-t123 * p31) * (p31 * p31 * (h16 - t123)));
  const w9 = function(t123, o103, r107) {
    let n83 = r107;
    for (let r108 = 1; r108 < c43; r108++)
      n83 -= t123(n83) / o103(n83);
    return n83;
  }(M3, d33, 5 / p31);
  if (p31 = e83(p31), isNaN(w9))
    return { stiffness: 100, damping: 10, duration: p31 };
  {
    const t123 = Math.pow(w9, 2) * l40;
    return { stiffness: t123, damping: 2 * x12 * Math.sqrt(l40 * t123), duration: p31 };
  }
}
var c43 = 12;
function f9(t123, o103) {
  return t123 * Math.sqrt(1 - o103 * o103);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/spring/index.js
var o85 = ["duration", "bounce"];
var i40 = ["stiffness", "damping", "mass"];
function a47(t123, s59) {
  return s59.some((s60) => void 0 !== t123[s60]);
}
function r84({ keyframes: r107, restDelta: l40, restSpeed: c55, ...u29 }) {
  const m56 = r107[0], f19 = r107[r107.length - 1], h16 = { done: false, value: m56 }, { stiffness: d33, damping: M3, mass: p31, velocity: v7, duration: x12, isResolvedFromDuration: y6 } = function(t123) {
    let s59 = { velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false, ...t123 };
    if (!a47(t123, i40) && a47(t123, o85)) {
      const n83 = p24(t123);
      s59 = { ...s59, ...n83, velocity: 0, mass: 1 }, s59.isResolvedFromDuration = true;
    }
    return s59;
  }(u29), D = v7 ? -o76(v7) : 0, b9 = M3 / (2 * Math.sqrt(d33 * p31)), g17 = f19 - m56, j9 = o76(Math.sqrt(d33 / p31)), q3 = Math.abs(g17) < 5;
  let F2;
  if (c55 || (c55 = q3 ? 0.01 : 2), l40 || (l40 = q3 ? 5e-3 : 0.5), b9 < 1) {
    const t123 = f9(j9, b9);
    F2 = (s59) => {
      const e114 = Math.exp(-b9 * j9 * s59);
      return f19 - e114 * ((D + b9 * j9 * g17) / t123 * Math.sin(t123 * s59) + g17 * Math.cos(t123 * s59));
    };
  } else if (1 === b9)
    F2 = (t123) => f19 - Math.exp(-j9 * t123) * (g17 + (D + j9 * g17) * t123);
  else {
    const t123 = j9 * Math.sqrt(b9 * b9 - 1);
    F2 = (s59) => {
      const e114 = Math.exp(-b9 * j9 * s59), n83 = Math.min(t123 * s59, 300);
      return f19 - e114 * ((D + b9 * j9 * g17) * Math.sinh(n83) + t123 * g17 * Math.cosh(n83)) / t123;
    };
  }
  return { calculatedDuration: y6 && x12 || null, next: (t123) => {
    const e114 = F2(t123);
    if (y6)
      h16.done = t123 >= x12;
    else {
      let n83 = D;
      0 !== t123 && (n83 = b9 < 1 ? o84(F2, t123, e114) : 0);
      const o103 = Math.abs(n83) <= c55, i49 = Math.abs(f19 - e114) <= l40;
      h16.done = o103 && i49;
    }
    return h16.value = h16.done ? f19 : e114, h16;
  } };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/inertia.js
function o86({ keyframes: o103, velocity: n83 = 0, power: a60 = 0.8, timeConstant: i49 = 325, bounceDamping: s59 = 10, bounceStiffness: r107 = 500, modifyTarget: l40, min: v7, max: d33, restDelta: u29 = 0.5, restSpeed: c55 }) {
  const m56 = o103[0], f19 = { done: false, value: m56 }, p31 = (e114) => void 0 === v7 ? d33 : void 0 === d33 || Math.abs(v7 - e114) < Math.abs(d33 - e114) ? v7 : d33;
  let x12 = a60 * n83;
  const y6 = m56 + x12, b9 = void 0 === l40 ? y6 : l40(y6);
  b9 !== y6 && (x12 = b9 - m56);
  const g17 = (e114) => -x12 * Math.exp(-e114 / i49), h16 = (e114) => b9 + g17(e114), D = (e114) => {
    const t123 = g17(e114), o104 = h16(e114);
    f19.done = Math.abs(t123) <= u29, f19.value = f19.done ? b9 : o104;
  };
  let M3, S2;
  const j9 = (o104) => {
    var n84;
    (n84 = f19.value, void 0 !== v7 && n84 < v7 || void 0 !== d33 && n84 > d33) && (M3 = o104, S2 = r84({ keyframes: [f19.value, p31(f19.value)], velocity: o84(h16, o104, f19.value), damping: s59, stiffness: r107, restDelta: u29, restSpeed: c55 }));
  };
  return j9(0), { calculatedDuration: null, next: (e114) => {
    let t123 = false;
    return S2 || void 0 !== M3 || (t123 = true, D(e114), j9(e114)), void 0 !== M3 && e114 > M3 ? S2.next(e114 - M3) : (!t123 && D(e114), f19);
  } };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.js
var e92 = (e114) => {
  const m56 = ({ timestamp: o103 }) => e114(o103);
  return { start: () => c36.update(m56, true), stop: () => m33(m56), now: () => s32.isProcessing ? s32.timestamp : performance.now() };
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.js
var e93 = 2e4;
function t95(t123) {
  let n83 = 0;
  let o103 = t123.next(n83);
  for (; !o103.done && n83 < e93; )
    n83 += 50, o103 = t123.next(n83);
  return n83 >= e93 ? 1 / 0 : n83;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/js/index.js
var u17 = { decay: o86, inertia: o86, tween: n63, keyframes: n63, spring: r84 };
function m41({ autoplay: t123 = true, delay: n83 = 0, driver: m56 = e92, keyframes: c55, type: p31 = "keyframes", repeat: d33 = 0, repeatDelay: f19 = 0, repeatType: y6 = "loop", onPlay: h16, onStop: v7, onComplete: g17, onUpdate: j9, ...k4 }) {
  let D, M3, w9 = 1, x12 = false;
  const P3 = () => {
    D && D(), M3 = new Promise((e114) => {
      D = e114;
    });
  };
  let b9;
  P3();
  const B = u17[p31] || n63;
  let C3;
  B !== n63 && "number" != typeof c55[0] && (C3 = a45([0, 100], c55, { clamp: false }), c55 = [0, 100]);
  const S2 = B({ ...k4, keyframes: c55 });
  let T2;
  "mirror" === y6 && (T2 = B({ ...k4, keyframes: [...c55].reverse(), velocity: -(k4.velocity || 0) }));
  let U = "idle", q3 = null, z3 = null, A2 = null;
  null === S2.calculatedDuration && d33 && (S2.calculatedDuration = t95(S2));
  const { calculatedDuration: E } = S2;
  let F2 = 1 / 0, G3 = 1 / 0;
  null !== E && (F2 = E + f19, G3 = F2 * (d33 + 1) - f19);
  let H2 = 0;
  const I = (e114) => {
    if (null === z3)
      return;
    w9 > 0 && (z3 = Math.min(z3, e114)), w9 < 0 && (z3 = Math.min(e114 - G3 / w9, z3)), H2 = null !== q3 ? q3 : Math.round(e114 - z3) * w9;
    const t124 = H2 - n83 * (w9 >= 0 ? 1 : -1), r107 = w9 >= 0 ? t124 < 0 : t124 > G3;
    H2 = Math.max(t124, 0), "finished" === U && null === q3 && (H2 = G3);
    let l40 = H2, a60 = S2;
    if (d33) {
      const e115 = H2 / F2;
      let t125 = Math.floor(e115), n84 = e115 % 1;
      !n84 && e115 >= 1 && (n84 = 1), 1 === n84 && t125--, t125 = Math.min(t125, d33 + 1);
      const r108 = Boolean(t125 % 2);
      r108 && ("reverse" === y6 ? (n84 = 1 - n84, f19 && (n84 -= f19 / F2)) : "mirror" === y6 && (a60 = T2));
      let i50 = t71(0, 1, n84);
      H2 > G3 && (i50 = "reverse" === y6 && r108 ? 1 : 0), l40 = i50 * F2;
    }
    const i49 = r107 ? { done: false, value: c55[0] } : a60.next(l40);
    C3 && (i49.value = C3(i49.value));
    let { done: s59 } = i49;
    r107 || null === E || (s59 = w9 >= 0 ? H2 >= G3 : H2 <= 0);
    const u29 = null === q3 && ("finished" === U || "running" === U && s59);
    return j9 && j9(i49.value), u29 && L(), i49;
  }, J2 = () => {
    b9 && b9.stop(), b9 = void 0;
  }, K2 = () => {
    U = "idle", J2(), P3(), z3 = A2 = null;
  }, L = () => {
    U = "finished", g17 && g17(), J2(), P3();
  }, N2 = () => {
    if (x12)
      return;
    b9 || (b9 = m56(I));
    const e114 = b9.now();
    h16 && h16(), null !== q3 ? z3 = e114 - q3 : z3 && "finished" !== U || (z3 = e114), A2 = z3, q3 = null, U = "running", b9.start();
  };
  t123 && N2();
  const O6 = { then: (e114, t124) => M3.then(e114, t124), get time() {
    return o76(H2);
  }, set time(e114) {
    e114 = e83(e114), H2 = e114, null === q3 && b9 && 0 !== w9 ? z3 = b9.now() - e114 / w9 : q3 = e114;
  }, get duration() {
    const e114 = null === S2.calculatedDuration ? t95(S2) : S2.calculatedDuration;
    return o76(e114);
  }, get speed() {
    return w9;
  }, set speed(e114) {
    e114 !== w9 && b9 && (w9 = e114, O6.time = o76(H2));
  }, get state() {
    return U;
  }, play: N2, pause: () => {
    U = "paused", q3 = H2;
  }, stop: () => {
    x12 = true, "idle" !== U && (U = "idle", v7 && v7(), K2());
  }, cancel: () => {
    null !== A2 && I(A2), K2();
  }, complete: () => {
    U = "finished";
  }, sample: (e114) => (z3 = 0, I(e114)) };
  return O6;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.js
var l33 = /* @__PURE__ */ new Set(["opacity", "clipPath", "filter", "transform", "backgroundColor"]);
function m42(m56, u29, { onUpdate: c55, onComplete: f19, ...d33 }) {
  if (!(e84.waapi() && l33.has(u29) && !d33.repeatDelay && "mirror" !== d33.repeatType && 0 !== d33.damping && "inertia" !== d33.type))
    return false;
  let y6, g17, h16 = false;
  const j9 = () => {
    g17 = new Promise((e114) => {
      y6 = e114;
    });
  };
  j9();
  let { keyframes: k4, duration: v7 = 300, ease: b9, times: w9 } = d33;
  if (((e114, t123) => "spring" === t123.type || "backgroundColor" === e114 || !r78(t123.ease))(u29, d33)) {
    const e114 = m41({ ...d33, repeat: 0, delay: 0 });
    let t123 = { done: false, value: k4[0] };
    const r107 = [];
    let o103 = 0;
    for (; !t123.done && o103 < 2e4; )
      t123 = e114.sample(o103), r107.push(t123.value), o103 += 10;
    w9 = void 0, k4 = r107, v7 = o103 - 10, b9 = "linear";
  }
  const x12 = r79(m56.owner.current, u29, k4, { ...d33, duration: v7, ease: b9, times: w9 }), T2 = () => x12.cancel(), C3 = () => {
    c36.update(T2), y6(), j9();
  };
  return x12.onfinish = () => {
    m56.set(e85(k4, d33)), f19 && f19(), C3();
  }, { then: (e114, t123) => g17.then(e114, t123), get time() {
    return o76(x12.currentTime || 0);
  }, set time(e114) {
    x12.currentTime = e83(e114);
  }, get speed() {
    return x12.playbackRate;
  }, set speed(e114) {
    x12.playbackRate = e114;
  }, get duration() {
    return o76(v7);
  }, play: () => {
    h16 || (x12.play(), m33(T2));
  }, pause: () => x12.pause(), stop: () => {
    if (h16 = true, "idle" === x12.playState)
      return;
    const { currentTime: e114 } = x12;
    if (e114) {
      const t123 = m41({ ...d33, autoplay: false });
      m56.setWithVelocity(t123.sample(e114 - 10).value, t123.sample(e114).value, 10);
    }
    C3();
  }, complete: () => x12.finish(), cancel: C3 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/instant.js
function t96({ keyframes: t123, delay: n83, onUpdate: r107, onComplete: p31 }) {
  const s59 = () => (r107 && r107(t123[t123.length - 1]), p31 && p31(), { time: 0, speed: 1, duration: 0, play: o54, pause: o54, stop: o54, then: (e114) => (e114(), Promise.resolve()), cancel: o54, complete: o54 });
  return n83 ? m41({ keyframes: [0, 1], duration: 0, delay: n83, onComplete: s59 }) : s59();
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
var s49 = { type: "spring", stiffness: 500, damping: 25, restSpeed: 10 };
var t97 = { type: "keyframes", duration: 0.8 };
var r85 = { type: "keyframes", ease: [0.25, 0.1, 0.35, 1], duration: 0.3 };
var a48 = (a60, { keyframes: n83 }) => n83.length > 2 ? t97 : t69.has(a60) ? a60.startsWith("scale") ? { type: "spring", stiffness: 550, damping: 0 === n83[1] ? 2 * Math.sqrt(550) : 30, restSpeed: 10 } : s49 : r85;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
var r86 = (r107, e114) => "zIndex" !== r107 && (!("number" != typeof e114 && !Array.isArray(e114)) || !("string" != typeof e114 || !k3.test(e114) && "0" !== e114 || e114.startsWith("url(")));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/complex/filter.js
var o87 = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function r87(t123) {
  const [r107, e114] = t123.slice(0, -1).split("(");
  if ("drop-shadow" === r107)
    return t123;
  const [s59] = e114.match(d25) || [];
  if (!s59)
    return t123;
  const a60 = e114.replace(s59, "");
  let c55 = o87.has(r107) ? 1 : 0;
  return s59 !== e114 && (c55 *= 100), r107 + "(" + c55 + a60 + ")";
}
var e94 = /([a-z-]*)\(.*?\)/g;
var s50 = { ...k3, getAnimatableNone: (t123) => {
  const n83 = t123.match(e94);
  return n83 ? n83.map(r87).join(" ") : t123;
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
var l34 = { ...d26, color: o81, backgroundColor: o81, outlineColor: o81, fill: o81, stroke: o81, borderColor: o81, borderTopColor: o81, borderRightColor: o81, borderBottomColor: o81, borderLeftColor: o81, filter: s50, WebkitFilter: s50 };
var t98 = (o103) => l34[o103];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
function m43(m56, r107) {
  let i49 = t98(m56);
  return i49 !== s50 && (i49 = k3), i49.getAnimatableNone ? i49.getAnimatableNone(r107) : void 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-zero-value-string.js
var t99 = (t123) => /^0[^.\s]+$/.test(t123);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-none.js
function o88(o103) {
  return "number" == typeof o103 ? 0 === o103 : null !== o103 ? "none" === o103 || "0" === o103 || t99(o103) : void 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/keyframes.js
function e95(e114, r107, l40, i49) {
  const s59 = r86(r107, l40);
  let m56;
  m56 = Array.isArray(l40) ? [...l40] : [null, l40];
  const f19 = void 0 !== i49.from ? i49.from : e114.get();
  let a60;
  const p31 = [];
  for (let t123 = 0; t123 < m56.length; t123++)
    null === m56[t123] && (m56[t123] = 0 === t123 ? f19 : m56[t123 - 1]), o88(m56[t123]) && p31.push(t123), "string" == typeof m56[t123] && "none" !== m56[t123] && "0" !== m56[t123] && (a60 = m56[t123]);
  if (s59 && p31.length && a60)
    for (let n83 = 0; n83 < p31.length; n83++) {
      m56[p31[n83]] = m43(r107, a60);
    }
  return m56;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/transitions.js
function e96({ when: e114, delay: r107, delayChildren: t123, staggerChildren: n83, staggerDirection: a60, repeat: l40, repeatType: d33, repeatDelay: i49, from: p31, elapsed: g17, ...o103 }) {
  return !!Object.keys(o103).length;
}
function r88(e114, r107) {
  return e114[r107] || e114.default || e114;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.js
var u18 = (u29, f19, d33, y6 = {}) => (c55) => {
  const j9 = r88(y6, u29) || {}, $2 = j9.delay || y6.delay || 0;
  let { elapsed: v7 = 0 } = y6;
  v7 -= e83($2);
  const b9 = e95(f19, u29, d33, j9), g17 = b9[0], w9 = b9[b9.length - 1], U = r86(u29, g17), h16 = r86(u29, w9);
  e63(U === h16, `You are trying to animate ${u29} from "${g17}" to "${w9}". ${g17} is not an animatable value - to enable this animation set ${g17} to a value animatable to ${w9} via the \`style\` property.`);
  let C3 = { keyframes: b9, velocity: f19.getVelocity(), ease: "easeOut", ...j9, delay: -v7, onUpdate: (t123) => {
    f19.set(t123), j9.onUpdate && j9.onUpdate(t123);
  }, onComplete: () => {
    c55(), j9.onComplete && j9.onComplete();
  } };
  if (e96(j9) || (C3 = { ...C3, ...a48(u29, C3) }), C3.duration && (C3.duration = e83(C3.duration)), C3.repeatDelay && (C3.repeatDelay = e83(C3.repeatDelay)), !U || !h16 || r76.current || false === j9.type)
    return t96(C3);
  if (f19.owner && f19.owner.current instanceof HTMLElement && !f19.owner.getProps().onUpdate) {
    const t123 = m42(f19, u29, C3);
    if (t123)
      return t123;
  }
  return m41(C3);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/use-will-change/is.js
function t100(t123) {
  return Boolean(o64(t123) && t123.add);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-numerical-string.js
var t101 = (t123) => /^\-?\d*\.?\d+$/.test(t123);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/array.js
function n64(n83, i49) {
  -1 === n83.indexOf(i49) && n83.push(i49);
}
function i41(n83, i49) {
  const c55 = n83.indexOf(i49);
  c55 > -1 && n83.splice(c55, 1);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/subscription-manager.js
var i42 = class {
  constructor() {
    this.subscriptions = [];
  }
  add(i49) {
    return n64(this.subscriptions, i49), () => i41(this.subscriptions, i49);
  }
  notify(s59, t123, i49) {
    const r107 = this.subscriptions.length;
    if (r107)
      if (1 === r107)
        this.subscriptions[0](s59, t123, i49);
      else
        for (let n83 = 0; n83 < r107; n83++) {
          const r108 = this.subscriptions[n83];
          r108 && r108(s59, t123, i49);
        }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/warn-once.js
var n65 = /* @__PURE__ */ new Set();
function o89(o103, e114, a60) {
  o103 || n65.has(e114) || (console.warn(e114), a60 && console.warn(a60), n65.add(e114));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/index.js
var a49 = class {
  constructor(s59, i49 = {}) {
    var n83;
    this.version = "10.12.17", this.timeDelta = 0, this.lastUpdated = 0, this.canTrackVelocity = false, this.events = {}, this.updateAndNotify = (s60, i50 = true) => {
      this.prev = this.current, this.current = s60;
      const { delta: n84, timestamp: a60 } = s32;
      this.lastUpdated !== a60 && (this.timeDelta = n84, this.lastUpdated = a60, c36.postRender(this.scheduleVelocityCheck)), this.prev !== this.current && this.events.change && this.events.change.notify(this.current), this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()), i50 && this.events.renderRequest && this.events.renderRequest.notify(this.current);
    }, this.scheduleVelocityCheck = () => c36.postRender(this.velocityCheck), this.velocityCheck = ({ timestamp: t123 }) => {
      t123 !== this.lastUpdated && (this.prev = this.current, this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()));
    }, this.hasAnimated = false, this.prev = this.current = s59, this.canTrackVelocity = (n83 = this.current, !isNaN(parseFloat(n83))), this.owner = i49.owner;
  }
  onChange(t123) {
    return o89(false, 'value.onChange(callback) is deprecated. Switch to value.on("change", callback).'), this.on("change", t123);
  }
  on(t123, i49) {
    this.events[t123] || (this.events[t123] = new i42());
    const n83 = this.events[t123].add(i49);
    return "change" === t123 ? () => {
      n83(), c36.read(() => {
        this.events.change.getSize() || this.stop();
      });
    } : n83;
  }
  clearListeners() {
    for (const t123 in this.events)
      this.events[t123].clear();
  }
  attach(t123, e114) {
    this.passiveEffect = t123, this.stopPassiveEffect = e114;
  }
  set(t123, e114 = true) {
    e114 && this.passiveEffect ? this.passiveEffect(t123, this.updateAndNotify) : this.updateAndNotify(t123, e114);
  }
  setWithVelocity(t123, e114, s59) {
    this.set(e114), this.prev = t123, this.timeDelta = s59;
  }
  jump(t123) {
    this.updateAndNotify(t123), this.prev = t123, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
  get() {
    return this.current;
  }
  getPrevious() {
    return this.prev;
  }
  getVelocity() {
    return this.canTrackVelocity ? e90(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  }
  start(t123) {
    return this.stop(), new Promise((e114) => {
      this.hasAnimated = true, this.animation = t123(e114), this.events.animationStart && this.events.animationStart.notify();
    }).then(() => {
      this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();
    });
  }
  stop() {
    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();
  }
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  destroy() {
    this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
};
function h14(t123, e114) {
  return new a49(t123, e114);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/test.js
var t102 = (t123) => (e114) => e114.test(t123);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
var t103 = { test: (t123) => "auto" === t123, parse: (t123) => t123 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
var n66 = [r64, a37, e72, t73, p19, o67, t103];
var u19 = (t123) => n66.find(t102(t123));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/find.js
var s51 = [...n66, o81, k3];
var t104 = (o103) => s51.find(t102(o103));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/setters.js
function a50(t123, e114, o103) {
  t123.hasValue(e114) ? t123.getValue(e114).set(o103) : t123.addValue(e114, h14(o103));
}
function u20(t123, e114) {
  const n83 = o75(t123, e114);
  let { transitionEnd: r107 = {}, transition: i49 = {}, ...l40 } = n83 ? t123.makeTargetAnimatable(n83, false) : {};
  l40 = { ...l40, ...r107 };
  for (const e115 in l40) {
    a50(t123, e115, e75(l40[e115]));
  }
}
function m44(o103, s59, a60) {
  var u29, m56;
  const f19 = Object.keys(s59).filter((t123) => !o103.hasValue(t123)), c55 = f19.length;
  if (c55)
    for (let d33 = 0; d33 < c55; d33++) {
      const c56 = f19[d33], p31 = s59[c56];
      let v7 = null;
      Array.isArray(p31) && (v7 = p31[0]), null === v7 && (v7 = null !== (m56 = null !== (u29 = a60[c56]) && void 0 !== u29 ? u29 : o103.readValue(c56)) && void 0 !== m56 ? m56 : s59[c56]), null != v7 && ("string" == typeof v7 && (t101(v7) || t99(v7)) ? v7 = parseFloat(v7) : !t104(v7) && k3.test(p31) && (v7 = m43(c56, p31)), o103.addValue(c56, h14(v7, { owner: o103 })), void 0 === a60[c56] && (a60[c56] = v7), null !== v7 && o103.setBaseTarget(c56, v7));
    }
}
function f10(t123, e114) {
  if (!e114)
    return;
  return (e114[t123] || e114.default || e114).from;
}
function c44(t123, e114, o103) {
  const n83 = {};
  for (const r107 in t123) {
    const t124 = f10(r107, e114);
    if (void 0 !== t124)
      n83[r107] = t124;
    else {
      const t125 = o103.getValue(r107);
      t125 && (n83[r107] = t125.get());
    }
  }
  return n83;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.js
function r89({ protectedKeys: t123, needsAnimating: e114 }, n83) {
  const o103 = t123.hasOwnProperty(n83) && true !== e114[n83];
  return e114[n83] = false, o103;
}
function s52(s59, m56, { delay: d33 = 0, transitionOverride: p31, type: l40 } = {}) {
  let { transition: f19 = s59.getDefaultTransition(), transitionEnd: u29, ...c55 } = s59.makeTargetAnimatable(m56);
  const h16 = s59.getValue("willChange");
  p31 && (f19 = p31);
  const g17 = [], w9 = l40 && s59.animationState && s59.animationState.getState()[l40];
  for (const a60 in c55) {
    const m57 = s59.getValue(a60), p32 = c55[a60];
    if (!m57 || void 0 === p32 || w9 && r89(w9, a60))
      continue;
    const l41 = { delay: d33, elapsed: 0, ...f19 };
    if (window.HandoffAppearAnimations && !m57.hasAnimated) {
      const e114 = s59.getProps()[e82];
      e114 && (l41.elapsed = window.HandoffAppearAnimations(e114, a60, m57, c36));
    }
    m57.start(u18(a60, m57, p32, s59.shouldReduceMotion && t69.has(a60) ? { type: false } : l41));
    const u30 = m57.animation;
    t100(h16) && (h16.add(a60), u30.then(() => h16.remove(a60))), g17.push(u30);
  }
  return u29 && Promise.all(g17).then(() => {
    u29 && u20(s59, u29);
  }), g17;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.js
function t105(i49, o103, a60 = {}) {
  const s59 = o75(i49, o103, a60.custom);
  let { transition: l40 = i49.getDefaultTransition() || {} } = s59 || {};
  a60.transitionOverride && (l40 = a60.transitionOverride);
  const m56 = s59 ? () => Promise.all(s52(i49, s59, a60)) : () => Promise.resolve(), d33 = i49.variantChildren && i49.variantChildren.size ? (r107 = 0) => {
    const { delayChildren: e114 = 0, staggerChildren: s60, staggerDirection: m57 } = l40;
    return function(r108, e115, i50 = 0, o104 = 0, a61 = 1, s61) {
      const l41 = [], m58 = (r108.variantChildren.size - 1) * o104, d34 = 1 === a61 ? (r109 = 0) => r109 * o104 : (r109 = 0) => m58 - r109 * o104;
      return Array.from(r108.variantChildren).sort(n67).forEach((r109, n83) => {
        r109.notify("AnimationStart", e115), l41.push(t105(r109, e115, { ...s61, delay: i50 + d34(n83) }).then(() => r109.notify("AnimationComplete", e115)));
      }), Promise.all(l41);
    }(i49, o103, e114 + r107, s60, m57, a60);
  } : () => Promise.resolve(), { when: u29 } = l40;
  if (u29) {
    const [r107, e114] = "beforeChildren" === u29 ? [m56, d33] : [d33, m56];
    return r107().then(() => e114());
  }
  return Promise.all([m56(), d33(a60.delay)]);
}
function n67(r107, e114) {
  return r107.sortNodePosition(e114);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.js
function r90(r107, o103, n83 = {}) {
  let s59;
  if (r107.notify("AnimationStart", o103), Array.isArray(o103)) {
    const t123 = o103.map((t124) => t105(r107, t124, n83));
    s59 = Promise.all(t123);
  } else if ("string" == typeof o103)
    s59 = t105(r107, o103, n83);
  else {
    const i49 = "function" == typeof o103 ? o75(r107, o103, n83.custom) : o103;
    s59 = Promise.all(s52(r107, i49, n83));
  }
  return s59.then(() => r107.notify("AnimationComplete", o103));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/animation-state.js
var a51 = [...i25].reverse();
var l35 = i25.length;
function c45(r107) {
  let c55 = function(t123) {
    return (e114) => Promise.all(e114.map(({ animation: e115, options: n83 }) => r90(t123, e115, n83)));
  }(r107);
  const u29 = { animate: p25(true), whileInView: p25(), whileHover: p25(), whileTap: p25(), whileDrag: p25(), whileFocus: p25(), exit: p25() };
  let v7 = true;
  const f19 = (t123, e114) => {
    const n83 = o75(r107, e114);
    if (n83) {
      const { transition: e115, transitionEnd: i49, ...o103 } = n83;
      t123 = { ...t123, ...o103, ...i49 };
    }
    return t123;
  };
  function d33(o103, s59) {
    const p31 = r107.getProps(), d34 = r107.getVariantContext(true) || {}, A2 = [], y6 = /* @__PURE__ */ new Set();
    let h16 = {}, g17 = 1 / 0;
    for (let c56 = 0; c56 < l35; c56++) {
      const l40 = a51[c56], w10 = u29[l40], P3 = void 0 !== p31[l40] ? p31[l40] : d34[l40], j9 = r57(P3), K2 = l40 === s59 ? w10.isActive : null;
      false === K2 && (g17 = c56);
      let V = P3 === d34[l40] && P3 !== p31[l40] && j9;
      if (V && v7 && r107.manuallyAnimateOnMount && (V = false), w10.protectedKeys = { ...h16 }, !w10.isActive && null === K2 || !P3 && !w10.prevProp || t63(P3) || "boolean" == typeof P3)
        continue;
      const b9 = m45(w10.prevProp, P3);
      let x12 = b9 || l40 === s59 && w10.isActive && !V && j9 || c56 > g17 && j9;
      const C3 = Array.isArray(P3) ? P3 : [P3];
      let E = C3.reduce(f19, {});
      false === K2 && (E = {});
      const { prevResolvedValues: O6 = {} } = w10, R2 = { ...O6, ...E }, S2 = (t123) => {
        x12 = true, y6.delete(t123), w10.needsAnimating[t123] = true;
      };
      for (const t123 in R2) {
        const i49 = E[t123], o104 = O6[t123];
        h16.hasOwnProperty(t123) || (i49 !== o104 ? r71(i49) && r71(o104) ? !r75(i49, o104) || b9 ? S2(t123) : w10.protectedKeys[t123] = true : void 0 !== i49 ? S2(t123) : y6.add(t123) : void 0 !== i49 && y6.has(t123) ? S2(t123) : w10.protectedKeys[t123] = true);
      }
      w10.prevProp = P3, w10.prevResolvedValues = E, w10.isActive && (h16 = { ...h16, ...E }), v7 && r107.blockInitialAnimation && (x12 = false), x12 && !V && A2.push(...C3.map((t123) => ({ animation: t123, options: { type: l40, ...o103 } })));
    }
    if (y6.size) {
      const t123 = {};
      y6.forEach((e114) => {
        const n83 = r107.getBaseTarget(e114);
        void 0 !== n83 && (t123[e114] = n83);
      }), A2.push({ animation: t123 });
    }
    let w9 = Boolean(A2.length);
    return v7 && false === p31.initial && !r107.manuallyAnimateOnMount && (w9 = false), v7 = false, w9 ? c55(A2) : Promise.resolve();
  }
  return { animateChanges: d33, setActive: function(t123, e114, n83) {
    var i49;
    if (u29[t123].isActive === e114)
      return Promise.resolve();
    null === (i49 = r107.variantChildren) || void 0 === i49 || i49.forEach((n84) => {
      var i50;
      return null === (i50 = n84.animationState) || void 0 === i50 ? void 0 : i50.setActive(t123, e114);
    }), u29[t123].isActive = e114;
    const o103 = d33(n83, t123);
    for (const t124 in u29)
      u29[t124].protectedKeys = {};
    return o103;
  }, setAnimateFunction: function(t123) {
    c55 = t123(r107);
  }, getState: () => u29 };
}
function m45(t123, e114) {
  return "string" == typeof e114 ? e114 !== t123 : !!Array.isArray(e114) && !r75(e114, t123);
}
function p25(t123 = false) {
  return { isActive: t123, protectedKeys: {}, needsAnimating: {}, prevResolvedValues: {} };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animation/index.js
var i43 = class extends t86 {
  constructor(t123) {
    super(t123), t123.animationState || (t123.animationState = c45(t123));
  }
  updateAnimationControlsSubscription() {
    const { animate: n83 } = this.node.getProps();
    this.unmount(), t63(n83) && (this.unmount = n83.subscribe(this.node));
  }
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: t123 } = this.node.getProps(), { animate: n83 } = this.node.prevProps || {};
    t123 !== n83 && this.updateAnimationControlsSubscription();
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animation/exit.js
var e97 = 0;
var n68 = class extends t86 {
  constructor() {
    super(...arguments), this.id = e97++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: t123, onExitComplete: e114, custom: n83 } = this.node.presenceContext, { isPresent: s59 } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || t123 === s59)
      return;
    const o103 = this.node.animationState.setActive("exit", !t123, { custom: null != n83 ? n83 : this.node.getProps().custom });
    e114 && !t123 && o103.then(() => e114(this.id));
  }
  mount() {
    const { register: t123 } = this.node.presenceContext || {};
    t123 && (this.unmount = t123(this.id));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animations.js
var o90 = { animation: { Feature: i43 }, exit: { Feature: n68 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/distance.js
var t106 = (t123, n83) => Math.abs(t123 - n83);
function n69(n83, o103) {
  const r107 = t106(n83.x, o103.x), s59 = t106(n83.y, o103.y);
  return Math.sqrt(r107 ** 2 + s59 ** 2);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/pan/PanSession.js
var m46 = class {
  constructor(e114, s59, { transformPagePoint: i49 } = {}) {
    if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.updatePoint = () => {
      if (!this.lastMoveEvent || !this.lastMoveEventInfo)
        return;
      const t123 = f11(this.lastMoveEventInfo, this.history), n83 = null !== this.startEvent, e115 = n69(t123.offset, { x: 0, y: 0 }) >= 3;
      if (!n83 && !e115)
        return;
      const { point: s60 } = t123, { timestamp: i50 } = s32;
      this.history.push({ ...s60, timestamp: i50 });
      const { onStart: o103, onMove: r107 } = this.handlers;
      n83 || (o103 && o103(this.lastMoveEvent, t123), this.startEvent = this.lastMoveEvent), r107 && r107(this.lastMoveEvent, t123);
    }, this.handlePointerMove = (t123, e115) => {
      this.lastMoveEvent = t123, this.lastMoveEventInfo = p26(e115, this.transformPagePoint), c36.update(this.updatePoint, true);
    }, this.handlePointerUp = (t123, n83) => {
      if (this.end(), !this.lastMoveEvent || !this.lastMoveEventInfo)
        return;
      const { onEnd: e115, onSessionEnd: s60 } = this.handlers, i50 = f11("pointercancel" === t123.type ? this.lastMoveEventInfo : p26(n83, this.transformPagePoint), this.history);
      this.startEvent && e115 && e115(t123, i50), s60 && s60(t123, i50);
    }, !t82(e114))
      return;
    this.handlers = s59, this.transformPagePoint = i49;
    const m56 = p26(t83(e114), this.transformPagePoint), { point: v7 } = m56, { timestamp: u29 } = s32;
    this.history = [{ ...v7, timestamp: u29 }];
    const { onSessionStart: d33 } = s59;
    d33 && d33(e114, f11(m56, this.history)), this.removeListeners = c39(t84(window, "pointermove", this.handlePointerMove), t84(window, "pointerup", this.handlePointerUp), t84(window, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(t123) {
    this.handlers = t123;
  }
  end() {
    this.removeListeners && this.removeListeners(), m33(this.updatePoint);
  }
};
function p26(t123, n83) {
  return n83 ? { point: n83(t123.point) } : t123;
}
function v6(t123, n83) {
  return { x: t123.x - n83.x, y: t123.y - n83.y };
}
function f11({ point: t123 }, n83) {
  return { point: t123, delta: v6(t123, d28(n83)), offset: v6(t123, u21(n83)), velocity: c46(n83, 0.1) };
}
function u21(t123) {
  return t123[0];
}
function d28(t123) {
  return t123[t123.length - 1];
}
function c46(t123, n83) {
  if (t123.length < 2)
    return { x: 0, y: 0 };
  let e114 = t123.length - 1, o103 = null;
  const r107 = d28(t123);
  for (; e114 >= 0 && (o103 = t123[e114], !(r107.timestamp - o103.timestamp > e83(n83))); )
    e114--;
  if (!o103)
    return { x: 0, y: 0 };
  const a60 = o76(r107.timestamp - o103.timestamp);
  if (0 === a60)
    return { x: 0, y: 0 };
  const h16 = { x: (r107.x - o103.x) / a60, y: (r107.y - o103.y) / a60 };
  return h16.x === 1 / 0 && (h16.x = 0), h16.y === 1 / 0 && (h16.y = 0), h16;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.js
function n70(i49) {
  return i49.max - i49.min;
}
function t107(i49, n83 = 0, t123 = 0.01) {
  return Math.abs(i49 - n83) <= t123;
}
function o91(o103, a60, m56, r107 = 0.5) {
  o103.origin = r107, o103.originPoint = o82(a60.min, a60.max, o103.origin), o103.scale = n70(m56) / n70(a60), (t107(o103.scale, 1, 1e-4) || isNaN(o103.scale)) && (o103.scale = 1), o103.translate = o82(m56.min, m56.max, o103.origin) - o103.originPoint, (t107(o103.translate) || isNaN(o103.translate)) && (o103.translate = 0);
}
function a52(i49, n83, t123, a60) {
  o91(i49.x, n83.x, t123.x, a60 ? a60.originX : void 0), o91(i49.y, n83.y, t123.y, a60 ? a60.originY : void 0);
}
function m47(i49, t123, o103) {
  i49.min = o103.min + t123.min, i49.max = i49.min + n70(t123);
}
function r91(i49, n83, t123) {
  m47(i49.x, n83.x, t123.x), m47(i49.y, n83.y, t123.y);
}
function x7(i49, t123, o103) {
  i49.min = t123.min - o103.min, i49.max = i49.min + n70(t123);
}
function s53(i49, n83, t123) {
  x7(i49.x, n83.x, t123.x), x7(i49.y, n83.y, t123.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
function o92(n83, { min: m56, max: i49 }, o103) {
  return void 0 !== m56 && n83 < m56 ? n83 = o103 ? o82(m56, n83, o103.min) : Math.max(n83, m56) : void 0 !== i49 && n83 > i49 && (n83 = o103 ? o82(i49, n83, o103.max) : Math.min(n83, i49)), n83;
}
function r92(n83, m56, i49) {
  return { min: void 0 !== m56 ? n83.min + m56 : void 0, max: void 0 !== i49 ? n83.max + i49 - (n83.max - n83.min) : void 0 };
}
function x8(n83, { top: m56, left: i49, bottom: t123, right: o103 }) {
  return { x: r92(n83.x, i49, o103), y: r92(n83.y, m56, t123) };
}
function u22(n83, m56) {
  let i49 = m56.min - n83.min, t123 = m56.max - n83.max;
  return m56.max - m56.min < n83.max - n83.min && ([i49, t123] = [t123, i49]), { min: i49, max: t123 };
}
function a53(n83, m56) {
  return { x: u22(n83.x, m56.x), y: u22(n83.y, m56.y) };
}
function e98(t123, o103) {
  let r107 = 0.5;
  const x12 = n70(t123), u29 = n70(o103);
  return u29 > x12 ? r107 = t93(o103.min, o103.max - x12, t123.min) : x12 > u29 && (r107 = t93(t123.min, t123.max - u29, o103.min)), t71(0, 1, r107);
}
function c47(n83, m56) {
  const i49 = {};
  return void 0 !== m56.min && (i49.min = m56.min - n83.min), void 0 !== m56.max && (i49.max = m56.max - n83.min), i49;
}
var f12 = 0.35;
function s54(n83 = 0.35) {
  return false === n83 ? n83 = 0 : true === n83 && (n83 = f12), { x: p27(n83, "left", "right"), y: p27(n83, "top", "bottom") };
}
function p27(n83, m56, i49) {
  return { min: l36(n83, m56), max: l36(n83, i49) };
}
function l36(n83, m56) {
  return "number" == typeof n83 ? n83 : n83[m56] || 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/models.js
var n71 = () => ({ x: { translate: 0, scale: 1, origin: 0, originPoint: 0 }, y: { translate: 0, scale: 1, origin: 0, originPoint: 0 } });
var o93 = () => ({ x: { min: 0, max: 0 }, y: { min: 0, max: 0 } });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/each-axis.js
function n72(n83) {
  return [n83("x"), n83("y")];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/conversion.js
function t108({ top: t123, left: o103, right: n83, bottom: r107 }) {
  return { x: { min: o103, max: n83 }, y: { min: t123, max: r107 } };
}
function o94({ x: t123, y: o103 }) {
  return { top: o103.min, right: t123.max, bottom: o103.max, left: t123.min };
}
function n73(t123, o103) {
  if (!o103)
    return t123;
  const n83 = o103({ x: t123.left, y: t123.top }), r107 = o103({ x: t123.right, y: t123.bottom });
  return { top: n83.y, left: n83.x, bottom: r107.y, right: r107.x };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/has-transform.js
function t109(t123) {
  return void 0 === t123 || 1 === t123;
}
function n74({ scale: n83, scaleX: r107, scaleY: e114 }) {
  return !t109(n83) || !t109(r107) || !t109(e114);
}
function r93(t123) {
  return n74(t123) || e99(t123) || t123.z || t123.rotate || t123.rotateX || t123.rotateY;
}
function e99(t123) {
  return o95(t123.x) || o95(t123.y);
}
function o95(t123) {
  return t123 && "0%" !== t123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.js
function o96(t123, n83, o103) {
  return o103 + n83 * (t123 - o103);
}
function i44(t123, n83, i49, s59, e114) {
  return void 0 !== e114 && (t123 = o96(t123, e114, s59)), o96(t123, i49, s59) + n83;
}
function s55(t123, n83 = 0, o103 = 1, s59, e114) {
  t123.min = i44(t123.min, n83, o103, s59, e114), t123.max = i44(t123.max, n83, o103, s59, e114);
}
function e100(t123, { x: n83, y: o103 }) {
  s55(t123.x, n83.translate, n83.scale, n83.originPoint), s55(t123.y, o103.translate, o103.scale, o103.originPoint);
}
function l37(t123, o103, i49, s59 = false) {
  const l40 = i49.length;
  if (!l40)
    return;
  let c55, a60;
  o103.x = o103.y = 1;
  for (let r107 = 0; r107 < l40; r107++) {
    c55 = i49[r107], a60 = c55.projectionDelta;
    const l41 = c55.instance;
    l41 && l41.style && "contents" === l41.style.display || (s59 && c55.options.layoutScroll && c55.scroll && c55 !== c55.root && x9(t123, { x: -c55.scroll.offset.x, y: -c55.scroll.offset.y }), a60 && (o103.x *= a60.x.scale, o103.y *= a60.y.scale, e100(t123, a60)), s59 && r93(c55.latestValues) && x9(t123, c55.latestValues));
  }
  o103.x = r94(o103.x), o103.y = r94(o103.y);
}
function r94(t123) {
  return Number.isInteger(t123) || t123 > 1.0000000000001 || t123 < 0.999999999999 ? t123 : 1;
}
function c48(t123, n83) {
  t123.min = t123.min + n83, t123.max = t123.max + n83;
}
function a54(n83, o103, [i49, e114, l40]) {
  const r107 = void 0 !== o103[l40] ? o103[l40] : 0.5, c55 = o82(n83.min, n83.max, r107);
  s55(n83, o103[i49], o103[e114], c55, o103.scale);
}
var u23 = ["x", "scaleX", "originX"];
var f13 = ["y", "scaleY", "originY"];
function x9(t123, n83) {
  a54(t123.x, n83, u23), a54(t123.y, n83, f13);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/measure.js
function r95(e114, r107) {
  return t108(n73(e114.getBoundingClientRect(), r107));
}
function n75(o103, t123, n83) {
  const f19 = r95(o103, n83), { scroll: i49 } = t123;
  return i49 && (c48(f19.x, i49.offset.x), c48(f19.y, i49.offset.y)), f19;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
var A = /* @__PURE__ */ new WeakMap();
var C2 = class {
  constructor(t123) {
    this.openGlobalLock = null, this.isDragging = false, this.currentDirection = null, this.originPoint = { x: 0, y: 0 }, this.constraints = false, this.hasMutatedConstraints = false, this.elastic = o93(), this.visualElement = t123;
  }
  start(t123, { snapToCursor: n83 = false } = {}) {
    const { presenceContext: o103 } = this.visualElement;
    if (o103 && false === o103.isPresent)
      return;
    this.panSession = new m46(t123, { onSessionStart: (t124) => {
      this.stopAnimation(), n83 && this.snapToCursor(t83(t124, "page").point);
    }, onStart: (t124, s59) => {
      const { drag: n84, dragPropagation: o104, onDragStart: e114 } = this.getProps();
      if (n84 && !o104 && (this.openGlobalLock && this.openGlobalLock(), this.openGlobalLock = e79(n84), !this.openGlobalLock))
        return;
      this.isDragging = true, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = true, this.visualElement.projection.target = void 0), n72((t125) => {
        let s60 = this.getAxisMotionValue(t125).get() || 0;
        if (e72.test(s60)) {
          const { projection: i49 } = this.visualElement;
          if (i49 && i49.layout) {
            const n85 = i49.layout.layoutBox[t125];
            if (n85) {
              s60 = n70(n85) * (parseFloat(s60) / 100);
            }
          }
        }
        this.originPoint[t125] = s60;
      }), e114 && c36.update(() => e114(t124, s59), false, true);
      const { animationState: r107 } = this.visualElement;
      r107 && r107.setActive("whileDrag", true);
    }, onMove: (t124, s59) => {
      const { dragPropagation: i49, dragDirectionLock: n84, onDirectionLock: o104, onDrag: e114 } = this.getProps();
      if (!i49 && !this.openGlobalLock)
        return;
      const { offset: r107 } = s59;
      if (n84 && null === this.currentDirection)
        return this.currentDirection = function(t125, s60 = 10) {
          let i50 = null;
          Math.abs(t125.y) > s60 ? i50 = "y" : Math.abs(t125.x) > s60 && (i50 = "x");
          return i50;
        }(r107), void (null !== this.currentDirection && o104 && o104(this.currentDirection));
      this.updateAxis("x", s59.point, r107), this.updateAxis("y", s59.point, r107), this.visualElement.render(), e114 && e114(t124, s59);
    }, onSessionEnd: (t124, s59) => this.stop(t124, s59) }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  }
  stop(t123, s59) {
    const i49 = this.isDragging;
    if (this.cancel(), !i49)
      return;
    const { velocity: n83 } = s59;
    this.startAnimation(n83);
    const { onDragEnd: o103 } = this.getProps();
    o103 && c36.update(() => o103(t123, s59));
  }
  cancel() {
    this.isDragging = false;
    const { projection: t123, animationState: s59 } = this.visualElement;
    t123 && (t123.isAnimationBlocked = false), this.panSession && this.panSession.end(), this.panSession = void 0;
    const { dragPropagation: i49 } = this.getProps();
    !i49 && this.openGlobalLock && (this.openGlobalLock(), this.openGlobalLock = null), s59 && s59.setActive("whileDrag", false);
  }
  updateAxis(t123, s59, i49) {
    const { drag: n83 } = this.getProps();
    if (!i49 || !M2(t123, n83, this.currentDirection))
      return;
    const o103 = this.getAxisMotionValue(t123);
    let r107 = this.originPoint[t123] + i49[t123];
    this.constraints && this.constraints[t123] && (r107 = o92(r107, this.constraints[t123], this.elastic[t123])), o103.set(r107);
  }
  resolveConstraints() {
    const { dragConstraints: t123, dragElastic: s59 } = this.getProps(), { layout: i49 } = this.visualElement.projection || {}, o103 = this.constraints;
    t123 && t61(t123) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : this.constraints = !(!t123 || !i49) && x8(i49.layoutBox, t123), this.elastic = s54(s59), o103 !== this.constraints && i49 && this.constraints && !this.hasMutatedConstraints && n72((t124) => {
      this.getAxisMotionValue(t124) && (this.constraints[t124] = c47(i49.layoutBox[t124], this.constraints[t124]));
    });
  }
  resolveRefConstraints() {
    const { dragConstraints: s59, onMeasureDragConstraints: i49 } = this.getProps();
    if (!s59 || !t61(s59))
      return false;
    const o103 = s59.current;
    r53(null !== o103, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection: e114 } = this.visualElement;
    if (!e114 || !e114.layout)
      return false;
    const r107 = n75(o103, e114.root, this.visualElement.getTransformPagePoint());
    let a60 = a53(e114.layout.layoutBox, r107);
    if (i49) {
      const t123 = i49(o94(a60));
      this.hasMutatedConstraints = !!t123, t123 && (a60 = t108(t123));
    }
    return a60;
  }
  startAnimation(t123) {
    const { drag: s59, dragMomentum: i49, dragElastic: n83, dragTransition: o103, dragSnapToOrigin: e114, onDragTransitionEnd: r107 } = this.getProps(), a60 = this.constraints || {}, l40 = n72((r108) => {
      if (!M2(r108, s59, this.currentDirection))
        return;
      let l41 = a60 && a60[r108] || {};
      e114 && (l41 = { min: 0, max: 0 });
      const c55 = n83 ? 200 : 1e6, u29 = n83 ? 40 : 1e7, h16 = { type: "inertia", velocity: i49 ? t123[r108] : 0, bounceStiffness: c55, bounceDamping: u29, timeConstant: 750, restDelta: 1, restSpeed: 10, ...o103, ...l41 };
      return this.startAxisValueAnimation(r108, h16);
    });
    return Promise.all(l40).then(r107);
  }
  startAxisValueAnimation(t123, s59) {
    const i49 = this.getAxisMotionValue(t123);
    return i49.start(u18(t123, i49, 0, s59));
  }
  stopAnimation() {
    n72((t123) => this.getAxisMotionValue(t123).stop());
  }
  getAxisMotionValue(t123) {
    const s59 = "_drag" + t123.toUpperCase(), i49 = this.visualElement.getProps(), n83 = i49[s59];
    return n83 || this.visualElement.getValue(t123, (i49.initial ? i49.initial[t123] : void 0) || 0);
  }
  snapToCursor(t123) {
    n72((s59) => {
      const { drag: i49 } = this.getProps();
      if (!M2(s59, i49, this.currentDirection))
        return;
      const { projection: n83 } = this.visualElement, o103 = this.getAxisMotionValue(s59);
      if (n83 && n83.layout) {
        const { min: i50, max: e114 } = n83.layout.layoutBox[s59];
        o103.set(t123[s59] - o82(i50, e114, 0.5));
      }
    });
  }
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: t123, dragConstraints: s59 } = this.getProps(), { projection: i49 } = this.visualElement;
    if (!t61(s59) || !i49 || !this.constraints)
      return;
    this.stopAnimation();
    const o103 = { x: 0, y: 0 };
    n72((t124) => {
      const s60 = this.getAxisMotionValue(t124);
      if (s60) {
        const i50 = s60.get();
        o103[t124] = e98({ min: i50, max: i50 }, this.constraints[t124]);
      }
    });
    const { transformTemplate: e114 } = this.visualElement.getProps();
    this.visualElement.current.style.transform = e114 ? e114({}, "") : "none", i49.root && i49.root.updateScroll(), i49.updateLayout(), this.resolveConstraints(), n72((s60) => {
      if (!M2(s60, t123, null))
        return;
      const i50 = this.getAxisMotionValue(s60), { min: n83, max: e115 } = this.constraints[s60];
      i50.set(o82(n83, e115, o103[s60]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    A.set(this.visualElement, this);
    const t123 = this.visualElement.current, s59 = t84(t123, "pointerdown", (t124) => {
      const { drag: s60, dragListener: i50 = true } = this.getProps();
      s60 && i50 && this.start(t124);
    }), i49 = () => {
      const { dragConstraints: t124 } = this.getProps();
      t61(t124) && (this.constraints = this.resolveRefConstraints());
    }, { projection: e114 } = this.visualElement, r107 = e114.addEventListener("measure", i49);
    e114 && !e114.layout && (e114.root && e114.root.updateScroll(), e114.updateLayout()), i49();
    const a60 = e77(window, "resize", () => this.scalePositionWithinConstraints()), l40 = e114.addEventListener("didUpdate", ({ delta: t124, hasLayoutChanged: s60 }) => {
      this.isDragging && s60 && (n72((s61) => {
        const i50 = this.getAxisMotionValue(s61);
        i50 && (this.originPoint[s61] += t124[s61].translate, i50.set(i50.get() + t124[s61].translate));
      }), this.visualElement.render());
    });
    return () => {
      a60(), s59(), r107(), l40 && l40();
    };
  }
  getProps() {
    const t123 = this.visualElement.getProps(), { drag: s59 = false, dragDirectionLock: i49 = false, dragPropagation: n83 = false, dragConstraints: o103 = false, dragElastic: e114 = f12, dragMomentum: r107 = true } = t123;
    return { ...t123, drag: s59, dragDirectionLock: i49, dragPropagation: n83, dragConstraints: o103, dragElastic: e114, dragMomentum: r107 };
  }
};
function M2(t123, s59, i49) {
  return !(true !== s59 && s59 !== t123 || null !== i49 && i49 !== t123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/index.js
var r96 = class extends t86 {
  constructor(o103) {
    super(o103), this.removeGroupControls = o54, this.removeListeners = o54, this.controls = new C2(o103);
  }
  mount() {
    const { dragControls: o103 } = this.node.getProps();
    o103 && (this.removeGroupControls = o103.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || o54;
  }
  unmount() {
    this.removeGroupControls(), this.removeListeners();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/pan/index.js
var r97 = (n83) => (e114, o103) => {
  n83 && c36.update(() => n83(e114, o103));
};
var i45 = class extends t86 {
  constructor() {
    super(...arguments), this.removePointerDownListener = o54;
  }
  onPointerDown(e114) {
    this.session = new m46(e114, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
  }
  createPanHandlers() {
    const { onPanSessionStart: n83, onPanStart: e114, onPan: o103, onPanEnd: t123 } = this.node.getProps();
    return { onSessionStart: r97(n83), onStart: r97(e114), onMove: o103, onEnd: (n84, e115) => {
      delete this.session, t123 && c36.update(() => t123(n84, e115));
    } };
  }
  mount() {
    this.removePointerDownListener = t84(this.node.current, "pointerdown", (n83) => this.onPointerDown(n83));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener(), this.session && this.session.end();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.js
var import_react110 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
var import_react109 = __toESM(require_react());
function o97() {
  const o103 = (0, import_react109.useContext)(r48);
  if (null === o103)
    return [true, null];
  const { isPresent: i49, onExitComplete: s59, register: c55 } = o103, l40 = (0, import_react109.useId)();
  (0, import_react109.useEffect)(() => c55(l40), []);
  return !i49 && s59 ? [false, () => s59 && s59(l40)] : [true];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/state.js
var e102 = { hasAnimatedSinceResize: true, hasEverUpdated: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.js
function r99(t123, r107) {
  return r107.max === r107.min ? 0 : t123 / (r107.max - r107.min) * 100;
}
var e103 = { correct: (e114, n83) => {
  if (!n83.target)
    return e114;
  if ("string" == typeof e114) {
    if (!a37.test(e114))
      return e114;
    e114 = parseFloat(e114);
  }
  return `${r99(e114, n83.target.x)}% ${r99(e114, n83.target.y)}%`;
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.js
var t111 = { correct: (t123, { treeScale: o103, projectionDelta: n83 }) => {
  const c55 = t123, s59 = k3.parse(t123);
  if (s59.length > 5)
    return c55;
  const m56 = k3.createTransformer(t123), p31 = "number" != typeof s59[0] ? 1 : 0, a60 = n83.x.scale * o103.x, l40 = n83.y.scale * o103.y;
  s59[0 + p31] /= a60, s59[1 + p31] /= l40;
  const f19 = o82(a60, l40, 0.5);
  return "number" == typeof s59[2 + p31] && (s59[2 + p31] /= f19), "number" == typeof s59[3 + p31] && (s59[3 + p31] /= f19), m56(s59);
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.js
var m48 = class extends import_react110.default.Component {
  componentDidMount() {
    const { visualElement: e114, layoutGroup: o103, switchLayoutGroup: t123, layoutId: r107 } = this.props, { projection: s59 } = e114;
    t68(c49), s59 && (o103.group && o103.group.add(s59), t123 && t123.register && r107 && t123.register(s59), s59.root.didUpdate(), s59.addEventListener("animationComplete", () => {
      this.safeToRemove();
    }), s59.setOptions({ ...s59.options, onExitComplete: () => this.safeToRemove() })), e102.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(o103) {
    const { layoutDependency: t123, visualElement: r107, drag: s59, isPresent: i49 } = this.props, n83 = r107.projection;
    return n83 ? (n83.isPresent = i49, s59 || o103.layoutDependency !== t123 || void 0 === t123 ? n83.willUpdate() : this.safeToRemove(), o103.isPresent !== i49 && (i49 ? n83.promote() : n83.relegate() || c36.postRender(() => {
      const e114 = n83.getStack();
      e114 && e114.members.length || this.safeToRemove();
    })), null) : null;
  }
  componentDidUpdate() {
    const { projection: e114 } = this.props.visualElement;
    e114 && (e114.root.didUpdate(), queueMicrotask(() => {
      !e114.currentAnimation && e114.isLead() && this.safeToRemove();
    }));
  }
  componentWillUnmount() {
    const { visualElement: e114, layoutGroup: o103, switchLayoutGroup: t123 } = this.props, { projection: r107 } = e114;
    r107 && (r107.scheduleCheckAfterUnmount(), o103 && o103.group && o103.group.remove(r107), t123 && t123.deregister && t123.deregister(r107));
  }
  safeToRemove() {
    const { safeToRemove: e114 } = this.props;
    e114 && e114();
  }
  render() {
    return null;
  }
};
function u24(e114) {
  const [n83, p31] = o97(), a60 = (0, import_react110.useContext)(r51);
  return import_react110.default.createElement(m48, { ...e114, layoutGroup: a60, switchLayoutGroup: (0, import_react110.useContext)(r60), isPresent: n83, safeToRemove: p31 });
}
var c49 = { borderRadius: { ...e103, applyTo: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomLeftRadius", "borderBottomRightRadius"] }, borderTopLeftRadius: e103, borderTopRightRadius: e103, borderBottomLeftRadius: e103, borderBottomRightRadius: e103, boxShadow: t111 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/animation/mix-values.js
var a55 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var s56 = a55.length;
var c50 = (t123) => "string" == typeof t123 ? parseFloat(t123) : t123;
var n76 = (t123) => "number" == typeof t123 || a37.test(t123);
function m49(t123, o103, r107, p31, m56, d33) {
  m56 ? (t123.opacity = o82(0, void 0 !== r107.opacity ? r107.opacity : 1, f14(p31)), t123.opacityExit = o82(void 0 !== o103.opacity ? o103.opacity : 1, 0, y4(p31))) : d33 && (t123.opacity = o82(void 0 !== o103.opacity ? o103.opacity : 1, void 0 !== r107.opacity ? r107.opacity : 1, p31));
  for (let m57 = 0; m57 < s56; m57++) {
    const s59 = `border${a55[m57]}Radius`;
    let f19 = u25(o103, s59), y6 = u25(r107, s59);
    if (void 0 === f19 && void 0 === y6)
      continue;
    f19 || (f19 = 0), y6 || (y6 = 0);
    0 === f19 || 0 === y6 || n76(f19) === n76(y6) ? (t123[s59] = Math.max(o82(c50(f19), c50(y6), p31), 0), (e72.test(y6) || e72.test(f19)) && (t123[s59] += "%")) : t123[s59] = y6;
  }
  (o103.rotate || r107.rotate) && (t123.rotate = o82(o103.rotate || 0, r107.rotate || 0, p31));
}
function u25(t123, o103) {
  return void 0 !== t123[o103] ? t123[o103] : t123.borderRadius;
}
var f14 = d29(0, 0.5, s46);
var y4 = d29(0.5, 0.95, o54);
function d29(t123, i49, r107) {
  return (e114) => e114 < t123 ? 0 : e114 > i49 ? 1 : r107(t93(t123, i49, e114));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/copy.js
function n77(n83, x12) {
  n83.min = x12.min, n83.max = x12.max;
}
function x10(x12, i49) {
  n77(x12.x, i49.x), n77(x12.y, i49.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.js
function t113(i49, n83, t123, m56, r107) {
  return i49 = o96(i49 -= n83, 1 / t123, m56), void 0 !== r107 && (i49 = o96(i49, 1 / r107, m56)), i49;
}
function m50(o103, m56 = 0, r107 = 1, e114 = 0.5, s59, a60 = o103, u29 = o103) {
  if (e72.test(m56)) {
    m56 = parseFloat(m56);
    m56 = o82(u29.min, u29.max, m56 / 100) - u29.min;
  }
  if ("number" != typeof m56)
    return;
  let f19 = o82(a60.min, a60.max, e114);
  o103 === a60 && (f19 -= m56), o103.min = t113(o103.min, m56, r107, f19, s59), o103.max = t113(o103.max, m56, r107, f19, s59);
}
function r100(i49, n83, [o103, t123, r107], e114, s59) {
  m50(i49, n83[o103], n83[t123], n83[r107], n83.scale, e114, s59);
}
var e104 = ["x", "scaleX", "originX"];
var s57 = ["y", "scaleY", "originY"];
function a56(i49, n83, o103, t123) {
  r100(i49.x, n83, e104, o103 ? o103.x : void 0, t123 ? t123.x : void 0), r100(i49.y, n83, s57, o103 ? o103.y : void 0, t123 ? t123.y : void 0);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/utils.js
function t114(n83) {
  return 0 === n83.translate && 1 === n83.scale;
}
function r101(n83) {
  return t114(n83.x) && t114(n83.y);
}
function x11(n83, t123) {
  return n83.x.min === t123.x.min && n83.x.max === t123.x.max && n83.y.min === t123.y.min && n83.y.max === t123.y.max;
}
function m51(t123) {
  return n70(t123.x) / n70(t123.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/shared/stack.js
var t115 = class {
  constructor() {
    this.members = [];
  }
  add(s59) {
    n64(this.members, s59), s59.scheduleRender();
  }
  remove(e114) {
    if (i41(this.members, e114), e114 === this.prevLead && (this.prevLead = void 0), e114 === this.lead) {
      const e115 = this.members[this.members.length - 1];
      e115 && this.promote(e115);
    }
  }
  relegate(e114) {
    const s59 = this.members.findIndex((s60) => e114 === s60);
    if (0 === s59)
      return false;
    let t123;
    for (let e115 = s59; e115 >= 0; e115--) {
      const s60 = this.members[e115];
      if (false !== s60.isPresent) {
        t123 = s60;
        break;
      }
    }
    return !!t123 && (this.promote(t123), true);
  }
  promote(e114, s59) {
    const t123 = this.lead;
    if (e114 !== t123 && (this.prevLead = t123, this.lead = e114, e114.show(), t123)) {
      t123.instance && t123.scheduleRender(), e114.scheduleRender(), e114.resumeFrom = t123, s59 && (e114.resumeFrom.preserveOpacity = true), t123.snapshot && (e114.snapshot = t123.snapshot, e114.snapshot.latestValues = t123.animationValues || t123.latestValues), e114.root && e114.root.isUpdating && (e114.isLayoutDirty = true);
      const { crossfade: o103 } = e114.options;
      false === o103 && t123.hide();
    }
  }
  exitAnimationComplete() {
    this.members.forEach((e114) => {
      const { options: s59, resumingFrom: t123 } = e114;
      s59.onExitComplete && s59.onExitComplete(), t123 && t123.options.onExitComplete && t123.options.onExitComplete();
    });
  }
  scheduleRender() {
    this.members.forEach((e114) => {
      e114.instance && e114.scheduleRender(false);
    });
  }
  removeLeadSnapshot() {
    this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/transform.js
function t116(t123, e114, a60) {
  let o103 = "";
  const r107 = t123.x.translate / e114.x, n83 = t123.y.translate / e114.y;
  if ((r107 || n83) && (o103 = `translate3d(${r107}px, ${n83}px, 0) `), 1 === e114.x && 1 === e114.y || (o103 += `scale(${1 / e114.x}, ${1 / e114.y}) `), a60) {
    const { rotate: t124, rotateX: e115, rotateY: r108 } = a60;
    t124 && (o103 += `rotate(${t124}deg) `), e115 && (o103 += `rotateX(${e115}deg) `), r108 && (o103 += `rotateY(${r108}deg) `);
  }
  const s59 = t123.x.scale * e114.x, x12 = t123.y.scale * e114.y;
  return 1 === s59 && 1 === x12 || (o103 += `scale(${s59}, ${x12})`), o103 || "none";
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
var t117 = (t123, e114) => t123.depth - e114.depth;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/flat-tree.js
var s58 = class {
  constructor() {
    this.children = [], this.isDirty = false;
  }
  add(r107) {
    n64(this.children, r107), this.isDirty = true;
  }
  remove(i49) {
    i41(this.children, i49), this.isDirty = true;
  }
  forEach(i49) {
    this.isDirty && this.children.sort(t117), this.isDirty = false, this.children.forEach(i49);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/delay.js
function e105(e114, n83) {
  const t123 = performance.now(), m56 = ({ timestamp: o103 }) => {
    const p31 = o103 - t123;
    p31 >= n83 && (m33(m56), e114(p31 - n83));
  };
  return c36.read(m56, true), () => m33(m56);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/debug/record.js
function o99(o103) {
  window.MotionDebug && window.MotionDebug.record(o103);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.js
function e106(e114) {
  return e114 instanceof SVGElement && "svg" !== e114.tagName;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/single-value.js
function r102(r107, m56, n83) {
  const a60 = o64(r107) ? r107 : h14(r107);
  return a60.start(u18("", a60, m56, n83)), a60.animation;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/create-projection-node.js
var b7 = ["", "X", "Y", "Z"];
var N = 0;
var z2 = { type: "projectionFrame", totalNodes: 0, resolvedTargetDeltas: 0, recalculatedProjection: 0 };
function H({ attachResizeListener: p31, defaultParent: P3, measureScroll: B, checkIsScrollRoot: U, resetTransform: H2 }) {
  return class {
    constructor(t123 = {}, e114 = null == P3 ? void 0 : P3()) {
      this.id = N++, this.animationId = 0, this.children = /* @__PURE__ */ new Set(), this.options = {}, this.isTreeAnimating = false, this.isAnimationBlocked = false, this.isLayoutDirty = false, this.isProjectionDirty = false, this.isSharedProjectionDirty = false, this.isTransformDirty = false, this.updateManuallyBlocked = false, this.updateBlockedByResize = false, this.isUpdating = false, this.isSVG = false, this.needsReset = false, this.shouldResetTransform = false, this.treeScale = { x: 1, y: 1 }, this.eventHandlers = /* @__PURE__ */ new Map(), this.hasTreeAnimated = false, this.updateScheduled = false, this.checkUpdateFailed = () => {
        this.isUpdating && (this.isUpdating = false, this.clearAllSnapshots());
      }, this.updateProjection = () => {
        z2.totalNodes = z2.resolvedTargetDeltas = z2.recalculatedProjection = 0, this.nodes.forEach(X), this.nodes.forEach(Q), this.nodes.forEach(_), this.nodes.forEach(Y), o99(z2);
      }, this.hasProjected = false, this.isVisible = true, this.animationProgress = 0, this.sharedNodes = /* @__PURE__ */ new Map(), this.latestValues = t123, this.root = e114 ? e114.root || e114 : this, this.path = e114 ? [...e114.path, e114] : [], this.parent = e114, this.depth = e114 ? e114.depth + 1 : 0;
      for (let t124 = 0; t124 < this.path.length; t124++)
        this.path[t124].shouldResetTransform = true;
      this.root === this && (this.nodes = new s58());
    }
    addEventListener(t123, e114) {
      return this.eventHandlers.has(t123) || this.eventHandlers.set(t123, new i42()), this.eventHandlers.get(t123).add(e114);
    }
    notifyListeners(t123, ...e114) {
      const i49 = this.eventHandlers.get(t123);
      i49 && i49.notify(...e114);
    }
    hasListeners(t123) {
      return this.eventHandlers.has(t123);
    }
    mount(t123, e114 = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = e106(t123), this.instance = t123;
      const { layoutId: i49, layout: s59, visualElement: o103 } = this.options;
      if (o103 && !o103.current && o103.mount(t123), this.root.nodes.add(this), this.parent && this.parent.children.add(this), e114 && (s59 || i49) && (this.isLayoutDirty = true), p31) {
        let e115;
        const i50 = () => this.root.updateBlockedByResize = false;
        p31(t123, () => {
          this.root.updateBlockedByResize = true, e115 && e115(), e115 = e105(i50, 250), e102.hasAnimatedSinceResize && (e102.hasAnimatedSinceResize = false, this.nodes.forEach(K));
        });
      }
      i49 && this.root.registerSharedNode(i49, this), false !== this.options.animate && o103 && (i49 || s59) && this.addEventListener("didUpdate", ({ delta: t124, hasLayoutChanged: e115, hasRelativeTargetChanged: i50, layout: s60 }) => {
        if (this.isTreeAnimationBlocked())
          return this.target = void 0, void (this.relativeTarget = void 0);
        const a60 = this.options.transition || o103.getDefaultTransition() || rt, { onLayoutAnimationStart: r107, onLayoutAnimationComplete: n83 } = o103.getProps(), h16 = !this.targetLayout || !x11(this.targetLayout, s60) || i50, l40 = !e115 && i50;
        if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || l40 || e115 && (h16 || !this.currentAnimation)) {
          this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0), this.setAnimationOrigin(t124, l40);
          const e116 = { ...r88(a60, "layout"), onPlay: r107, onComplete: n83 };
          (o103.shouldReduceMotion || this.options.layoutRoot) && (e116.delay = 0, e116.type = false), this.startAnimation(e116);
        } else
          e115 || K(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();
        this.targetLayout = s60;
      });
    }
    unmount() {
      this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);
      const e114 = this.getStack();
      e114 && e114.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, m33(this.updateProjection);
    }
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    startUpdate() {
      this.isUpdateBlocked() || (this.isUpdating = true, this.nodes && this.nodes.forEach(tt), this.animationId++);
    }
    getTransformTemplate() {
      const { visualElement: t123 } = this.options;
      return t123 && t123.getProps().transformTemplate;
    }
    willUpdate(t123 = true) {
      if (this.root.hasTreeAnimated = true, this.root.isUpdateBlocked())
        return void (this.options.onExitComplete && this.options.onExitComplete());
      if (!this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let t124 = 0; t124 < this.path.length; t124++) {
        const e115 = this.path[t124];
        e115.shouldResetTransform = true, e115.updateScroll("snapshot"), e115.options.layoutRoot && e115.willUpdate(false);
      }
      const { layoutId: e114, layout: i49 } = this.options;
      if (void 0 === e114 && !i49)
        return;
      const s59 = this.getTransformTemplate();
      this.prevTransformTemplateValue = s59 ? s59(this.latestValues, "") : void 0, this.updateSnapshot(), t123 && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      if (this.isUpdateBlocked())
        return this.unblockUpdate(), this.clearAllSnapshots(), void this.nodes.forEach($);
      this.isUpdating || this.nodes.forEach(q2), this.isUpdating = false, this.nodes.forEach(J), this.nodes.forEach(W), this.nodes.forEach(G2), this.clearAllSnapshots();
      const t123 = performance.now();
      s32.delta = t71(0, 1e3 / 60, t123 - s32.timestamp), s32.timestamp = t123, s32.isProcessing = true, n38.update.process(s32), n38.preRender.process(s32), n38.render.process(s32), s32.isProcessing = false;
    }
    didUpdate() {
      this.updateScheduled || (this.updateScheduled = true, queueMicrotask(() => this.update()));
    }
    clearAllSnapshots() {
      this.nodes.forEach(Z), this.sharedNodes.forEach(et);
    }
    scheduleUpdateProjection() {
      c36.preRender(this.updateProjection, false, true);
    }
    scheduleCheckAfterUnmount() {
      c36.postRender(() => {
        this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();
      });
    }
    updateSnapshot() {
      !this.snapshot && this.instance && (this.snapshot = this.measure());
    }
    updateLayout() {
      if (!this.instance)
        return;
      if (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead() || this.isLayoutDirty))
        return;
      if (this.resumeFrom && !this.resumeFrom.instance)
        for (let t124 = 0; t124 < this.path.length; t124++) {
          this.path[t124].updateScroll();
        }
      const t123 = this.layout;
      this.layout = this.measure(false), this.layoutCorrected = o93(), this.isLayoutDirty = false, this.projectionDelta = void 0, this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement: e114 } = this.options;
      e114 && e114.notify("LayoutMeasure", this.layout.layoutBox, t123 ? t123.layoutBox : void 0);
    }
    updateScroll(t123 = "measure") {
      let e114 = Boolean(this.options.layoutScroll && this.instance);
      this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === t123 && (e114 = false), e114 && (this.scroll = { animationId: this.root.animationId, phase: t123, isRoot: U(this.instance), offset: B(this.instance) });
    }
    resetTransform() {
      if (!H2)
        return;
      const t123 = this.isLayoutDirty || this.shouldResetTransform, e114 = this.projectionDelta && !r101(this.projectionDelta), i49 = this.getTransformTemplate(), s59 = i49 ? i49(this.latestValues, "") : void 0, o103 = s59 !== this.prevTransformTemplateValue;
      t123 && (e114 || r93(this.latestValues) || o103) && (H2(this.instance, s59), this.shouldResetTransform = false, this.scheduleRender());
    }
    measure(t123 = true) {
      const e114 = this.measurePageBox();
      let i49 = this.removeElementScroll(e114);
      var s59;
      return t123 && (i49 = this.removeTransform(i49)), nt((s59 = i49).x), nt(s59.y), { animationId: this.root.animationId, measuredBox: e114, layoutBox: i49, latestValues: {}, source: this.id };
    }
    measurePageBox() {
      const { visualElement: t123 } = this.options;
      if (!t123)
        return o93();
      const e114 = t123.measureViewportBox(), { scroll: i49 } = this.root;
      return i49 && (c48(e114.x, i49.offset.x), c48(e114.y, i49.offset.y)), e114;
    }
    removeElementScroll(t123) {
      const e114 = o93();
      x10(e114, t123);
      for (let i49 = 0; i49 < this.path.length; i49++) {
        const s59 = this.path[i49], { scroll: o103, options: n83 } = s59;
        if (s59 !== this.root && o103 && n83.layoutScroll) {
          if (o103.isRoot) {
            x10(e114, t123);
            const { scroll: i50 } = this.root;
            i50 && (c48(e114.x, -i50.offset.x), c48(e114.y, -i50.offset.y));
          }
          c48(e114.x, o103.offset.x), c48(e114.y, o103.offset.y);
        }
      }
      return e114;
    }
    applyTransform(t123, e114 = false) {
      const i49 = o93();
      x10(i49, t123);
      for (let t124 = 0; t124 < this.path.length; t124++) {
        const s59 = this.path[t124];
        !e114 && s59.options.layoutScroll && s59.scroll && s59 !== s59.root && x9(i49, { x: -s59.scroll.offset.x, y: -s59.scroll.offset.y }), r93(s59.latestValues) && x9(i49, s59.latestValues);
      }
      return r93(this.latestValues) && x9(i49, this.latestValues), i49;
    }
    removeTransform(t123) {
      const e114 = o93();
      x10(e114, t123);
      for (let t124 = 0; t124 < this.path.length; t124++) {
        const i49 = this.path[t124];
        if (!i49.instance)
          continue;
        if (!r93(i49.latestValues))
          continue;
        n74(i49.latestValues) && i49.updateSnapshot();
        const s59 = o93(), o103 = i49.measurePageBox();
        x10(s59, o103), a56(e114, i49.latestValues, i49.snapshot ? i49.snapshot.layoutBox : void 0, s59);
      }
      return r93(this.latestValues) && a56(e114, this.latestValues), e114;
    }
    setTargetDelta(t123) {
      this.targetDelta = t123, this.root.scheduleUpdateProjection(), this.isProjectionDirty = true;
    }
    setOptions(t123) {
      this.options = { ...this.options, ...t123, crossfade: void 0 === t123.crossfade || t123.crossfade };
    }
    clearMeasurements() {
      this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== s32.timestamp && this.relativeParent.resolveTargetDelta(true);
    }
    resolveTargetDelta(t123 = false) {
      var e114;
      const i49 = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = i49.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = i49.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = i49.isSharedProjectionDirty);
      const s59 = Boolean(this.resumingFrom) || this !== i49;
      if (!(t123 || s59 && this.isSharedProjectionDirty || this.isProjectionDirty || (null === (e114 = this.parent) || void 0 === e114 ? void 0 : e114.isProjectionDirty) || this.attemptToResolveRelativeTarget))
        return;
      const { layout: o103, layoutId: r107 } = this.options;
      if (this.layout && (o103 || r107)) {
        if (this.resolvedRelativeTargetAt = s32.timestamp, !this.targetDelta && !this.relativeTarget) {
          const t124 = this.getClosestProjectingParent();
          t124 && t124.layout && 1 !== this.animationProgress ? (this.relativeParent = t124, this.forceRelativeParentToResolveTarget(), this.relativeTarget = o93(), this.relativeTargetOrigin = o93(), s53(this.relativeTargetOrigin, this.layout.layoutBox, t124.layout.layoutBox), x10(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
        }
        if (this.relativeTarget || this.targetDelta) {
          if (this.target || (this.target = o93(), this.targetWithTransforms = o93()), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), r91(this.target, this.relativeTarget, this.relativeParent.target)) : this.targetDelta ? (Boolean(this.resumingFrom) ? this.target = this.applyTransform(this.layout.layoutBox) : x10(this.target, this.layout.layoutBox), e100(this.target, this.targetDelta)) : x10(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget) {
            this.attemptToResolveRelativeTarget = false;
            const t124 = this.getClosestProjectingParent();
            t124 && Boolean(t124.resumingFrom) === Boolean(this.resumingFrom) && !t124.options.layoutScroll && t124.target && 1 !== this.animationProgress ? (this.relativeParent = t124, this.forceRelativeParentToResolveTarget(), this.relativeTarget = o93(), this.relativeTargetOrigin = o93(), s53(this.relativeTargetOrigin, this.target, t124.target), x10(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
          }
          z2.resolvedTargetDeltas++;
        }
      }
    }
    getClosestProjectingParent() {
      if (this.parent && !n74(this.parent.latestValues) && !e99(this.parent.latestValues))
        return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var t123;
      const e114 = this.getLead(), i49 = Boolean(this.resumingFrom) || this !== e114;
      let s59 = true;
      if ((this.isProjectionDirty || (null === (t123 = this.parent) || void 0 === t123 ? void 0 : t123.isProjectionDirty)) && (s59 = false), i49 && (this.isSharedProjectionDirty || this.isTransformDirty) && (s59 = false), this.resolvedRelativeTargetAt === s32.timestamp && (s59 = false), s59)
        return;
      const { layout: o103, layoutId: r107 } = this.options;
      if (this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !o103 && !r107)
        return;
      x10(this.layoutCorrected, this.layout.layoutBox);
      const n83 = this.treeScale.x, h16 = this.treeScale.y;
      l37(this.layoutCorrected, this.treeScale, this.path, i49), !e114.layout || e114.target || 1 === this.treeScale.x && 1 === this.treeScale.y || (e114.target = e114.layout.layoutBox);
      const { target: c55 } = e114;
      if (!c55)
        return void (this.projectionTransform && (this.projectionDelta = n71(), this.projectionTransform = "none", this.scheduleRender()));
      this.projectionDelta || (this.projectionDelta = n71(), this.projectionDeltaWithTransform = n71());
      const u29 = this.projectionTransform;
      a52(this.projectionDelta, this.layoutCorrected, c55, this.latestValues), this.projectionTransform = t116(this.projectionDelta, this.treeScale), this.projectionTransform === u29 && this.treeScale.x === n83 && this.treeScale.y === h16 || (this.hasProjected = true, this.scheduleRender(), this.notifyListeners("projectionUpdate", c55)), z2.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(t123 = true) {
      if (this.options.scheduleRender && this.options.scheduleRender(), t123) {
        const t124 = this.getStack();
        t124 && t124.scheduleRender();
      }
      this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);
    }
    setAnimationOrigin(t123, e114 = false) {
      const i49 = this.snapshot, s59 = i49 ? i49.latestValues : {}, r107 = { ...this.latestValues }, n83 = n71();
      this.relativeParent && this.relativeParent.options.layoutRoot || (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !e114;
      const h16 = o93(), l40 = (i49 ? i49.source : void 0) !== (this.layout ? this.layout.source : void 0), u29 = this.getStack(), d33 = !u29 || u29.members.length <= 1, m56 = Boolean(l40 && !d33 && true === this.options.crossfade && !this.path.some(at));
      let p32;
      this.animationProgress = 0, this.mixTargetDelta = (e115) => {
        const i50 = e115 / 1e3;
        it(n83.x, t123.x, i50), it(n83.y, t123.y, i50), this.setTargetDelta(n83), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (s53(h16, this.layout.layoutBox, this.relativeParent.layout.layoutBox), ot(this.relativeTarget, this.relativeTargetOrigin, h16, i50), p32 && x11(this.relativeTarget, p32) && (this.isProjectionDirty = false), p32 || (p32 = o93()), x10(p32, this.relativeTarget)), l40 && (this.animationValues = r107, m49(r107, s59, this.latestValues, i50, m56, d33)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = i50;
      }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(e114) {
      this.notifyListeners("animationStart"), this.currentAnimation && this.currentAnimation.stop(), this.resumingFrom && this.resumingFrom.currentAnimation && this.resumingFrom.currentAnimation.stop(), this.pendingAnimation && (m33(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = c36.update(() => {
        e102.hasAnimatedSinceResize = true, this.currentAnimation = r102(0, 1e3, { ...e114, onUpdate: (t123) => {
          this.mixTargetDelta(t123), e114.onUpdate && e114.onUpdate(t123);
        }, onComplete: () => {
          e114.onComplete && e114.onComplete(), this.completeAnimation();
        } }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);
      const t123 = this.getStack();
      t123 && t123.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(1e3), this.currentAnimation.stop()), this.completeAnimation();
    }
    applyTransformsToTarget() {
      const t123 = this.getLead();
      let { targetWithTransforms: e114, target: i49, layout: s59, latestValues: o103 } = t123;
      if (e114 && i49 && s59) {
        if (this !== t123 && this.layout && s59 && ht(this.options.animationType, this.layout.layoutBox, s59.layoutBox)) {
          i49 = this.target || o93();
          const e115 = n70(this.layout.layoutBox.x);
          i49.x.min = t123.target.x.min, i49.x.max = i49.x.min + e115;
          const s60 = n70(this.layout.layoutBox.y);
          i49.y.min = t123.target.y.min, i49.y.max = i49.y.min + s60;
        }
        x10(e114, i49), x9(e114, o103), a52(this.projectionDeltaWithTransform, this.layoutCorrected, e114, o103);
      }
    }
    registerSharedNode(t123, e114) {
      this.sharedNodes.has(t123) || this.sharedNodes.set(t123, new t115());
      this.sharedNodes.get(t123).add(e114);
      const i49 = e114.options.initialPromotionConfig;
      e114.promote({ transition: i49 ? i49.transition : void 0, preserveFollowOpacity: i49 && i49.shouldPreserveFollowOpacity ? i49.shouldPreserveFollowOpacity(e114) : void 0 });
    }
    isLead() {
      const t123 = this.getStack();
      return !t123 || t123.lead === this;
    }
    getLead() {
      var t123;
      const { layoutId: e114 } = this.options;
      return e114 && (null === (t123 = this.getStack()) || void 0 === t123 ? void 0 : t123.lead) || this;
    }
    getPrevLead() {
      var t123;
      const { layoutId: e114 } = this.options;
      return e114 ? null === (t123 = this.getStack()) || void 0 === t123 ? void 0 : t123.prevLead : void 0;
    }
    getStack() {
      const { layoutId: t123 } = this.options;
      if (t123)
        return this.root.sharedNodes.get(t123);
    }
    promote({ needsReset: t123, transition: e114, preserveFollowOpacity: i49 } = {}) {
      const s59 = this.getStack();
      s59 && s59.promote(this, i49), t123 && (this.projectionDelta = void 0, this.needsReset = true), e114 && this.setOptions({ transition: e114 });
    }
    relegate() {
      const t123 = this.getStack();
      return !!t123 && t123.relegate(this);
    }
    resetRotation() {
      const { visualElement: t123 } = this.options;
      if (!t123)
        return;
      let e114 = false;
      const { latestValues: i49 } = t123;
      if ((i49.rotate || i49.rotateX || i49.rotateY || i49.rotateZ) && (e114 = true), !e114)
        return;
      const s59 = {};
      for (let e115 = 0; e115 < b7.length; e115++) {
        const o103 = "rotate" + b7[e115];
        i49[o103] && (s59[o103] = i49[o103], t123.setStaticValue(o103, 0));
      }
      t123.render();
      for (const e115 in s59)
        t123.setStaticValue(e115, s59[e115]);
      t123.scheduleRender();
    }
    getProjectionStyles(t123 = {}) {
      var e114, i49;
      const s59 = {};
      if (!this.instance || this.isSVG)
        return s59;
      if (!this.isVisible)
        return { visibility: "hidden" };
      s59.visibility = "";
      const o103 = this.getTransformTemplate();
      if (this.needsReset)
        return this.needsReset = false, s59.opacity = "", s59.pointerEvents = e76(t123.pointerEvents) || "", s59.transform = o103 ? o103(this.latestValues, "") : "none", s59;
      const a60 = this.getLead();
      if (!this.projectionDelta || !this.layout || !a60.target) {
        const e115 = {};
        return this.options.layoutId && (e115.opacity = void 0 !== this.latestValues.opacity ? this.latestValues.opacity : 1, e115.pointerEvents = e76(t123.pointerEvents) || ""), this.hasProjected && !r93(this.latestValues) && (e115.transform = o103 ? o103({}, "") : "none", this.hasProjected = false), e115;
      }
      const r107 = a60.animationValues || a60.latestValues;
      this.applyTransformsToTarget(), s59.transform = t116(this.projectionDeltaWithTransform, this.treeScale, r107), o103 && (s59.transform = o103(r107, s59.transform));
      const { x: n83, y: h16 } = this.projectionDelta;
      s59.transformOrigin = `${100 * n83.origin}% ${100 * h16.origin}% 0`, a60.animationValues ? s59.opacity = a60 === this ? null !== (i49 = null !== (e114 = r107.opacity) && void 0 !== e114 ? e114 : this.latestValues.opacity) && void 0 !== i49 ? i49 : 1 : this.preserveOpacity ? this.latestValues.opacity : r107.opacityExit : s59.opacity = a60 === this ? void 0 !== r107.opacity ? r107.opacity : "" : void 0 !== r107.opacityExit ? r107.opacityExit : 0;
      for (const t124 in n46) {
        if (void 0 === r107[t124])
          continue;
        const { correct: e115, applyTo: i50 } = n46[t124], o104 = "none" === s59.transform ? r107[t124] : e115(r107[t124], a60);
        if (i50) {
          const t125 = i50.length;
          for (let e116 = 0; e116 < t125; e116++)
            s59[i50[e116]] = o104;
        } else
          s59[t124] = o104;
      }
      return this.options.layoutId && (s59.pointerEvents = a60 === this ? e76(t123.pointerEvents) || "" : "none"), s59;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    resetTree() {
      this.root.nodes.forEach((t123) => {
        var e114;
        return null === (e114 = t123.currentAnimation) || void 0 === e114 ? void 0 : e114.stop();
      }), this.root.nodes.forEach($), this.root.sharedNodes.clear();
    }
  };
}
function W(t123) {
  t123.updateLayout();
}
function G2(t123) {
  var e114;
  const i49 = (null === (e114 = t123.resumeFrom) || void 0 === e114 ? void 0 : e114.snapshot) || t123.snapshot;
  if (t123.isLead() && t123.layout && i49 && t123.hasListeners("didUpdate")) {
    const { layoutBox: e115, measuredBox: s59 } = t123.layout, { animationType: o103 } = t123.options, a60 = i49.source !== t123.layout.source;
    "size" === o103 ? n72((t124) => {
      const s60 = a60 ? i49.measuredBox[t124] : i49.layoutBox[t124], o104 = n70(s60);
      s60.min = e115[t124].min, s60.max = s60.min + o104;
    }) : ht(o103, i49.layoutBox, e115) && n72((s60) => {
      const o104 = a60 ? i49.measuredBox[s60] : i49.layoutBox[s60], r108 = n70(e115[s60]);
      o104.max = o104.min + r108, t123.relativeTarget && !t123.currentAnimation && (t123.isProjectionDirty = true, t123.relativeTarget[s60].max = t123.relativeTarget[s60].min + r108);
    });
    const r107 = n71();
    a52(r107, e115, i49.layoutBox);
    const n83 = n71();
    a60 ? a52(n83, t123.applyTransform(s59, true), i49.measuredBox) : a52(n83, e115, i49.layoutBox);
    const h16 = !r101(r107);
    let l40 = false;
    if (!t123.resumeFrom) {
      const s60 = t123.getClosestProjectingParent();
      if (s60 && !s60.resumeFrom) {
        const { snapshot: o104, layout: a61 } = s60;
        if (o104 && a61) {
          const r108 = o93();
          s53(r108, i49.layoutBox, o104.layoutBox);
          const n84 = o93();
          s53(n84, e115, a61.layoutBox), x11(r108, n84) || (l40 = true), s60.options.layoutRoot && (t123.relativeTarget = n84, t123.relativeTargetOrigin = r108, t123.relativeParent = s60);
        }
      }
    }
    t123.notifyListeners("didUpdate", { layout: e115, snapshot: i49, delta: n83, layoutDelta: r107, hasLayoutChanged: h16, hasRelativeTargetChanged: l40 });
  } else if (t123.isLead()) {
    const { onExitComplete: e115 } = t123.options;
    e115 && e115();
  }
  t123.options.transition = void 0;
}
function X(t123) {
  z2.totalNodes++, t123.parent && (t123.isProjecting() || (t123.isProjectionDirty = t123.parent.isProjectionDirty), t123.isSharedProjectionDirty || (t123.isSharedProjectionDirty = Boolean(t123.isProjectionDirty || t123.parent.isProjectionDirty || t123.parent.isSharedProjectionDirty)), t123.isTransformDirty || (t123.isTransformDirty = t123.parent.isTransformDirty));
}
function Y(t123) {
  t123.isProjectionDirty = t123.isSharedProjectionDirty = t123.isTransformDirty = false;
}
function Z(t123) {
  t123.clearSnapshot();
}
function $(t123) {
  t123.clearMeasurements();
}
function q2(t123) {
  t123.isLayoutDirty = false;
}
function J(t123) {
  const { visualElement: e114 } = t123.options;
  e114 && e114.getProps().onBeforeLayoutMeasure && e114.notify("BeforeLayoutMeasure"), t123.resetTransform();
}
function K(t123) {
  t123.finishAnimation(), t123.targetDelta = t123.relativeTarget = t123.target = void 0, t123.isProjectionDirty = true;
}
function Q(t123) {
  t123.resolveTargetDelta();
}
function _(t123) {
  t123.calcProjection();
}
function tt(t123) {
  t123.resetRotation();
}
function et(t123) {
  t123.removeLeadSnapshot();
}
function it(t123, e114, i49) {
  t123.translate = o82(e114.translate, 0, i49), t123.scale = o82(e114.scale, 1, i49), t123.origin = e114.origin, t123.originPoint = e114.originPoint;
}
function st(t123, e114, i49, s59) {
  t123.min = o82(e114.min, i49.min, s59), t123.max = o82(e114.max, i49.max, s59);
}
function ot(t123, e114, i49, s59) {
  st(t123.x, e114.x, i49.x, s59), st(t123.y, e114.y, i49.y, s59);
}
function at(t123) {
  return t123.animationValues && void 0 !== t123.animationValues.opacityExit;
}
var rt = { duration: 0.45, ease: [0.4, 0, 0.1, 1] };
function nt(t123) {
  t123.min = Math.round(t123.min), t123.max = Math.round(t123.max);
}
function ht(t123, e114, i49) {
  return "position" === t123 || "preserve-aspect" === t123 && !t107(m51(e114), m51(i49), 0.2);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.js
var t118 = H({ attachResizeListener: (e114, t123) => e77(e114, "resize", t123), measureScroll: () => ({ x: document.documentElement.scrollLeft || document.body.scrollLeft, y: document.documentElement.scrollTop || document.body.scrollTop }), checkIsScrollRoot: () => true });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.js
var r103 = { current: void 0 };
var t119 = H({ measureScroll: (o103) => ({ x: o103.scrollLeft, y: o103.scrollTop }), defaultParent: () => {
  if (!r103.current) {
    const o103 = new t118({});
    o103.mount(window), o103.setOptions({ layoutScroll: true }), r103.current = o103;
  }
  return r103.current;
}, resetTransform: (o103, e114) => {
  o103.style.transform = void 0 !== e114 ? e114 : "none";
}, checkIsScrollRoot: (o103) => Boolean("fixed" === window.getComputedStyle(o103).position) });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/drag.js
var a57 = { pan: { Feature: i45 }, drag: { Feature: r96, ProjectionNode: t119, MeasureLayout: u24 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
var r104 = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function e107(t123) {
  const n83 = r104.exec(t123);
  if (!n83)
    return [,];
  const [, e114, o103] = n83;
  return [e114, o103];
}
var o100 = 4;
function i46(r107, c55, s59 = 1) {
  r53(s59 <= o100, `Max CSS variable fallback depth detected in property "${r107}". This may indicate a circular fallback dependency.`);
  const [a60, u29] = e107(r107);
  if (!a60)
    return;
  const f19 = window.getComputedStyle(c55).getPropertyValue(a60);
  return f19 ? f19.trim() : r63(u29) ? i46(u29, c55, s59 + 1) : u29;
}
function c51(t123, { ...r107 }, e114) {
  const o103 = t123.current;
  if (!(o103 instanceof Element))
    return { target: r107, transitionEnd: e114 };
  e114 && (e114 = { ...e114 }), t123.values.forEach((t124) => {
    const r108 = t124.get();
    if (!r63(r108))
      return;
    const e115 = i46(r108, o103);
    e115 && t124.set(e115);
  });
  for (const t124 in r107) {
    const c55 = r107[t124];
    if (!r63(c55))
      continue;
    const s59 = i46(c55, o103);
    s59 && (r107[t124] = s59, e114 || (e114 = {}), void 0 === e114[t124] && (e114[t124] = c55));
  }
  return { target: r107, transitionEnd: e114 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
var i47 = /* @__PURE__ */ new Set(["width", "height", "top", "left", "right", "bottom", "x", "y", "translateX", "translateY"]);
var l38 = (t123) => i47.has(t123);
var m52 = (t123) => t123 === r64 || t123 === a37;
var p28 = (t123, e114) => parseFloat(t123.split(", ")[e114]);
var f15 = (t123, e114) => (r107, { transform: s59 }) => {
  if ("none" === s59 || !s59)
    return 0;
  const o103 = s59.match(/^matrix3d\((.+)\)$/);
  if (o103)
    return p28(o103[1], e114);
  {
    const e115 = s59.match(/^matrix\((.+)\)$/);
    return e115 ? p28(e115[1], t123) : 0;
  }
};
var u26 = /* @__PURE__ */ new Set(["x", "y", "z"]);
var c52 = e70.filter((t123) => !u26.has(t123));
var h15 = { width: ({ x: t123 }, { paddingLeft: e114 = "0", paddingRight: r107 = "0" }) => t123.max - t123.min - parseFloat(e114) - parseFloat(r107), height: ({ y: t123 }, { paddingTop: e114 = "0", paddingBottom: r107 = "0" }) => t123.max - t123.min - parseFloat(e114) - parseFloat(r107), top: (t123, { top: e114 }) => parseFloat(e114), left: (t123, { left: e114 }) => parseFloat(e114), bottom: ({ y: t123 }, { top: e114 }) => parseFloat(e114) + (t123.max - t123.min), right: ({ x: t123 }, { left: e114 }) => parseFloat(e114) + (t123.max - t123.min), x: f15(4, 13), y: f15(5, 14) };
var d30 = (r107, a60, i49 = {}, p31 = {}) => {
  a60 = { ...a60 }, p31 = { ...p31 };
  const f19 = Object.keys(a60).filter(l38);
  let u29 = [], d33 = false;
  const g17 = [];
  if (f19.forEach((o103) => {
    const l40 = r107.getValue(o103);
    if (!r107.hasValue(o103))
      return;
    let f20 = i49[o103], h16 = u19(f20);
    const y6 = a60[o103];
    let x12;
    if (r71(y6)) {
      const t123 = y6.length, r108 = null === y6[0] ? 1 : 0;
      f20 = y6[r108], h16 = u19(f20);
      for (let o104 = r108; o104 < t123 && null !== y6[o104]; o104++)
        x12 ? r53(u19(y6[o104]) === x12, "All keyframes must be of the same type") : (x12 = u19(y6[o104]), r53(x12 === h16 || m52(h16) && m52(x12), "Keyframes must be of the same dimension as the current value"));
    } else
      x12 = u19(y6);
    if (h16 !== x12)
      if (m52(h16) && m52(x12)) {
        const t123 = l40.get();
        "string" == typeof t123 && l40.set(parseFloat(t123)), "string" == typeof y6 ? a60[o103] = parseFloat(y6) : Array.isArray(y6) && x12 === a37 && (a60[o103] = y6.map(parseFloat));
      } else
        (null == h16 ? void 0 : h16.transform) && (null == x12 ? void 0 : x12.transform) && (0 === f20 || 0 === y6) ? 0 === f20 ? l40.set(x12.transform(f20)) : a60[o103] = h16.transform(y6) : (d33 || (u29 = function(t123) {
          const e114 = [];
          return c52.forEach((r108) => {
            const s59 = t123.getValue(r108);
            void 0 !== s59 && (e114.push([r108, s59.get()]), s59.set(r108.startsWith("scale") ? 1 : 0));
          }), e114.length && t123.render(), e114;
        }(r107), d33 = true), g17.push(o103), p31[o103] = void 0 !== p31[o103] ? p31[o103] : a60[o103], l40.jump(y6));
  }), g17.length) {
    const t123 = g17.indexOf("height") >= 0 ? window.pageYOffset : null, e114 = ((t124, e115, r108) => {
      const s59 = e115.measureViewportBox(), o103 = e115.current, a61 = getComputedStyle(o103), { display: n83 } = a61, i50 = {};
      "none" === n83 && e115.setStaticValue("display", t124.display || "block"), r108.forEach((t125) => {
        i50[t125] = h15[t125](s59, a61);
      }), e115.render();
      const l40 = e115.measureViewportBox();
      return r108.forEach((r109) => {
        const s60 = e115.getValue(r109);
        s60 && s60.jump(i50[r109]), t124[r109] = h15[r109](l40, a61);
      }), t124;
    })(a60, r107, g17);
    return u29.length && u29.forEach(([t124, e115]) => {
      r107.getValue(t124).set(e115);
    }), r107.render(), e60 && null !== t123 && window.scrollTo({ top: t123 }), { target: e114, transitionEnd: p31 };
  }
  return { target: a60, transitionEnd: p31 };
};
function g13(t123, e114, r107, s59) {
  return ((t124) => Object.keys(t124).some(l38))(e114) ? d30(t123, e114, r107, s59) : { target: e114, transitionEnd: s59 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
var n78 = (n83, t123, s59, i49) => {
  const e114 = c51(n83, t123, i49);
  return t123 = e114.target, i49 = e114.transitionEnd, g13(n83, t123, s59, i49);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/reduced-motion/state.js
var r105 = { current: null };
var n79 = { current: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/reduced-motion/index.js
function i48() {
  if (n79.current = true, e60)
    if (window.matchMedia) {
      const e114 = window.matchMedia("(prefers-reduced-motion)"), r107 = () => r105.current = e114.matches;
      e114.addListener(r107), r107();
    } else
      r105.current = false;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/motion-values.js
function n80(n83, s59, a60) {
  const { willChange: r107 } = s59;
  for (const l40 in s59) {
    const m56 = s59[l40], u29 = a60[l40];
    if (o64(m56))
      n83.addValue(l40, m56), t100(r107) && r107.add(l40), o89("10.12.17" === m56.version, `Attempting to mix Framer Motion versions ${m56.version} with 10.12.17 may not work as expected.`);
    else if (o64(u29))
      n83.addValue(l40, h14(m56, { owner: n83 })), t100(r107) && r107.remove(l40);
    else if (u29 !== m56)
      if (n83.hasValue(l40)) {
        const e114 = n83.getValue(l40);
        !e114.hasAnimated && e114.set(m56);
      } else {
        const e114 = n83.getStaticValue(l40);
        n83.addValue(l40, h14(void 0 !== e114 ? e114 : m56, { owner: n83 }));
      }
  }
  for (const e114 in a60)
    void 0 === s59[e114] && n83.removeValue(e114);
  return s59;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/store.js
var e108 = /* @__PURE__ */ new WeakMap();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/VisualElement.js
var b8 = Object.keys(o60);
var S = b8.length;
var T = ["AnimationStart", "AnimationComplete", "Update", "BeforeLayoutMeasure", "LayoutMeasure", "LayoutAnimationStart", "LayoutAnimationComplete"];
var w6 = e66.length;
var P2 = class {
  constructor({ parent: e114, props: s59, presenceContext: i49, reducedMotionConfig: r107, visualState: o103 }, n83 = {}) {
    this.current = null, this.children = /* @__PURE__ */ new Set(), this.isVariantNode = false, this.isControllingVariants = false, this.shouldReduceMotion = null, this.values = /* @__PURE__ */ new Map(), this.features = {}, this.valueSubscriptions = /* @__PURE__ */ new Map(), this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = () => this.notify("Update", this.latestValues), this.render = () => {
      this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));
    }, this.scheduleRender = () => c36.render(this.render, false, true);
    const { latestValues: a60, renderState: h16 } = o103;
    this.latestValues = a60, this.baseTarget = { ...a60 }, this.initialValues = s59.initial ? { ...a60 } : {}, this.renderState = h16, this.parent = e114, this.props = s59, this.presenceContext = i49, this.depth = e114 ? e114.depth + 1 : 0, this.reducedMotionConfig = r107, this.options = n83, this.isControllingVariants = r58(s59), this.isVariantNode = t64(s59), this.isVariantNode && (this.variantChildren = /* @__PURE__ */ new Set()), this.manuallyAnimateOnMount = Boolean(e114 && e114.current);
    const { willChange: u29, ...l40 } = this.scrapeMotionValuesFromProps(s59, {});
    for (const t123 in l40) {
      const e115 = l40[t123];
      void 0 !== a60[t123] && o64(e115) && (e115.set(a60[t123], false), t100(u29) && u29.add(t123));
    }
  }
  scrapeMotionValuesFromProps(t123, e114) {
    return {};
  }
  mount(t123) {
    this.current = t123, e108.set(t123, this), this.projection && !this.projection.instance && this.projection.mount(t123), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((t124, e114) => this.bindToMotionValue(e114, t124)), n79.current || i48(), this.shouldReduceMotion = "never" !== this.reducedMotionConfig && ("always" === this.reducedMotionConfig || r105.current), o89(true !== this.shouldReduceMotion, "You have Reduced Motion enabled on your device. Animations may not appear as expected."), this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);
  }
  unmount() {
    e108.delete(this.current), this.projection && this.projection.unmount(), m33(this.notifyUpdate), m33(this.render), this.valueSubscriptions.forEach((t123) => t123()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);
    for (const t123 in this.events)
      this.events[t123].clear();
    for (const t123 in this.features)
      this.features[t123].unmount();
    this.current = null;
  }
  bindToMotionValue(e114, s59) {
    const i49 = t69.has(e114), r107 = s59.on("change", (s60) => {
      this.latestValues[e114] = s60, this.props.onUpdate && c36.update(this.notifyUpdate, false, true), i49 && this.projection && (this.projection.isTransformDirty = true);
    }), o103 = s59.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(e114, () => {
      r107(), o103();
    });
  }
  sortNodePosition(t123) {
    return this.current && this.sortInstanceNodePosition && this.type === t123.type ? this.sortInstanceNodePosition(this.current, t123.current) : 0;
  }
  loadFeatures({ children: t123, ...e114 }, r107, n83, a60) {
    let h16, u29;
    if (n83 && r107) {
      const t124 = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      e114.ignoreStrict ? e63(false, t124) : r53(false, t124);
    }
    for (let t124 = 0; t124 < S; t124++) {
      const s59 = b8[t124], { isEnabled: i49, Feature: r108, ProjectionNode: o103, MeasureLayout: n84 } = o60[s59];
      o103 && (h16 = o103), i49(e114) && (!this.features[s59] && r108 && (this.features[s59] = new r108(this)), n84 && (u29 = n84));
    }
    if (!this.projection && h16) {
      this.projection = new h16(this.latestValues, this.parent && this.parent.projection);
      const { layoutId: t124, layout: s59, drag: i49, dragConstraints: r108, layoutScroll: n84, layoutRoot: u30 } = e114;
      this.projection.setOptions({ layoutId: t124, layout: s59, alwaysMeasureLayout: Boolean(i49) || r108 && t61(r108), visualElement: this, scheduleRender: () => this.scheduleRender(), animationType: "string" == typeof s59 ? s59 : "both", initialPromotionConfig: a60, layoutScroll: n84, layoutRoot: u30 });
    }
    return u29;
  }
  updateFeatures() {
    for (const t123 in this.features) {
      const e114 = this.features[t123];
      e114.isMounted ? e114.update() : (e114.mount(), e114.isMounted = true);
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : o93();
  }
  getStaticValue(t123) {
    return this.latestValues[t123];
  }
  setStaticValue(t123, e114) {
    this.latestValues[t123] = e114;
  }
  makeTargetAnimatable(t123, e114 = true) {
    return this.makeTargetAnimatableFromInstance(t123, this.props, e114);
  }
  update(t123, e114) {
    (t123.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = t123, this.prevPresenceContext = this.presenceContext, this.presenceContext = e114;
    for (let e115 = 0; e115 < T.length; e115++) {
      const s59 = T[e115];
      this.propEventSubscriptions[s59] && (this.propEventSubscriptions[s59](), delete this.propEventSubscriptions[s59]);
      const i49 = t123["on" + s59];
      i49 && (this.propEventSubscriptions[s59] = this.on(s59, i49));
    }
    this.prevMotionValues = n80(this, this.scrapeMotionValuesFromProps(t123, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();
  }
  getProps() {
    return this.props;
  }
  getVariant(t123) {
    return this.props.variants ? this.props.variants[t123] : void 0;
  }
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(t123 = false) {
    if (t123)
      return this.parent ? this.parent.getVariantContext() : void 0;
    if (!this.isControllingVariants) {
      const t124 = this.parent && this.parent.getVariantContext() || {};
      return void 0 !== this.props.initial && (t124.initial = this.props.initial), t124;
    }
    const e114 = {};
    for (let t124 = 0; t124 < w6; t124++) {
      const s59 = e66[t124], i49 = this.props[s59];
      (r57(i49) || false === i49) && (e114[s59] = i49);
    }
    return e114;
  }
  addVariantChild(t123) {
    const e114 = this.getClosestVariantNode();
    if (e114)
      return e114.variantChildren && e114.variantChildren.add(t123), () => e114.variantChildren.delete(t123);
  }
  addValue(t123, e114) {
    e114 !== this.values.get(t123) && (this.removeValue(t123), this.bindToMotionValue(t123, e114)), this.values.set(t123, e114), this.latestValues[t123] = e114.get();
  }
  removeValue(t123) {
    this.values.delete(t123);
    const e114 = this.valueSubscriptions.get(t123);
    e114 && (e114(), this.valueSubscriptions.delete(t123)), delete this.latestValues[t123], this.removeValueFromRenderState(t123, this.renderState);
  }
  hasValue(t123) {
    return this.values.has(t123);
  }
  getValue(t123, e114) {
    if (this.props.values && this.props.values[t123])
      return this.props.values[t123];
    let s59 = this.values.get(t123);
    return void 0 === s59 && void 0 !== e114 && (s59 = h14(e114, { owner: this }), this.addValue(t123, s59)), s59;
  }
  readValue(t123) {
    return void 0 === this.latestValues[t123] && this.current ? this.readValueFromInstance(this.current, t123, this.options) : this.latestValues[t123];
  }
  setBaseTarget(t123, e114) {
    this.baseTarget[t123] = e114;
  }
  getBaseTarget(t123) {
    var e114;
    const { initial: s59 } = this.props, i49 = "string" == typeof s59 || "object" == typeof s59 ? null === (e114 = t80(this.props, s59)) || void 0 === e114 ? void 0 : e114[t123] : void 0;
    if (s59 && void 0 !== i49)
      return i49;
    const r107 = this.getBaseTargetFromProps(this.props, t123);
    return void 0 === r107 || o64(r107) ? void 0 !== this.initialValues[t123] && void 0 === i49 ? void 0 : this.baseTarget[t123] : r107;
  }
  on(t123, e114) {
    return this.events[t123] || (this.events[t123] = new i42()), this.events[t123].add(e114);
  }
  notify(t123, ...e114) {
    this.events[t123] && this.events[t123].notify(...e114);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.js
var n81 = class extends P2 {
  sortInstanceNodePosition(t123, e114) {
    return 2 & t123.compareDocumentPosition(e114) ? 1 : -1;
  }
  getBaseTargetFromProps(t123, e114) {
    return t123.style ? t123.style[e114] : void 0;
  }
  removeValueFromRenderState(t123, { vars: e114, style: r107 }) {
    delete e114[t123], delete r107[t123];
  }
  makeTargetAnimatableFromInstance({ transition: s59, transitionEnd: n83, ...o103 }, { transformValues: i49 }, a60) {
    let m56 = c44(o103, s59 || {}, this);
    if (i49 && (n83 && (n83 = i49(n83)), o103 && (o103 = i49(o103)), m56 && (m56 = i49(m56))), a60) {
      m44(this, o103, m56);
      const t123 = n78(this, o103, m56, n83);
      n83 = t123.transitionEnd, o103 = t123.target;
    }
    return { transition: s59, transitionEnd: n83, ...o103 };
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.js
function m53(t123) {
  return window.getComputedStyle(t123);
}
var a58 = class extends n81 {
  readValueFromInstance(t123, s59) {
    if (t69.has(s59)) {
      const t124 = t98(s59);
      return t124 && t124.default || 0;
    }
    {
      const e114 = m53(t123), o103 = (t70(s59) ? e114.getPropertyValue(s59) : e114[s59]) || 0;
      return "string" == typeof o103 ? o103.trim() : o103;
    }
  }
  measureInstanceViewportBox(t123, { transformPagePoint: r107 }) {
    return r95(t123, r107);
  }
  build(r107, e114, s59, o103) {
    i28(r107, e114, s59, o103.transformTemplate);
  }
  scrapeMotionValuesFromProps(t123, r107) {
    return i32(t123, r107);
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    const { children: t123 } = this.props;
    o64(t123) && (this.childSubscription = t123.on("change", (t124) => {
      this.current && (this.current.textContent = `${t124}`);
    }));
  }
  renderInstance(t123, r107, e114, s59) {
    t79(t123, r107, e114, s59);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.js
var l39 = class extends n81 {
  constructor() {
    super(...arguments), this.isSVGTag = false;
  }
  getBaseTargetFromProps(t123, r107) {
    return t123[r107];
  }
  readValueFromInstance(t123, r107) {
    if (t69.has(r107)) {
      const t124 = t98(r107);
      return t124 && t124.default || 0;
    }
    return r107 = e74.has(r107) ? r107 : e73(r107), t123.getAttribute(r107);
  }
  measureInstanceViewportBox() {
    return o93();
  }
  scrapeMotionValuesFromProps(r107, s59) {
    return s43(r107, s59);
  }
  build(t123, r107, e114, o103) {
    i31(t123, r107, e114, this.isSVGTag, o103.transformTemplate);
  }
  renderInstance(t123, r107, s59, e114) {
    s42(t123, r107, s59, e114);
  }
  mount(t123) {
    this.isSVGTag = o70(t123.tagName), super.mount(t123);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
var t120 = (t123, n83) => t67(t123) ? new l39(n83, { enableHardwareAcceleration: false }) : new a58(n83, { enableHardwareAcceleration: true });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout.js
var t121 = { layout: { ProjectionNode: t119, MeasureLayout: u24 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/motion.js
var f16 = { ...o90, ...t88, ...a57, ...t121 };
var a59 = e68((o103, r107) => n52(o103, r107, f16, t120));

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var f17 = { max: 5, position: "top-right" };
var g14 = (0, import_react112.forwardRef)((m56, g17) => {
  const j9 = q("Toast"), [y6, x12] = (0, import_react112.useReducer)(e58, []), h16 = Object.assign(Object.assign({}, f17), m56), { className: b9 = "", max: E, position: L } = h16, O6 = __rest(h16, ["className", "max", "position"]), N2 = t15(m56.id), T2 = (t123) => {
    x12({ type: a33.add, payload: t123.detail, max: E });
  }, P3 = (t123) => {
    x12({ type: a33.update, payload: t123.detail });
  }, _2 = (t123) => {
    x12({ type: a33.remove, payload: t123.detail });
  }, w9 = () => {
    x12({ type: a33.clear, payload: {} });
  };
  (0, import_react112.useEffect)(() => (document.addEventListener("toasts:add", T2), document.addEventListener("toasts:update", P3), document.addEventListener("toasts:remove", _2), document.addEventListener("toasts:clear", w9), () => {
    document.removeEventListener("toasts:add", T2), document.removeEventListener("toasts:update", P3), document.removeEventListener("toasts:remove", _2), document.removeEventListener("toasts:clear", w9);
  }));
  const A2 = (0, import_react112.useMemo)(() => twMerge(j9.container({ className: b9, position: L })), [b9, L, j9]);
  return (0, import_jsx_runtime75.jsx)(FloatingPortal, { children: (0, import_jsx_runtime75.jsx)("div", Object.assign({ ref: g17, id: N2, className: A2 }, O6, { children: (0, import_jsx_runtime75.jsx)(d24, Object.assign({ initial: false }, { children: y6.map((t123) => (0, import_jsx_runtime75.jsx)(a59.div, Object.assign({ layout: true, initial: { opacity: 0, x: "top-right" === L || "bottom-right" === L ? "100%" : "-100%", scale: 0.85 }, animate: { opacity: 1, x: 0, scale: 1 }, exit: { opacity: 0, x: "top-right" === L || "bottom-right" === L ? "100%" : "-100%", scale: 0.85, transition: { duration: 0.2 } } }, { children: (0, import_jsx_runtime75.jsx)(v3, Object.assign({}, t123)) }), t123.id)) })) })) });
});
g14.displayName = "ToastContainer";

// node_modules/@rewind-ui/core/dist/components/Tooltip/Tooltip.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tooltip/use-tooltip.hook.js
var import_react114 = __toESM(require_react());
function y5({ initiallyOpen: y6 = false, offset: v7 = 5, placement: x12 = "top" }) {
  var P3, h16;
  const R2 = (0, import_react114.useRef)(null), [F2, C3] = (0, import_react114.useState)(y6), { x: D, y: O6, refs: j9, strategy: E, context: M3 } = useFloating2({ open: F2, onOpenChange: C3, placement: x12, middleware: [offset(v7), shift(), inline(), flip(), arrow2({ element: R2 })], whileElementsMounted: autoUpdate }), { getReferenceProps: S2, getFloatingProps: X2 } = useInteractions([useHover(M3, { move: false, handleClose: safePolygon() }), useFocus(M3), useDismiss(M3, { referencePress: true }), useRole(M3, { role: "tooltip" })]), Y2 = (null === (P3 = M3.middlewareData.arrow) || void 0 === P3 ? void 0 : P3.x) || 0, b9 = (null === (h16 = M3.middlewareData.arrow) || void 0 === h16 ? void 0 : h16.y) || 0, k4 = o29({ side: M3.placement });
  return (0, import_react114.useMemo)(() => ({ arrowRef: R2, arrowSide: k4, arrowX: Y2, arrowY: b9, context: M3, floating: j9.setFloating, getFloatingProps: X2(), getReferenceProps: S2(), open: F2, reference: j9.setReference, strategy: E, x: D, y: O6 }), [k4, Y2, b9, M3, j9, X2, S2, F2, E, D, O6]);
}

// node_modules/@rewind-ui/core/dist/components/Tooltip/Tooltip.js
var import_react116 = __toESM(require_react());
var g16 = { color: "dark", initiallyOpen: false, offset: 6, placement: "top", radius: "md", shadow: "none", size: "sm", tone: "solid", withinPortal: true };
var w8 = (0, import_react116.forwardRef)((c55, w9) => {
  const b9 = q("Tooltip"), { tone: j9, children: y6, className: O6 = "", color: x12, initiallyOpen: N2, label: P3, offset: T2, placement: v7, radius: z3, shadow: k4, size: R2, withinPortal: S2 } = Object.assign(Object.assign({}, g16), c55), F2 = t15(c55.id), [I, q3] = (0, import_react116.useState)(!N2), [A2, B] = (0, import_react116.useState)(null), { arrowRef: C3, arrowSide: D, context: E, floating: G3, getFloatingProps: H2, getReferenceProps: J2, open: K2, reference: L, strategy: M3, x: Q2, y: U } = y5({ initiallyOpen: N2, offset: T2, placement: v7 });
  (0, import_react116.useEffect)(() => {
    A2 && clearTimeout(A2), B(setTimeout(() => q3(!K2), K2 ? 0 : 75));
  }, [K2]);
  const V = import_react116.Children.only(y6), W2 = useMergeRefs([L, w9 || null]), X2 = (0, import_react116.useMemo)(() => twMerge(b9.base({ tone: j9, arrowSide: D, className: O6, color: x12, open: K2, radius: z3, shadow: k4, size: R2 })), [j9, D, O6, x12, K2, z3, k4, R2, b9]), Y2 = !I && (0, import_jsx_runtime76.jsxs)("div", Object.assign({ id: F2, ref: G3, className: X2, role: "dialog", "aria-modal": "true", "aria-hidden": !K2, style: { position: M3, top: null != U ? U : 0, left: null != Q2 ? Q2 : 0, visibility: null == Q2 ? "hidden" : "visible" } }, H2, { children: [(0, import_jsx_runtime76.jsx)(FloatingArrow, { className: b9.arrow({ tone: j9, color: x12 }), ref: C3, width: 8, height: 4, context: E }), P3] })), Z2 = (0, import_react116.cloneElement)(V, Object.assign(Object.assign({ ref: W2 }, V.props), J2));
  return (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [S2 ? (0, import_jsx_runtime76.jsx)(FloatingPortal, { children: Y2 }) : Y2, Z2] });
});
w8.displayName = "Tooltip";

// node_modules/@rewind-ui/core/dist/utils/toSlug.js
function e111(e114) {
  let r107 = e114;
  return r107 ? (r107 = r107.toLowerCase().trim(), r107 = r107.replace(/ & /g, " and "), r107 = r107.replace(/[ ]+/g, "-"), r107 = r107.replace(/[-]+/g, "-"), r107 = r107.replace(/[^a-z0-9-]+/g, ""), r107) : "";
}

// node_modules/@rewind-ui/core/dist/utils/useIsomorphicLayoutEffect.js
var import_react117 = __toESM(require_react());
var n82 = "undefined" == typeof window || "undefined" == typeof document ? import_react117.useLayoutEffect : import_react117.useEffect;

// node_modules/@rewind-ui/core/dist/utils/usePrevious.js
var r106 = __toESM(require_react());
function e113(e114) {
  const t123 = r106.useRef(e114);
  return r106.useEffect(() => {
    t123.current = e114;
  }, [e114]), t123.current;
}
export {
  p3 as Accordion,
  w as Alert,
  c8 as Avatar,
  m6 as Badge,
  u4 as Button,
  b as Card,
  o23 as Checkbox,
  r2 as Collapse,
  k2 as Combobox,
  O3 as Drawer,
  w4 as Dropdown,
  x4 as FormControl,
  d8 as Image,
  g8 as Input,
  g9 as InputGroup,
  j6 as Modal,
  m11 as Overlay,
  m21 as Popover,
  c26 as Progress,
  c27 as Radio,
  d20 as RadioGroup,
  m22 as Ribbon,
  h7 as Select,
  g11 as Selector,
  a14 as Spinner,
  f7 as Switch,
  b3 as Table,
  b4 as Tabs,
  c35 as Text,
  l20 as Textarea,
  G as ThemeProvider,
  v3 as Toast,
  g14 as ToastContainer,
  w8 as Tooltip,
  p2 as VariantProvider,
  e111 as toSlug,
  q as useComponentTheme,
  d5 as useComponentVariant,
  n82 as useIsomorphicLayoutEffect,
  e113 as usePrevious,
  t15 as usePropId,
  M as useTheme,
  t51 as useToast,
  f as useVariant
};
/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@rewind-ui_core.js.map
