import{warning as t}from"../../../utils/errors.js";import{clamp as o}from"../../../utils/clamp.js";import{secondsToMilliseconds as r,millisecondsToSeconds as n}from"../../../utils/time-conversion.js";const s=.001,e=.01,i=10,a=.05,u=1;function p({duration:p=800,bounce:m=.25,velocity:h=0,mass:l=1}){let M,d;t(p<=r(i),"Spring duration must be 10 seconds or less");let x=1-m;x=o(a,u,x),p=o(e,i,n(p)),x<1?(M=t=>{const o=t*x,r=o*p,n=o-h,e=f(t,x),i=Math.exp(-r);return s-n/e*i},d=t=>{const o=t*x*p,r=o*h+h,n=Math.pow(x,2)*Math.pow(t,2)*p,e=Math.exp(-o),i=f(Math.pow(t,2),x);return(-M(t)+s>0?-1:1)*((r-n)*e)/i}):(M=t=>Math.exp(-t*p)*((t-h)*p+1)-.001,d=t=>Math.exp(-t*p)*(p*p*(h-t)));const w=function(t,o,r){let n=r;for(let r=1;r<c;r++)n-=t(n)/o(n);return n}(M,d,5/p);if(p=r(p),isNaN(w))return{stiffness:100,damping:10,duration:p};{const t=Math.pow(w,2)*l;return{stiffness:t,damping:2*x*Math.sqrt(l*t),duration:p}}}const c=12;function f(t,o){return t*Math.sqrt(1-o*o)}export{f as calcAngularFreq,p as findSpring,u as maxDamping,i as maxDuration,a as minDamping,e as minDuration};
