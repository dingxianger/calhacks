import{useMemo as t}from"react";import{isForcedMotionValue as e}from"../../motion/utils/is-forced-motion-value.js";import{isMotionValue as r}from"../../value/utils/is-motion-value.js";import{buildHTMLStyles as o}from"./utils/build-styles.js";import{createHtmlRenderState as n}from"./utils/create-render-state.js";function a(t,o,n){for(const a in o)r(o[a])||e(a,n)||(t[a]=o[a])}function s(e,r,s){const i={};return a(i,e.style||{},e),Object.assign(i,function({transformTemplate:e},r,a){return t((()=>{const t=n();return o(t,r,{enableHardwareAcceleration:!a},e),Object.assign({},t.vars,t.style)}),[r])}(e,r,s)),e.transformValues?e.transformValues(i):i}function i(t,e,r){const o={},n=s(t,e,r);return t.drag&&!1!==t.dragListener&&(o.draggable=!1,n.userSelect=n.WebkitUserSelect=n.WebkitTouchCallout="none",n.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),void 0===t.tabIndex&&(t.onTap||t.onTapStart||t.whileTap)&&(o.tabIndex=0),o.style=n,o}export{a as copyRawValuesOnly,i as useHTMLProps};
