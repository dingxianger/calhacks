import{warning as t}from"../../utils/errors.js";import{secondsToMilliseconds as e}from"../../utils/time-conversion.js";import{instantAnimationState as o}from"../../utils/use-instant-transition-state.js";import{createAcceleratedAnimation as a}from"../animators/waapi/create-accelerated-animation.js";import{createInstantAnimation as r}from"../animators/instant.js";import{getDefaultTransition as i}from"../utils/default-transitions.js";import{isAnimatable as n}from"../utils/is-animatable.js";import{getKeyframes as s}from"../utils/keyframes.js";import{getValueTransition as m,isTransitionDefined as l}from"../utils/transitions.js";import{animateValue as p}from"../animators/js/index.js";const u=(u,f,d,y={})=>c=>{const j=m(y,u)||{},$=j.delay||y.delay||0;let{elapsed:v=0}=y;v-=e($);const b=s(f,u,d,j),g=b[0],w=b[b.length-1],U=n(u,g),h=n(u,w);t(U===h,`You are trying to animate ${u} from "${g}" to "${w}". ${g} is not an animatable value - to enable this animation set ${g} to a value animatable to ${w} via the \`style\` property.`);let C={keyframes:b,velocity:f.getVelocity(),ease:"easeOut",...j,delay:-v,onUpdate:t=>{f.set(t),j.onUpdate&&j.onUpdate(t)},onComplete:()=>{c(),j.onComplete&&j.onComplete()}};if(l(j)||(C={...C,...i(u,C)}),C.duration&&(C.duration=e(C.duration)),C.repeatDelay&&(C.repeatDelay=e(C.repeatDelay)),!U||!h||o.current||!1===j.type)return r(C);if(f.owner&&f.owner.current instanceof HTMLElement&&!f.owner.getProps().onUpdate){const t=a(f,u,C);if(t)return t}return p(C)};export{u as animateMotionValue};
