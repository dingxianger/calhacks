import{useContext as t}from"react";import{isAnimationControls as o}from"../../animation/utils/is-animation-controls.js";import{PresenceContext as n}from"../../context/PresenceContext.js";import{resolveVariantFromProps as r}from"../../render/utils/resolve-variants.js";import{useConstant as i}from"../../utils/use-constant.js";import{resolveMotionValue as e}from"../../value/utils/resolve-motion-value.js";import{MotionContext as s}from"../../context/MotionContext/index.js";import{isControllingVariants as a,isVariantNode as l}from"../../render/utils/is-controlling-variants.js";const c=o=>(r,e)=>{const a=t(s),l=t(n),c=()=>function({scrapeMotionValuesFromProps:t,createRenderState:o,onMount:n},r,i,e){const s={latestValues:m(r,i,e,t),renderState:o()};return n&&(s.mount=t=>n(r,t,s)),s}(o,r,a,l);return e?c():i(c)};function m(t,n,i,s){const c={},m=s(t,{});for(const t in m)c[t]=e(m[t]);let{initial:u,animate:f}=t;const p=a(t),d=l(t);n&&d&&!p&&!1!==t.inherit&&(void 0===u&&(u=n.initial),void 0===f&&(f=n.animate));let v=!!i&&!1===i.initial;v=v||!1===u;const j=v?f:u;if(j&&"boolean"!=typeof j&&!o(j)){(Array.isArray(j)?j:[j]).forEach((o=>{const n=r(t,o);if(!n)return;const{transitionEnd:i,transition:e,...s}=n;for(const t in s){let o=s[t];if(Array.isArray(o)){o=o[v?o.length-1:0]}null!==o&&(c[t]=o)}for(const t in i)c[t]=i[t]}))}return c}export{c as makeUseVisualState};
