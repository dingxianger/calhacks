import{isNumericalString as t}from"../../utils/is-numerical-string.js";import{isZeroValueString as e}from"../../utils/is-zero-value-string.js";import{resolveFinalValueInKeyframes as o}from"../../utils/resolve-value.js";import{motionValue as n}from"../../value/index.js";import{complex as r}from"../../value/types/complex/index.js";import{getAnimatableNone as i}from"../dom/value-types/animatable-none.js";import{findValueType as l}from"../dom/value-types/find.js";import{resolveVariant as s}from"./resolve-dynamic-variants.js";function a(t,e,o){t.hasValue(e)?t.getValue(e).set(o):t.addValue(e,n(o))}function u(t,e){const n=s(t,e);let{transitionEnd:r={},transition:i={},...l}=n?t.makeTargetAnimatable(n,!1):{};l={...l,...r};for(const e in l){a(t,e,o(l[e]))}}function m(o,s,a){var u,m;const f=Object.keys(s).filter((t=>!o.hasValue(t))),c=f.length;if(c)for(let d=0;d<c;d++){const c=f[d],p=s[c];let v=null;Array.isArray(p)&&(v=p[0]),null===v&&(v=null!==(m=null!==(u=a[c])&&void 0!==u?u:o.readValue(c))&&void 0!==m?m:s[c]),null!=v&&("string"==typeof v&&(t(v)||e(v))?v=parseFloat(v):!l(v)&&r.test(p)&&(v=i(c,p)),o.addValue(c,n(v,{owner:o})),void 0===a[c]&&(a[c]=v),null!==v&&o.setBaseTarget(c,v))}}function f(t,e){if(!e)return;return(e[t]||e.default||e).from}function c(t,e,o){const n={};for(const r in t){const t=f(r,e);if(void 0!==t)n[r]=t;else{const t=o.getValue(r);t&&(n[r]=t.get())}}return n}export{m as checkTargetForNewValues,c as getOrigin,f as getOriginFromTransition,u as setTarget};
