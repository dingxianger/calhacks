import{buildHTMLStyles as t}from"./utils/build-styles.js";import{isCSSVariableName as r}from"../dom/utils/is-css-variable.js";import{transformProps as e}from"./utils/transform.js";import{scrapeMotionValuesFromProps as s}from"./utils/scrape-motion-values.js";import{renderHTML as o}from"./utils/render.js";import{getDefaultValueType as i}from"../dom/value-types/defaults.js";import{measureViewportBox as n}from"../../projection/utils/measure.js";import{DOMVisualElement as u}from"../dom/DOMVisualElement.js";import{isMotionValue as l}from"../../value/utils/is-motion-value.js";function m(t){return window.getComputedStyle(t)}class a extends u{readValueFromInstance(t,s){if(e.has(s)){const t=i(s);return t&&t.default||0}{const e=m(t),o=(r(s)?e.getPropertyValue(s):e[s])||0;return"string"==typeof o?o.trim():o}}measureInstanceViewportBox(t,{transformPagePoint:r}){return n(t,r)}build(r,e,s,o){t(r,e,s,o.transformTemplate)}scrapeMotionValuesFromProps(t,r){return s(t,r)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:t}=this.props;l(t)&&(this.childSubscription=t.on("change",(t=>{this.current&&(this.current.textContent=`${t}`)})))}renderInstance(t,r,e,s){o(t,r,e,s)}}export{a as HTMLVisualElement,m as getComputedStyle};
