import{millisecondsToSeconds as t}from"../../../utils/time-conversion.js";import{calcGeneratorVelocity as s}from"../utils/velocity.js";import{findSpring as e,calcAngularFreq as n}from"./find.js";const o=["duration","bounce"],i=["stiffness","damping","mass"];function a(t,s){return s.some((s=>void 0!==t[s]))}function r({keyframes:r,restDelta:l,restSpeed:c,...u}){const m=r[0],f=r[r.length-1],h={done:!1,value:m},{stiffness:d,damping:M,mass:p,velocity:v,duration:x,isResolvedFromDuration:y}=function(t){let s={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...t};if(!a(t,i)&&a(t,o)){const n=e(t);s={...s,...n,velocity:0,mass:1},s.isResolvedFromDuration=!0}return s}(u),D=v?-t(v):0,b=M/(2*Math.sqrt(d*p)),g=f-m,j=t(Math.sqrt(d/p)),q=Math.abs(g)<5;let F;if(c||(c=q?.01:2),l||(l=q?.005:.5),b<1){const t=n(j,b);F=s=>{const e=Math.exp(-b*j*s);return f-e*((D+b*j*g)/t*Math.sin(t*s)+g*Math.cos(t*s))}}else if(1===b)F=t=>f-Math.exp(-j*t)*(g+(D+j*g)*t);else{const t=j*Math.sqrt(b*b-1);F=s=>{const e=Math.exp(-b*j*s),n=Math.min(t*s,300);return f-e*((D+b*j*g)*Math.sinh(n)+t*g*Math.cosh(n))/t}}return{calculatedDuration:y&&x||null,next:t=>{const e=F(t);if(y)h.done=t>=x;else{let n=D;0!==t&&(n=b<1?s(F,t,e):0);const o=Math.abs(n)<=c,i=Math.abs(f-e)<=l;h.done=o&&i}return h.value=h.done?f:e,h}}}export{r as spring};
