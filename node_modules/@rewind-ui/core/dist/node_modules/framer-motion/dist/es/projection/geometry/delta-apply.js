import{mix as t}from"../../utils/mix.js";import{hasTransform as n}from"../utils/has-transform.js";function o(t,n,o){return o+n*(t-o)}function i(t,n,i,s,e){return void 0!==e&&(t=o(t,e,s)),o(t,i,s)+n}function s(t,n=0,o=1,s,e){t.min=i(t.min,n,o,s,e),t.max=i(t.max,n,o,s,e)}function e(t,{x:n,y:o}){s(t.x,n.translate,n.scale,n.originPoint),s(t.y,o.translate,o.scale,o.originPoint)}function l(t,o,i,s=!1){const l=i.length;if(!l)return;let c,a;o.x=o.y=1;for(let r=0;r<l;r++){c=i[r],a=c.projectionDelta;const l=c.instance;l&&l.style&&"contents"===l.style.display||(s&&c.options.layoutScroll&&c.scroll&&c!==c.root&&x(t,{x:-c.scroll.offset.x,y:-c.scroll.offset.y}),a&&(o.x*=a.x.scale,o.y*=a.y.scale,e(t,a)),s&&n(c.latestValues)&&x(t,c.latestValues))}o.x=r(o.x),o.y=r(o.y)}function r(t){return Number.isInteger(t)||t>1.0000000000001||t<.999999999999?t:1}function c(t,n){t.min=t.min+n,t.max=t.max+n}function a(n,o,[i,e,l]){const r=void 0!==o[l]?o[l]:.5,c=t(n.min,n.max,r);s(n,o[i],o[e],c,o.scale)}const u=["x","scaleX","originX"],f=["y","scaleY","originY"];function x(t,n){a(t.x,n,u),a(t.y,n,f)}export{s as applyAxisDelta,e as applyBoxDelta,i as applyPointDelta,l as applyTreeDeltas,o as scalePoint,a as transformAxis,x as transformBox,c as translateAxis};
