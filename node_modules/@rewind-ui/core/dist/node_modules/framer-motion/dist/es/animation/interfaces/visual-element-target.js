import{frame as t}from"../../frameloop/index.js";import{transformProps as e}from"../../render/html/utils/transform.js";import{optimizedAppearDataAttribute as n}from"../optimized-appear/data-id.js";import{animateMotionValue as o}from"./motion-value.js";import{isWillChangeMotionValue as i}from"../../value/use-will-change/is.js";import{setTarget as a}from"../../render/utils/setters.js";function r({protectedKeys:t,needsAnimating:e},n){const o=t.hasOwnProperty(n)&&!0!==e[n];return e[n]=!1,o}function s(s,m,{delay:d=0,transitionOverride:p,type:l}={}){let{transition:f=s.getDefaultTransition(),transitionEnd:u,...c}=s.makeTargetAnimatable(m);const h=s.getValue("willChange");p&&(f=p);const g=[],w=l&&s.animationState&&s.animationState.getState()[l];for(const a in c){const m=s.getValue(a),p=c[a];if(!m||void 0===p||w&&r(w,a))continue;const l={delay:d,elapsed:0,...f};if(window.HandoffAppearAnimations&&!m.hasAnimated){const e=s.getProps()[n];e&&(l.elapsed=window.HandoffAppearAnimations(e,a,m,t))}m.start(o(a,m,p,s.shouldReduceMotion&&e.has(a)?{type:!1}:l));const u=m.animation;i(h)&&(h.add(a),u.then((()=>h.remove(a)))),g.push(u)}return u&&Promise.all(g).then((()=>{u&&a(s,u)})),g}export{s as animateTarget};
