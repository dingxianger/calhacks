import{frame as t,cancelFrame as e}from"../frameloop/index.js";import{warning as s,invariant as i}from"../utils/errors.js";import{createBox as r}from"../projection/geometry/models.js";import{isRefObject as o}from"../utils/is-ref-object.js";import{initPrefersReducedMotion as n}from"../utils/reduced-motion/index.js";import{hasReducedMotionListener as a,prefersReducedMotion as h}from"../utils/reduced-motion/state.js";import{SubscriptionManager as u}from"../utils/subscription-manager.js";import{motionValue as l}from"../value/index.js";import{isWillChangeMotionValue as p}from"../value/use-will-change/is.js";import{isMotionValue as d}from"../value/utils/is-motion-value.js";import{transformProps as c}from"./html/utils/transform.js";import{isControllingVariants as m,isVariantNode as v}from"./utils/is-controlling-variants.js";import{isVariantLabel as f}from"./utils/is-variant-label.js";import{updateMotionValuesFromProps as V}from"./utils/motion-values.js";import{resolveVariantFromProps as g}from"./utils/resolve-variants.js";import{warnOnce as j}from"../utils/warn-once.js";import{featureDefinitions as y}from"../motion/features/definitions.js";import{variantProps as C}from"./utils/variant-props.js";import{visualElementStore as M}from"./store.js";const b=Object.keys(y),S=b.length,T=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],w=C.length;class P{constructor({parent:e,props:s,presenceContext:i,reducedMotionConfig:r,visualState:o},n={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>t.render(this.render,!1,!0);const{latestValues:a,renderState:h}=o;this.latestValues=a,this.baseTarget={...a},this.initialValues=s.initial?{...a}:{},this.renderState=h,this.parent=e,this.props=s,this.presenceContext=i,this.depth=e?e.depth+1:0,this.reducedMotionConfig=r,this.options=n,this.isControllingVariants=m(s),this.isVariantNode=v(s),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(e&&e.current);const{willChange:u,...l}=this.scrapeMotionValuesFromProps(s,{});for(const t in l){const e=l[t];void 0!==a[t]&&d(e)&&(e.set(a[t],!1),p(u)&&u.add(t))}}scrapeMotionValuesFromProps(t,e){return{}}mount(t){this.current=t,M.set(t,this),this.projection&&!this.projection.instance&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach(((t,e)=>this.bindToMotionValue(e,t))),a.current||n(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||h.current),"production"!==process.env.NODE_ENV&&j(!0!==this.shouldReduceMotion,"You have Reduced Motion enabled on your device. Animations may not appear as expected."),this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){M.delete(this.current),this.projection&&this.projection.unmount(),e(this.notifyUpdate),e(this.render),this.valueSubscriptions.forEach((t=>t())),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const t in this.events)this.events[t].clear();for(const t in this.features)this.features[t].unmount();this.current=null}bindToMotionValue(e,s){const i=c.has(e),r=s.on("change",(s=>{this.latestValues[e]=s,this.props.onUpdate&&t.update(this.notifyUpdate,!1,!0),i&&this.projection&&(this.projection.isTransformDirty=!0)})),o=s.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,(()=>{r(),o()}))}sortNodePosition(t){return this.current&&this.sortInstanceNodePosition&&this.type===t.type?this.sortInstanceNodePosition(this.current,t.current):0}loadFeatures({children:t,...e},r,n,a){let h,u;if("production"!==process.env.NODE_ENV&&n&&r){const t="You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";e.ignoreStrict?s(!1,t):i(!1,t)}for(let t=0;t<S;t++){const s=b[t],{isEnabled:i,Feature:r,ProjectionNode:o,MeasureLayout:n}=y[s];o&&(h=o),i(e)&&(!this.features[s]&&r&&(this.features[s]=new r(this)),n&&(u=n))}if(!this.projection&&h){this.projection=new h(this.latestValues,this.parent&&this.parent.projection);const{layoutId:t,layout:s,drag:i,dragConstraints:r,layoutScroll:n,layoutRoot:u}=e;this.projection.setOptions({layoutId:t,layout:s,alwaysMeasureLayout:Boolean(i)||r&&o(r),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof s?s:"both",initialPromotionConfig:a,layoutScroll:n,layoutRoot:u})}return u}updateFeatures(){for(const t in this.features){const e=this.features[t];e.isMounted?e.update():(e.mount(),e.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):r()}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,e){this.latestValues[t]=e}makeTargetAnimatable(t,e=!0){return this.makeTargetAnimatableFromInstance(t,this.props,e)}update(t,e){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=t,this.prevPresenceContext=this.presenceContext,this.presenceContext=e;for(let e=0;e<T.length;e++){const s=T[e];this.propEventSubscriptions[s]&&(this.propEventSubscriptions[s](),delete this.propEventSubscriptions[s]);const i=t["on"+s];i&&(this.propEventSubscriptions[s]=this.on(s,i))}this.prevMotionValues=V(this,this.scrapeMotionValuesFromProps(t,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(t){return this.props.variants?this.props.variants[t]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(t=!1){if(t)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const t=this.parent&&this.parent.getVariantContext()||{};return void 0!==this.props.initial&&(t.initial=this.props.initial),t}const e={};for(let t=0;t<w;t++){const s=C[t],i=this.props[s];(f(i)||!1===i)&&(e[s]=i)}return e}addVariantChild(t){const e=this.getClosestVariantNode();if(e)return e.variantChildren&&e.variantChildren.add(t),()=>e.variantChildren.delete(t)}addValue(t,e){e!==this.values.get(t)&&(this.removeValue(t),this.bindToMotionValue(t,e)),this.values.set(t,e),this.latestValues[t]=e.get()}removeValue(t){this.values.delete(t);const e=this.valueSubscriptions.get(t);e&&(e(),this.valueSubscriptions.delete(t)),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,e){if(this.props.values&&this.props.values[t])return this.props.values[t];let s=this.values.get(t);return void 0===s&&void 0!==e&&(s=l(e,{owner:this}),this.addValue(t,s)),s}readValue(t){return void 0===this.latestValues[t]&&this.current?this.readValueFromInstance(this.current,t,this.options):this.latestValues[t]}setBaseTarget(t,e){this.baseTarget[t]=e}getBaseTarget(t){var e;const{initial:s}=this.props,i="string"==typeof s||"object"==typeof s?null===(e=g(this.props,s))||void 0===e?void 0:e[t]:void 0;if(s&&void 0!==i)return i;const r=this.getBaseTargetFromProps(this.props,t);return void 0===r||d(r)?void 0!==this.initialValues[t]&&void 0===i?void 0:this.baseTarget[t]:r}on(t,e){return this.events[t]||(this.events[t]=new u),this.events[t].add(e)}notify(t,...e){this.events[t]&&this.events[t].notify(...e)}}export{P as VisualElement};
