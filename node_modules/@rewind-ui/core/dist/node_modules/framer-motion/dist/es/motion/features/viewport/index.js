import{Feature as t}from"../Feature.js";import{observeIntersection as e}from"./observers.js";const r={some:0,all:1};class o extends t{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:t={}}=this.node.getProps(),{root:o,margin:n,amount:s="some",once:i}=t,a={root:o?o.current:void 0,rootMargin:n,threshold:"number"==typeof s?s:r[s]};return e(this.node.current,a,(t=>{const{isIntersecting:e}=t;if(this.isInView===e)return;if(this.isInView=e,i&&!e&&this.hasEnteredView)return;e&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",e);const{onViewportEnter:r,onViewportLeave:o}=this.node.getProps(),n=e?r:o;n&&n(t)}))}mount(){this.startObserver()}update(){if("undefined"==typeof IntersectionObserver)return;const{props:t,prevProps:e}=this.node;["amount","margin","root"].some(function({viewport:t={}},{viewport:e={}}={}){return r=>t[r]!==e[r]}(t,e))&&this.startObserver()}unmount(){}}export{o as InViewFeature};
