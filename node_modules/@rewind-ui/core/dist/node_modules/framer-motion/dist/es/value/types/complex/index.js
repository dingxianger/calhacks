import{cssVariableRegex as e}from"../../../render/dom/utils/is-css-variable.js";import{noop as n}from"../../../utils/noop.js";import{color as r}from"../color/index.js";import{number as t}from"../numbers/index.js";import{colorRegex as o,isString as s,floatRegex as u,sanitize as a}from"../utils.js";const i={regex:e,countKey:"Vars",token:"${v}",parse:n},l={regex:o,countKey:"Colors",token:"${c}",parse:r.parse},c={regex:u,countKey:"Numbers",token:"${n}",parse:t.parse};function m(e,{regex:n,countKey:r,token:t,parse:o}){const s=e.tokenised.match(n);s&&(e["num"+r]=s.length,e.tokenised=e.tokenised.replace(n,t),e.values.push(...s.map(o)))}function p(e){const n=e.toString(),r={value:n,tokenised:n,values:[],numVars:0,numColors:0,numNumbers:0};return r.value.includes("var(--")&&m(r,i),m(r,l),m(r,c),r}function f(e){return p(e).values}function d(e){const{values:n,numColors:t,numVars:o,tokenised:s}=p(e),u=n.length;return e=>{let n=s;for(let s=0;s<u;s++)n=s<o?n.replace(i.token,e[s]):s<o+t?n.replace(l.token,r.transform(e[s])):n.replace(c.token,a(e[s]));return n}}const v=e=>"number"==typeof e?0:e;const k={test:function(e){var n,r;return isNaN(e)&&s(e)&&((null===(n=e.match(u))||void 0===n?void 0:n.length)||0)+((null===(r=e.match(o))||void 0===r?void 0:r.length)||0)>0},parse:f,createTransformer:d,getAnimatableNone:function(e){const n=f(e);return d(e)(n.map(v))}};export{p as analyseComplexValue,k as complex};
